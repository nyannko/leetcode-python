{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["别背答案，别背答案，别背答案，重要的事说三遍","算法笔记","能全部背下来可还行","🥰alg"],"others.html":["\"","\"{}","#","'a',","'b',","'c')","(int","(n","(x","(x(n)","*","+",",c","/","//","0","0)","0.0014090538024902344","0.5","0:","1","1)","1):","1);","1)个盘移动到b","1)个盘移动到c","1)是o(n)的复杂度","1,","1.0","1/2","10,","10.0","10.0000000001","10.0000528956","10.032578511","10.840434673","10000)","15.02553012","1:","1;","1]","1],","1]:","1e","2","26.2400990099","2n+10","2t(n","50.5","5n","7,","8）","9:","=","==",">",">\"",">=",">>>","a,","abs(x","abs(x**2","algorithm)","array","assert","b","b)","b):","b,","bigger","bubblesort(nums):","c","c)","c):","c,","collect","c时间复杂度为o(2^n)，如前面的汉诺塔","c的时间复杂度为o(logn),","d","d)","def","depth","doubl","else:","exceeded，所以对输入n进行减半+奇偶判断。","fac(int","fac(n","factor","factor,","gcd(a,","gcd2(a,","hanoi(1,","hanoi(3,","hanoi(n","hanoi(n,","hole","i):","import","insertionsort(nums):","int","iter","j","josephus(k,","k","key","key:","len(nums)","len(nums)):","max","max(double[]","max)","max;","merg","method)：原理是取一条曲线f(x)点x0处的切线，得到和x轴相交后新点x1，再取f(x)点x1处的切线....以此类推，得到递推公式","min","mypow(doubl","n","n)","n):","n>=n0>=1，使得f(n)=n0","nb，所以时间复杂度为o(n)","num","num)","num):","num,","num/xn)","number","nums)","nums.length;","nums[0];","nums[i]","nums[i];","nums[j","nums[j]","nums[j],","o(n)","o(n)衡量了算法的增长曲线，也就是程序运行时间和输入大小的关系。","op","ordereddict","pow(x,","pow:直接x","print","public","range(0,","range(1,","range(i","recurs","return","right","run","selectionsort(nums):","shift","size","sort:适合链表","sqrt(num):","sqrt2(x,","static","t(0)","t(n","t(n)","t(n/2)","timeit('x.append(1)','x=[]',","total:","x","x(n))","x)","x,","x=1.0","x^2","xn带入以上公式,","{","{//","{}","{}\".format(a,","}","一些递归","下面是sqrt(100)的迭代过程,","代码运行时间","其他","其他简单推论：递归输入t(n)","冒泡排序：i代表需要进行两两排序的数字(所以边界是数组长度减去一)，j代表剩下的需要排序的数字。","初值点x不为负数","取二阶可导曲线f(x)","取初始值x0","如果存在一个**常数c**>0,","常见排序","得到迭代公式x(n+1)=(1/2)*(xn+","把a中最下面的盘子移动到c","把a中的(n","把b中(n","推出通项公式t(n)","插入排序：先从后面拎出一个元素和前面已经排好序的进行比较，如打牌的时候摸牌。","时间复杂度o(n)","最大公约数和最小公倍数","桶排序：洗扑克牌，先按花色分成四堆，再排","欧几里得算法(euclidean","汉诺塔：可以对比二叉树的中序遍历，分为三步:","牛顿开方法(newton'","简单程序分析：","简单递归程序分析：","约瑟夫环：k:数到的人消失，n:总人数，求最后剩下的人的位置","设f(n)和g(n)为两个函数，f(n)=o(g(n))成立的条件是：","证明2n+10的时间复杂度是o(n):","越靠近答案计算次数越少，比如说100的话是10只用计算一次，但是有些点可能没有答案如极值点如0","迭代公式x(n+1)","选择排序：从后面拎出一个最小值与前面元素交换。比如人眼排列有限数据（可以一眼看出最小值的话，如1,","，会发生maximum"],"array.html":["\"","\"\";","&&","'a'","'a';","'z'","(i","(int","(j","(l","(nums1[i]","(s.charat(i)",")","+","+=","//","0","0)","0,","0;","1","1;","1，最大的index为length","2};","4,","4};","5,","=",">",">=","[]args){","[l,","]","];","a.length;","args)","arr","arr)","array","arrayindexoutofboundsexception();","arrays.sort(arr);","ascend","b","b.length;","boolean","char","convert","current","i;","in.nextline();","index","index)","index是从0开始，也就是k","inplace合并两个数组","int","int[]","int[lena","int[n];","issorted(int[]","j","k","l,","len","lena","lenb","lenb];","length","long","m","m,","main(str","main(string[]","max","max)","merge(int[]","n","n)","n,","nanosecond:","new","nums1,","nums1.length,","nums1[i","nums1[k","nums2)","nums2,","nums2.length;","nums2[j","nums2[j])","p","point","public","r)","r]","randomarray(int","rang","re","res;","return","s","s)","s.charat(i);","s.length()","sb","sb.append(max);","scanner","scanner(system.in);","second","shuffle数组","size","solution(str","sort","starttim","starttime;","static","string","stringbuild","stringbuilder();","sub","system.currenttimemillis()","system.currenttimemillis();","system.nanotime()","system.nanotime();","system.out.println(\"execut","system.out.println(sb.reverse().tostring());","throw","time","timeelaps","timeelapsed);","timeelapsedsecond","timeunit.milliseconds.toseconds(timeelapsed);","void","{","{1,2,3};","{3,","{4,","{4,5};","}","一些基本的数组操作","也就是寻找开头最大的串串","从前向后合并两个排序的数组:","判断是否排序","字典序最大","将数组拆分成长度为3，和2的两个子数组，并求出各部分的和。","微秒","拆分数组并求和","数组","数组b合并到a后面并返回新数组:","数组合并","测量时间","生成一串范围内的随机数组","纳秒","长度为max(index)+1，个数为最右的index减去最左的加1","间隔为数组元素个数减去1","需要分清数组的index，长度（范围，个数），第k个数，间隔。"],"alg/215_Kth_Largest_Element_in_an_Array.html":["(int","(l","(nums[l]","(nums[mid]","(q.size()","+","//","0,","1)","1.使用总容量为k+1的优先队列维护值最大的k个点，一旦总数量y超过k，移除y中值最小的点。堆中插入和删除的最差时间为o(log(k),log(k)为堆的高度，又因为遍历整个数组，所以时间复杂度为n*log(k)，不会修改输入数组。","10","10,","100,","1;","1]","1的关系，如果mid","1，继续在左边寻找。时间o(n)，会修改输入数组。注意边界。。。。。。。。。。。。。。。。。","1，说明左边的长度较长，缩小右边界长度，使r","2,","20,","215.","2]","3","3,","30,","3]","4","4,","5,","5]","6,","6]",":","=",">",">>>","[1,","[2,","[3,","[30,","[3]","[4,","[6,","array","befor","collection.reverseorder());","element","findkthlargest(int[]","input:","int","k","k)","k=4","kth","l","l++;","l,","l;","largest","mid","middleofthree(int[]","middleofthree(nums,","new","num","nums)","nums,","nums.length","nums[l]","nums[l];","nums[r]","nums[r];","out","partition(int[]","partition做法，在数组中随机取一个数字pivot=num[l]作为基准将其partition成左右两部分，左边比num[l]小，右边比num[l]大，分割完后计算左边数字的长度，也就是比较返回值mid(注意mid是数组下标)和k","pivot","pivot)","pivot;","pop:","priorityqueu","priorityqueue<>();","priorityqueue<>(nums.length,","public","q","q.offer(num);","q.peek();","q.poll();","r","r)","r);","rand(int[]","rand(nums,","random","random();","random.nextint(r","randomindex","randomindex);","return","swap(int[]","swap(nums,","tmp","tmp;","void","{","{3,2,1,5,6,4},","}","一个例子","从大到小排列","使用offer()或者add()方法时会进行排序，这里维护一个小堆。poll()方法移除优先级最高的点，这里是最小值","例子[3,2,3,1,2,10,4,100,20,30,5,5,6],","其他的坑：小堆，大堆。。","堆顶记录第k大的元素","最大堆可以用collection.reverseorder()这个comparator，别的自定义对象需要自己实现compar"],"alg/703_Kth_Largest_Element_in_a_Stream.html":["(int","(queue.size()","703.",":","=","add(int","add(num);","class","element","int","int[]","k,","k;","kth","kthlargest","kthlargest(int","largest","new","num","nums)","priorityqueu","priorityqueue<>(k);","public","queue","queue;","stream","this.k","val)","{","}"],"alg/70_Climbing_Stairs.html":["(b","(int","(n","(target","*","+","+=","//","0","0)","0;","1","1)","1,","1;","1];","2","2)的意思举例来说，当n","2;","3","4","4时，f(4)","5","70.","=","==",">","^","a)","a;","arr","arr[0]","arr[1]","b","climb","climbstairs(int","climbstairsii(int","f(1)","f(2)","f(2)代表从三级台阶可以跳一级到达四级，也可以从二级台阶跳两级跳到四级，所以结果为两数之和。","f(3)","f(4)","f(n","int","int[]","int[n","n","n)","new","public","rectcover(int","return","stair","target)","{","}","一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。","三级可以由二级，一级台阶跳上来","公式：","又因为f(1)","变态跳台阶","和之前普通跳台阶的递推式差不多，比如","四级台阶可以由三级，二级，一级台阶跳上来","我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？","所以f(n)","斐波那契数列","由等比数列递推式推出f(n)","矩形覆盖","迭代：","递推式:f(n)"],"alg/54_Spiral_Matrix.html":["!=","&&","((row","(int","(matrix",")","+","0)","1,","1;","1][j]);","1][j]，列的取值范围：[col","1]，行的取值范围：[i","1（防止重复打印同一列）","1（防止重复打印同一行）","2,","2;","54.","=","==",">","arraylist<>();","col","cycl","i)","i)，并且当前列不可等于最后一列i","i]，并且当前行不可以等于最后一行：i","int","j","list","matrix","matrix)","matrix.length","matrix.length;","matrix[0].length;","matrix注意判空，防止列数为0","new","null","public","re","res.add(matrix[j][i]);","res.add(matrix[row","res;","return","row","spiral","spiralorder(int[][]","{","||","}","打印最上行：行不变列变，坐标：[i][j]，列的取值范围：[i,","打印最下行：行不变列变，坐标：[row","打印最右列：行变列不变，坐标：[j][col","打印最左列：行变列不变，坐标：[j][i]，行的取值范围：[row","顺时针打印矩阵，重点在于行列的取值范围。首先算出圈数cycle（行列的最小值一半的上界，画一下图就知道了），然后取变量i在cycle中进行循环打印。"],"alg/384_Shuffle_an_Array.html":["(int","(size","*/","/**","0;","1)，随机数random的位置：i后面的所有index，然后交换i和random的位置。","384.","=","array","array.","arrays.copyof(this.nums,","class","configur","copi","int","int[]","it.","new","nums)","nums.length;","nums;","origin","public","random","random();","random;","reset","reset()","return","shuffl","shuffle()","size;","solut","solution(int[]","this.num","this.nums;","this.random","this.siz","this.size);","{","}","到","最直观的，直接新建复制数组，i的取值范围：0"],"alg/179_Largest_Number.html":["\"\";","\"0\";","(int","(num","(string","(strs[0].equals(\"0\"))","+","0)","0;","179.","1，相当于原数组中的两个数字不需要调换顺序。","=","==","@overrid","arrays.sort(strs,","c","c);","comparator()","compare(str","int","largest","largestnumber(int[]","new","null","number","nums)","nums.length","public","return","s1","s1,","s1;","s2","s2)","s2;","s:","sb","sb.append(s);","sb.tostring();","str","str1","str2","str2.compareto(str1);","string","string[]","string[nums.length];","stringbuff","stringbuffer();","strs)","{","||","}","};","用于数组的排序。举例来说，比如原数组为[9,5]，有两种排序的可能性，分别为95和59，因为str2小于str1，所以返回","重点在于新建一个comparator，"],"alg/1_2Sum.html":["(int","0;","1.","2sum","=","hashmap<>();","i;","index)","int","int[]","map","map(value,","map.get(j)","new","null;","nums,","nums[i];","public","return","target)","twosum(int[]","{","}","字典法，将原字典key和value转换，遍历一次数组并返回第一个数字出现的index和当前数字的index。"],"alg/50_Pow.html":["%","&","((n","(n","*","//","0","0)","1)","1);","1)是o(n)的复杂度","1.00000","1.00001","120","123456","123456，所以对输入n减半处理，并进行奇偶判断。比如16=4*4，只要对4进行相乘即可求出结果。","15","15432","1929","2","2147483648","241","3","3.4368447520767935","30","30864","3858","482","50.","60","61728","7","7716","964","==",">>",">>出错","depth","doubl","exceeded，如测试用例1.00001","int","method.","mypow(doubl","n","n)","n/2","pow","pow(x,","public","recurs","squar","x,","{","一个例子","注意优先级","直接x","，会发生maximum"],"alg/69_Sqrtx.html":["#","(math.pow(m,","(x","(x(n)","*","**","+","/","0","0.5","1.0","1/2","10.0","10.0000000001","10.0000528956","10.032578511","10.840434673","15.02553012","1;","1e","2","2)","26.2400990099","50.5","69.","9:","=","==",">",">>","abs(x","assert","bound。","def","int","iter","l","m","m)","m;","method)：原理是取一条曲线f(x)点x0处的切线，得到和x轴相交后新点x1，再取f(x)点x1处的切线....以此类推，得到递推公式","mysqrt(int","mysqrt3(int","num","num)","num):","num,","num/xn)","public","r","recurs","return","sqrt(num):","sqrt(x)","sqrt2(x,","x","x(n))","x)","x=1.0","x^2","xn带入以上公式,","{","}","下面是sqrt(100)的迭代过程,","二分法的扩展，条件是一个数的平方大于x。可以用乘法或者除法进行比较，除法的时候要注意l=1，不然的话m有可能等于零出错。加上二分法最基本的两种写法，那么可以有四种写法。返回lower","初值点x不为负数","取二阶可导曲线f(x)","取初始值x0","得到迭代公式x(n+1)=(1/2)*(xn+","牛顿开方法(newton'","设定精度范围","越靠近答案计算次数越少，比如说100的话是10只用计算一次，但是有些点可能没有答案如极值点如0","迭代公式x(n+1)"],"alg/149_Max_Points_on_a_Line.html":["!=","\"\"\"","#","&&","'infinity'dy前面加上decimal，因为浮点数精度可能出现问题导致不同的点算出相同的斜率。","(!(other","(1,","(1，1)中有两个点斜率相等","(int","(n","(other","(point)","*","+","..","/","0","0):","0;","0],","1","1)","1):","1,","1.0)","149.","1],","1|","1})","2","2):","2]]","2|","2})","3","3;","4","5","6",":rtype:",":type","=","==",">","@overrid","[1,","[2,","[[0,","^","a,","a;","b)","b;","boolean","class","concis","decimal(di","def","dx","equals(object","false;","first","gcd","hashcod","hashcode()","hashmap<>();","https://leetcode.com/problems/max","input","instanceof","int","iter","java","len(points)","line","line/discuss/47113/a","line/discuss/47268/two","list[point]","map","max","maxpoints(point[]","maxpoints(self,","maxpoints2(self,","n/2次，用字典记录下各个斜率（或者点）出现的次数。最后返回结果为一次迭代中最多的点+重复的点+本身","new","note","o","o.x","o.y;","other)","other;","point","point(int","point))","points)","points):","points.length;","points:","public","python","ref","result","return","second","size","solut","third","this)","this.i","this.x","true;","x","x;","y","y;","y的gcd来同时缩小x，y的范围避免浮点数的精度问题。","{","{(0,","{(1,","}","使用java重写python第二种方法的时候，逻辑上只要xy相等point就算相等，需要重写point中的equals和hashcode方法，hashcode方法在每次存储或者查找map的时候计算point存放的位置，equals用来比较两个点的x,y是否相等。","如果使用这种方法的话需要在slope","思路是两个for循环，需要比较(n","第二种方法使用求x,","计算一个列表中最多能有几个点在一条线上。","运行例子","返回最大值3","还有一种比较快的方法没有看，好像是直接比较乘法。"],"alg/169_Majority_Element.html":["(count","(int","(integ","(major","(map.containskey(n))","(map.get(n)","+","/","//","0)","0,","0;","1);","1.boyer","169.","2)","2.字典","2];","3.排序+返回中间值",":",";","=","==",">","?","algorithm","array.length","arrays.sort(nums);","c","count","count++;","element","find","hashmap<>();","https://en.wikipedia.org/wiki/boyer%e2%80%93moore_majority_vote_algorithm","https://gregable.com/2013/10/major","int","major","majority.html","majorityelement(int[]","majorityelement3(int[]","map","map.get(n)","map.put(n,","moor","n","n)","n:","n;","new","nums)","nums.length","nums[nums.length","o(1)","o(n)","o(nlogn)","public","ref","return","static","verifi","vote","{","}","大概是o(logn)?","数组中超过一半的数字","粉色格子为count=0时换主，返回绿色格子"],"alg/173_Binary_Search_Tree_Iterator.html":["!=","\"\"\"","#1","#2","#3","&&","(!stack.isempty()","(root","(stack.isempty()","(this.root","*","*/","/**","0;","173.",":rtype:",":type","=","==","@return","[]","__init__(self,","binari","bool","boolean","bstiter","bstiterator(object):","bstiterator(treenod","class","def","dfs(self,","else:","fals","false;","hasnext()","hasnext(self):","inordertraversal(self,","inorder的递归写法，思路就是按照左中右的处理顺序(左边处理完了，将左边的节点放入结果，上述图例中按照1111231...的顺序执行)","int","iter","java用linkedlist做，注意判空不要直接像python一样和null比较。。","linkedlist","linkedlist<>();","new","next","next()","next(self):","next_nod","next_node.right","next_node.v","nextnod","nextnode.right;","nextnode.val;","none","null)","number","privat","public","re","res)","res):","res.append(root.val)","return","root","root)","root):","root,","root.left;","root:","root;","search","self.dfs(root,","self.dfs(root.left,","self.dfs(root.right,","self.p","self.p.left","self.p:","self.stack","self.stack.append(self.p)","self.stack.pop()","smallest","stack","stack.pop();","stack.push(root);","stack.push(this.root);","stack;","this.root","this.root.left;","tree","treenod","true","true;","whether","{","||","}","一个例子：检查左边的none后pop(1),检查右边的none后pop(3)","二叉搜索树的中序遍历，定义一个self.p指针，永远指向下一个节点。思路是左边的节点全部一次性进栈，完成后，pop最上面的节点a，检查它是否有右节点，如果有的话就作为下一个遍历的根节点，因为此节点的值大于a小于a的父节点。如果a没有右节点，说明没有值在a和a的父节点之间，那么直接popa的父节点作为答案。"],"alg/704_Binary_Search.html":["#","######","(l","(nums[m]","(r","+","/","0,","1","1,","1;","1改成len(nums)免去检查","2;","704.","=","==",">",">=","a[m]","binari","boundari","bs(a,","bs(nums,","bs1(a,","check","def","dfs(int[]","dfs(nums,","else:","h+l>x，由其中的h和","int","l","l)","l)/2不会溢出。","l,","len(a)","len(nums)","lower_bound(a,","l不会溢出，又因为l，所以l+(h","l和r=m同时写会造成死循环，例如bs([3,4,7,9,10,11],6)，所以要在l=r的时候跳出循环进行边界检查。这个程序会错的原因是返回时没有进行检查。","l得h","l没有对边界进行检查。如bs1([3,4,7,9,10,11],11)返回","l，所以h","m","m,","m;","nums,","nums.length","nums.length;","nums[l]","public","r","r)","r,","return","search","search(int[]","tar):","tar:","target)","target):","target);","target:","x>h>=0，","x>l>=0，","{","}","一样的java递归写法:","二分法的边界问题还是有一点点搞的，特别是题目变形的时候会发现其实是在猜边界写题....这样其实很不好，我觉得这个边界问题其实就是除法取下界的锅。给出两种错掉的迭代写法：","变种写法..len(nums)","已知","是说左边指针会多走一步到达上界。","正确写法一：小于判断加检查边界后返回(len(num);","正确写法二：小于等于加直接返回(len(num)","求下界中，这个条件a[m]","求区间中重复数字的上下界长度：","溢出：","的意思是说数组中如果一个数等于target的时候，右边指针会多走一步到达下界。同样在求上界中，a[m]","这里是l=m+1而不是l=m：是因为除法取下界会造成l边界不会改变，从而形成死循环。","错误写法一:","错误写法二:"],"alg/81_Search_in_Rotated_Sorted_Array_II.html":["&&","(l","(nums[mid]","(target","//","0,","1;","81.","=","==",">",">=",">>","array","boolean","ii","increment","int","l","nums,","nums.length;","nums[l]","nums[l])","nums[mid]","public","r","return","rotat","search","search(int[]","sort","target","target)","true;","{","升级版二分法，注意边界。。。。。。。。。。特别是target所在的范围，是一块连续的区域。如果有重复数字的话，就把左边界自增1，指向下一个数字。"],"alg/74_Search_a_2D_Matrix.html":["%","(int","(l","(matrix.length","(matrix[i][mid]","(mid_valu","(target","*","/","0","0)","0,","0;","1","11,","16","16,","1;","20],","2d","3","3,","30,","34,","5,","50]","6","7","74.","7],","=","==",">",">>","[","[1,","[10,","[23,","]","boolean","col","col;","col=mid%col","col];","col][mid","false;","int","l","matrix","matrix,","matrix.length,","matrix[0].length","matrix[0].length;","matrix[i][mid])","matrix[mid","mid:","mid_valu","mid_value:","mid_value的坐标计算：row=mid/col,","public","r","return","row","search","searchmatrix(int[][]","target","target)","true;","{","||","}","因为并成一整行之后的数字刚好也是有序的，所以可以把整个矩阵看成一行进行排列","对每一行进行一次二分法"],"alg/240_Search_a_2D_Matrix_II.html":["&&","(col","(matrix.length","0","0)","0,","11,","12,","13,","14,","15],","16,","17,","19],","1;","21,","22],","23,","240.","24],","26,","2d","30]","4,","5,","6","6,","7,","8,","9,","=","==",">=","[","[1,","[10,","[18,","[2,","[3,","]","boolean","col","false;","ii","int","matrix","matrix,","matrix[0].length","public","return","row","search","searchmatrix(int[][]","target","target)","{","||","以第一行最右边元素（刚好是第一行和最后一列的中间值）作为开始点，小于它减去col，大于加上row，新的点成为新的基准点，再向下或者向左走。注意边界！！！！"],"alg/53_Maximum_Subarray.html":["(int","(nums.length","0","0;","1;","1前面的已经累加的和,i的数值)，而res是用来记录整个遍历过程中最大的f。","53.","=","==","f","int","maximum","maxsubarray(int[]","null)","num","nums)","nums[0],","nums[0];","public","result","return","subarray","{","||","求出数组的连续子序列之和，设定变量f用来记录当前的最大和，也就是取出max(i"],"alg/287_Find_the_Duplicate_Number.html":["(int","(l","(num","(nums.length","(set.contains(num))","0,","0;","1;","2,","287.","4,","5,","6]，前面一种解法可以有0，set解法都适用。",":","=",">>","count","duplic","find","findduplicate(int[]","hashset","hashset<>();","http://keithschwarz.com/interesting/code/?dir=find","int","l","n]","n]的大小范围（不能是0），否则出界，如测试用例[0,","new","num","num;","number","nums)","nums.length;","point,","public","r","return","set","set.add(num);","{","}","如果不考虑长度和范围，可以设置set并去重，时间空间均为o(n).","寻找长度为n+1数组中只重复出现一次的数字，数组范围在[1,","快慢指针，同链表cycle检测#142，找entri","这种解法限制很大，必须同时满足n+1长度，[1,","鸽巢原理/抽屉原理+二分法，算出中位index：mid，对小于等与mid的数字进行统计，若大于mid，说明左边有重复的数字（可以想成原来应该是相等的，但是有重复的数字所以超过了限制），则移动右指针为r。时间o(nlogn)，空间o(1)"],"alg/8_String_to_Integer.html":["%","&&","((integer.max_valu","(c.length","(index","(integer.max_valu","(str","*","/","//","0)","0,","0;","1,","10","123，不是整数","8.","9)","=","==",">","array","break;","c","char[]","check","digit","empti","index","int","integ","integer.max_valu","loop","myatoi(str","myatoi3(str","null","overflow","overflow:","public","re","replac","return","sign","static","str","str)","str.isempty())","str.tochararray();","str.trim();","string","{","||","去掉前面的空格，注意中间不用去掉，如+0","换成char","检查空字符串","设置遍历指针index","边界检查后，检查空格之后的第一个符号位（如果存在）","返回sign","进入循环，判断是否为数字，判断是否溢出"],"alg/349_Intersection_of_Two_Arrays.html":["&","(!c.contains(it.next()))","(int","(it.hasnext())","0;","349.",":","=","array","boolean","c)","false;","hashset();","hashset<>();","int","int[]","int[set1.size()];","intersect","intersection(int[]","it.remove();","iter","iterator();","list(set(nums1)","modifi","modified;","new","num","num;","nums1)","nums1,","nums2)","objects.requirenonnull(c);","public","re","res;","res[i++]","retainall(collect","retainall的实现方式，可以看到比contains多了些代码:","return","set","set(nums2))","set1","set1)","set1.add(num);","set1.retainall(set2);","set2","set2.add(num);","set，很乱，各种数据类型乱转。","true;","two","{","}","求两个数组的交集","求集合交集，java慢慢"],"alg/350_Intersection_of_Two_Arrays_II.html":["(int","(map.getordefault(num,","+","0)","0;","1);","350.",":","=",">","array","arrays.copyof(res,","hashmap<>();","i);","ii","int","int[]","int[size];","intersect","intersect(int[]","map","map.get(num)","map.getordefault(num,","map.put(num,","math.min(nums1.length,","new","num","num;","nums1)","nums1,","nums2)","nums2.length);","public","re","res[i++]","return","size","two","{","}"],"1_linkedlist.html":["141,","142","143（这两题前两步一样，都是先分割再反转，再比较或合并）,","146(lru)","147","148","160","19","203,","206,","21,","23(一开始的impl很慢)","234,","237,","24,","328","707,","817","82,","83,","86,","876,","cycle:","deletion:","find","insertion:","intersection:","link","list","merge:","middle,","partition:","reversion:","sort:","什么地方学到过链表？","其他:","操作：迭代，递归","数组和链表：","数组：长度确定，随机读写，容易实现","比如hashmap中的每一个bucket中存放的对象可以用链表连接存储，比如垃圾收集中的freelist，比如linux文件系统的inode，比如堆上对象的创建，比如poll(是不啦)，比如图，还有比如某次作业存放job","组合:","还有区间反转记得看","链表","链表：长度不确定，边界增删频繁","难点：边界判断，指针指向"],"alg/206_Reverse_Linked_List.html":["\"\"\"","(cur","1.recursion:","2.iteration:","206.",":rtype:",":type","=","==","cur)","cur.next","cur.next;","def","dfs(cur,","dfs(listnod","dfs(null,","head","head)","head):","head);","head.next","head:","link","list","listnod","next_nod","next_node);","none","null)","pre","pre,","pre;","public","return","revers","reverselist(listnod","reverselist(self,","{","}","分为三步：定义递归函数以及它的input，考虑递归关系(改指针)，设定返回条件(cur为null的时候返回pre)","四步见图"],"alg/24_Swap_Nodes_in_Pairs.html":["!=","&&","((head==","(head.next)","(point.next","1.recustion:","2.iteration:","24.","=","==","dummi","dummy.next","dummy.next;","dummy;","head)","head.next","head.next;","head;","link","listnod","listnode(0);","list升级版","n","n.next","n;","new","node","null","null)","pair","point","point.next","point.next.next","point.next.next;","point.next;","public","return","revers","s1","s1.next","s1;","s2","s2.next","s2.next;","s2;","swap","swappairs(head.next.next);","swappairs(listnod","{","||","}","和中序遍历的递归写法有点像，先定义n，然后让head.next递归去得到结果，最后让n.next=head连接整理好的链表，过程见图。","见图顺序，dummy的作用是创建新的链表头，返回结果的时候用，point是取节点的基础。"],"alg/876_Middle_of_the_Linked_List.html":["!=","&&","(fast","876.","=","fast","fast.next","fast.next.next;","head)","head,","head;","link","list","listnod","middl","middlenode(listnod","null","null)","public","return","slow","slow.next;","slow;","{","}","快慢指针求链表中间值，奇数时fast.next==null，偶数时fast==nul"],"alg/141_Linked_List_Cycle.html":["!=","&&","(fast","//","141.","=","==","boolean","case","cycl","false;","fast","fast.next","fast.next.next;","hascycle(listnod","head)","head,","head;","link","list","listnod","null","null)","public","return","slow","slow)","slow.next;","true;","{","}","快慢指针，当快指针和慢指针重叠时说明有cycle，while条件是为了没有cycle的时候跳出循环。"],"alg/142_Linked_List_Cycle_II.html":["!=","&&","(entri","(fast","142.","=","==","cycl","detectcycle(listnod","entri","entry.next;","entry;","fast","fast.next","fast.next.next;","head)","head,","head;","ii","link","list","listnod","null","null)","null;","public","return","slow","slow)","slow.next;","{","}","寻找cycle的开始节点。相比快慢指针另外多加了一个指针entry，用来从头寻找cycle入口"],"alg/160_Intersection_of_Two_Linked_Lists.html":["!=","(heada","(headb","160.",":","=","==","?","getintersectionnode(listnod","heada","heada,","heada.next;","heada;","headb","headb)","headb.next;","headb;","intersect","link","list","listnod","nodea","nodeb","null","null)","null;","public","return","two","{","||","}","由于第一次遍历可能因为不等长找不到交点，在遍历完之后需要让链表的尾部等于对方的头节点，直到找到交点跳出循环。"],"alg/237_Delete_Node_in_a_Linked_List.html":["237.","=","delet","deletenode(listnod","link","list","node","node)","node.next","node.next.next;","node.next.val;","node.v","public","void","{","}","删除链表中的一个节点（除了尾节点），就是修改值和指针。如果要删除尾节点还必须知道被删除链表的指针。"],"alg/203_Remove_Linked_List_Elements.html":["!=","&&","(head","(head.val","(node","(node.next","//","203.",":","=","==","?","case","cur","cur.next","dummi","dummy.next","dummy.next;","dummy;","element","head","head,","head.next","head.next;","head.val","head;","int","intern","link","list","listnod","listnode(0);","naive方法，先移除头部，再移除中间。","new","node","node.next","node.next.next;","node.next.v","node.next;","node方法","null","null)","null;","public","recurs","remov","removeelements(head.next,","removeelements(listnod","return","same","val)","val);","{","}"],"alg/83_Remove_Duplicates_from_Sorted_List.html":["!=","&&","(head","(head.next","(head.val","83.",":","=","==","?","deleteduplicates(head.next);","deleteduplicates(listnod","duplic","head","head)","head.next","head.next.next;","head.next.val)","head.next;","head.val","head;","list","listnod","naive方法:","node","node;","null","null)","public","recursion:","remov","return","sort","{","||","}","不看答案还是写不出啊啊啊啊啊啊啊啊啊","你🐴"],"alg/82_Remove_Duplicates_from_Sorted_List_II.html":["!=","&&","(cur","(cur.next","82.","=","==","cur","cur)","cur.next.v","cur.next;","cur.val)","deleteduplicates(listnod","dummi","dummy.next","dummy.next;","dummy;","duplic","head)","head;","if(pre.next","ii","list","listnod","listnode(0);","new","node法跳过重复nod","null","null)","pre","pre.next","pre.next;","public","remov","return","sort","{","}"],"alg/86_Partition_List.html":["!=","(head","(head.val","1","3来说，分割完之后lh.next=1","86.","=",">2",">2,",">2,而rh=4",">2....的无限循环，所以需要删除rh最后这个2。（为什么会有这个2呢是因为在最后一次加node的时候没有新的值了，so这个2没有被覆盖。",">2。rh最后这个2和lh最后这个2是一样的node，所以在运行l.next",">3",">4",">5","head,","head;","int","l","l,","lh","list","listnod","listnode(0),","listnode(0);","new","node","null)","null;。比如拿例题head","partit","partition(listnod","public","r","r;","rh","rh.next;的时候，其实会同时改变l和rh，结果就变成1","x","x)","{","不加新node，直接用head，head就像一条蛇游走在l和r之间什么鬼啦。这里有个坑点就是必须加上r.next","新建两个list，小于val去左边，大于去右边，最后拼一拼","无脑新添node法"],"alg/234_Palindrome_Linked_List.html":["!=","&&","(fast","(node","(pre","(pre.val","//","234.","=","boolean","compar","false;","fast","fast.next","fast.next.next;","head","head)","head,","head.next;","head.val)","head;","ispalindrome(listnod","link","list","listnod","naive迭代","node","node.next","node.next;","node;","null","null)","null;","palindrom","pre","pre.next;","pre;","public","return","revers","slow","slow.next;","slow;","split","tmp","tmp;","true;","{","}"],"alg/143_Reorder_List.html":["!=","&&","(cur","(fast","(head","(l1","//","1","143.","2","3","4","5","=","==",">",">2",">3",">4;",">6",">7","cur","cur.next","cur.next;","cur;","fast","fast.next","fast.next.next;","head","head)","head,","head.next","head;","l1","l1.next","l1.next;","l2","l2;","list","listnod","merg","null","null)","null,","null;","public","rel2","rel2;","reorder","reorderlist(listnod","return;","revers","slow","slow.next","slow.next;","split","tmp","tmp;","void","{","||","}","偶数list会被分为1","分割的时候，","分割，反转，合并","奇数list会被分为1"],"alg/147_Insertion_Sort_List.html":["!=","&&","(cur","(pre.next","//","147.","=","cur","cur.next;","dummi","dummy,","follow","head)","head,","insert","insertionsortlist(listnod","list","listnod","listnode(0);","new","next","null","null)","null;","pre","pre.next.v","public","sort","store","tmp","valu","{","过程见图"],"alg/328_Odd_Even_Linked_List.html":["!=","&&","(even","(head","//","328.","=","==","concat","even","even.next","even.next.next;","even.next;","even;","evenhead","evenhead;","head)","head,","head.next,","head;","link","list","listnod","null","null)","odd","odd.next","odd.next.next;","odd.next;","oddevenlist(listnod","public","return","{","}","这里的even和odd指的是index。奇数位的连成一个链表，偶数位的连成一个链表，最后这两个链表连一连。"],"alg/148_Sort_List.html":["!=","&&","(fast","(head","(l","(l.val","148.","=","==","dummi","dummy;","fast","fast.next","fast.next.next;","head","head)","head,","head.next","head;","l","l,","list","listnod","listnode(0);","merge(l,","merge(listnod","new","null","null)","null;","pre","pre.next","public","r","r)","r);","return","slow","slow.next;","slow;","sort","sortlist(head),","sortlist(listnod","sortlist(slow);","{","||","}","将list等分，merge函数和21题一样"],"alg/21_Merge_Two_Sorted_Lists.html":["!=","&&","(l1","(l1.val","21.",":","=","==","?","head","l1","l1,","l2","l2)","l2;","list","listnod","listnode(0);","merg","mergetwolists(listnod","naive方法设置dummi","new","node再比较大小。","null","null)","p","p;","public","recursion:","return","sort","two","{","||"],"alg/23_Merge_k_Sorted_Lists.html":["!=","(l","(l1","(l1.val","(lists.length","(newlist.size()","+","0)","0,","1)","1),","1);","1,","1;","2)","2));","23.",":","=","==",">=",">>","?","arraylist<>(arrays.aslist(lists));","comparator()","compare(listnod","heap","int","k","l,","l1","l1,","l2","l2)","l2);","l2;","list","list);","listnod","lists)","lists,","lists.length","lists[l];","m","m);","merg","merge(l1,","merge(listnod","merge2list(newlist.get(newlist.size()","mergeklists(listnode[]","mergeklists2(listnode[]","naiv","new","newlist","newlist.add(0,","newlist.get(0);","newlist.get(newlist.size()","newlist.remove(newlist.size()","null","null)","null;","partition(listnode[]","partition(lists,","priorityqueu","priorityqueue<>(lists.length,","public","q","r)","r);","recus","return","sort","{","||","}","一开始的实现，拼一拼","优先队列重写listnode的comparator从小到大取点。"],"alg/146_LRU_Cache.html":["\"\"\"","#","(when","//","0)","0),","0.75f,","0.75f是hashmap默认的load","0:","1","1);","146.",":rtype:",":type","=",">","__init__(self,","_add(self,","_remove(self,","access","boolean","cach","capac","capacity)","capacity):","capacity:","capacity;","class","collect","def","del","dict","eldest","eldest)","element","else:","factor会减少空间开销，但是会增加collision，从而增加了get和put的时间开销。","factor，用于hashmap的自动扩容。比如说hashmap有16个buckets，当12(16*0.75)个buckets装满后，hashmap会自动增加到32个buckets。","front","get(int","get(self,","import","int","java","key","key)","key):","key,","key:","larger","last","last_nod","last_node.next","link","linkedhashmap<>(capacity,","linkedhashmap直接实现，注意参数和removeeldestentry的返回值，这个配置在tij中也提到过，没有被访问过的元素会在列表的最前面。","list","lru","lrucache(object):","lrucache2","lrucache2(int","lrucache:","map","map.getordefault(key,","map.put(key,","map;","new","new_nod","next_nod","next_node.prev","node","node(0,","node(key,","node):","node.next","node.prev","node.valu","node:","node_remov","none","order","ordereddict","ordereddict()","prev_nod","prev_node.next","protect","public","put(int","put(self,","remov","removeeldestentry(map.entri","return","self._add(new_node)","self._add(node)","self._remove(node)","self._remove(node_remove)","self.cap","self.capac","self.d","self.d.pop(key)","self.d.popitem(last=false)","self.d:","self.d[key]","self.d[node_remove.key]","self.head","self.head,","self.head.next","self.key","self.next","self.prev","self.siz","self.tail","self.tail.prev","self.valu","size()","this.capac","true","true)","updat","valu","value)","value):","value);","value:","void","{","{}","}","};","主要逻辑：","作用：平衡时间和空间的开销。高的load","链表+字典实现，所有用过或者新插入的点会插入链表末尾(tail之前)，删除时取最前面的(head指向)的节点删除："],"alg/817_Linked_List_Components.html":["(int","0;","817.","=","compon","g)","hashset();","head,","int","int[]","link","list","new","numcomponents(listnod","public","set","{","判断链表中元素是否在set(g)中得到连通分量的个数（下一个节点为null或者不在set中）。"],"alg/707_Design_Linked_List.html":["\"\"\"","+=","0","0:","1","1):","1.","707.",":rtype:",":type","=","==","__init__(self):","__init__(self,","add","addathead(self,","addatindex(self,","addattail(self,","append","befor","class","curr","curr.next","curr.next.next","curr.val","data","def","delet","deleteatindex(self,","design","element","else:","end","equal","first","get(self,","greater","here.","index","index):","index,","index:","initi","inserted.","insertion,","int","invalid,","last","length","length,","link","list","list,","list.","mylinkedlist(object):","new","node","node(object):","node(val)","node.next","none","none:","range(index","range(index):","return","self.addatindex(0,","self.addatindex(self.size,","self.head","self.next","self.siz","self.size:","self.val","structur","th","val","val)","val):","val:","valid.","valu","void","基本操作，注意函数的复用，addathead和addattail可以用addatindex来写"],"alg/19_Remove_Nth_Node_From_End_of_List.html":["!=","\"\"\"","(head","(int","(l1","(n","+","//","0)","0;","1):","19.",":rtype:",":type","=","==",">","comput","def","dummi","dummy,","dummy.next","dummy;","else:","end","fast","fast,","fast.next","fast.next:","fast:","forward","head","head,","head:","head;","int","l1","l1.next;","length","length)","length++;","list","listnod","listnode(0)","listnode(0);","n","n)","n):","n:","n;","naive方法，要算两次，正数=总数(length)+1","new","node","none","nth","null","null)","null;","n修改指针指向。","public","range(n","range(n):","re","remov","removenthfromend(listnod","removenthfromend(self,","return","slow","slow.next","slow.next.next","step","{","||","}","倒数(n)，所以走到倒数前面一个节点也就是length","如果要找的倒数数字大于链表的总长度，返回空","注意head为空或者list为0返回nul","第二种：","边界如图，可以写成两种情况","高票答案改写：快慢指针"],"2_tree.html":["!=","&&","(root.left","(t1","100,","101,","102,","104(二叉树最大深度和最远距离),","105,","106","108(sorted数组),","110(判断平衡二叉树),","111","112,","113,","114","129,","144，94，145,","222,","226,","235,","236","257","450","450(delete)出现过，另外在merge链表里也出现过。","617,","654(root最大),","669","700,","701,","872","897(inorder变形),","98",":","==","?","delete:","depth:","insert,","invert","lca:","merge:","nodes:","null","null)","null已经排除了另外一种状况。","order","path(dfs):","return","root.left;","root.right","same","search,","symmetr","t1;","t2","traversal可以用来统计各级目录下的目录和文件。","tree","trim:","validate:","{","||","}","二叉搜索树:","二叉树的性质:","代码片段","另外在237(lca)中不用加判断条件是因为它前面的条件root.left","操作：迭代（用栈或者队列），递归。迭代比较快，递归代码少。有些写法是二分法的变形。","构建二叉树:","树","树有什么用：把目录代到以上所有的算法中看有什么用。如level","用来保留其中某个非空子树的结构，在617(merge),","递归三连：前中后序遍历，level遍历","难点：写递归，有返回值的递归，没有返回值的递归，作为helper函数的递归等等。用迭代的话要注意数据结构，用栈还是队列。"],"alg/144_Binary_Tree_Preorder_Traversal.html":["!=","(!s.isempty())","(node.left","(node.right","(root","(root.left","(root.right","//","144.","=","==","arraylist<>();","binari","dfs(root,","dfs(root.left,","dfs(root.right,","dfs(treenod","linkedlist","linkedlist<>();","list","naive级别递归三连其一：前序遍历。","new","node","null)","preorder","preordertraversal(treenod","public","re","res)","res);","res.add(node.val);","res.add(root.left.val);","res.add(root.right.val);","res.add(root.val);","res;","return","return;","root)","root,","s","s.pop();","s.push(node.left);","s.push(node.right);","s.push(root);","travers","tree","treenod","void","{","}","右边的坑：dfs(root.right,","左边的坑：dfs(root.left,","栈：先push右边再push左边，保持左边元素永远在栈顶（第一个出栈），或者还有一种操作是当右边的入栈时先pop左边的点","递归的理解：先写出三个点的前序遍历，然后发现后面两个左右子树的if可以用dfs复用。"],"alg/94_Binary_Tree_Inorder_Traversal.html":["!=","(!stack.isempty()","(node","(root","(root.left","(root.right","//","94.","=","==","arraydeque<>();","arraylist<>();","binari","dequ","dfs(root,","dfs(root.left,","dfs(root.right,","dfs(treenod","inord","inordertraversal(treenod","list","naive级别递归三连其二：中序遍历。","new","node","node.left;","node.right;","null)","public","re","res)","res);","res.add(node.val);","res.add(root.left.val);","res.add(root.right.val);","res.add(root.val);","res;","return","return;","root)","root,","root;","stack","stack.pop();","stack.push(node);","travers","tree","treenod","void","{","||","}","右边的坑：dfs(root.right,","左边的坑：dfs(root.left,","注意不要用stack。中序遍历的栈实现中有一个指针，有时候栈空的时候指针还指着下一个点，如[1,null,2,3]，所以判断条件为是栈不为空或者指针不为空。","递归的理解：同样先写出三个点的中序遍历，然后发现迷之缩进里的两个左右子树的if可以用dfs复用。"],"alg/145_Binary_Tree_Postorder_Traversal.html":["!=","(!stack.isempty()","(!stack.isempty())","(node","(root","(root.left","(root.right","//","145.","=","==","arraydeque<>();","arraylist<>();","binari","dequ","dfs(root,","dfs(root.left,","dfs(root.right,","dfs(treenod","linkedlist","linkedlist<>();","list","naive级别递归三连其三：后序遍历。","new","node","node.left;","node.right;","null)","postord","postordertraversal(treenod","public","re","res)","res);","res.add(root.left.val);","res.add(root.right.val);","res.add(root.val);","res.push(node.val);","res;","return","return;","root)","root,","root;","stack","stack.pop();","stack.push(node);","stack.push(root);","travers","tree","treenod","void","{","||","}","右边的坑：dfs(root.right,","后序遍历的栈：和中序遍历不同的是，虽然后序遍历也有个指针，但是它和前序遍历一样是root节点在栈底，所以root一旦进栈，中间过程就不可能是空。","左边的坑：dfs(root.left,","当然也可以和中序遍历一样加在判断条件上","递归的理解：写出三个点的后序遍历，然后发现迷之缩进里的两个左右子树的if可以用dfs复用。"],"alg/102_Binary_Tree_Level_Order_Traversal.html":["(!q.isempty())","(int","(root","0;","102.","=","==","binari","int","level","levelnum","levelorder(treenod","linkedlist<>();","list","list>","new","null)","order","public","q","q.offer(root);","q.size();","queue","re","res;","return","root)","subr","travers","tree","{","栈。注意list的用法，比如有时候用deque，有时候用linkedlist。queue的时候一般用offer方法，因为容量满的时候不会抛出异常而是返回false。","记得去看dfs递归解法。"],"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":["\"\"\"","(!q.isempty())","(int","(root","0;","103.",":rtype:",":type","=","==","[]","[root]","_","binari","boolean","def","else:","fals","flag","flag:","int","level","levelnum","linkedlist<>();","list","list>","list[list[int]]","new","node","node.left:","node.right:","null)","order","public","q","q.offer(root);","q.size();","queue","queue.append(node.left)","queue.append(node.right)","queue.pop(0)","queue:","range(len(queue)):","re","res.append(val)","res;","return","root)","root):","root:","subr","travers","tree","treenod","true","true;","val","val.append(node.val)","val.reverse()","zigzag","zigzaglevelorder(self,","zigzaglevelorder(treenod","{","原来的impl，这里最好用deque+popleft","改进版flag，在添加元素的时候加在前面，而不是用reverse整个数组。"],"alg/637_Average_of_Levels_in_Binary_Tree.html":["(!queue.isempty())","(int","0;","637.","637题求均值，注意list这个interface是没有offer方法的，只有queue和deque有。","=","==","arraydeque<>();","arraylist<>();","averag","averageoflevels(treenod","binari","dequ","doubl","if(root","int","level","list","new","null)","public","queue","queue.offer(root);","queue.size();","re","res;","return","root)","size","sum","tree","{"],"alg/114_Flatten_Binary_Tree_to_Linked_List.html":["!=","(cur.right","(root","114.","=","==",">","binari","cur","cur.right","cur.right;","flatten","flatten(left);","flatten(right);","flatten(treenod","left","left;","link","list","null)","null;","public","return;","right","right;","root)","root.left","root.left;","root.right","root.right;","root;","tree","treenod","void","{","}","二叉树","前序遍历","链表"],"alg/897_Increasing_Order_Search_Tree.html":["(root","897.","=","==",">","dfs(root,","dfs(root.left,","dfs(root.right,","dfs(treenod","increas","increasingbst(treenod","null)","null);","null;","order","public","re","res;","return","root","root)","root);","root,","root.left","root.right","root.right，然后再看看递归函数，是不是写的很有道理","search","tail)","tail);","tail;","tree","treenod","{","}","中序遍历升级版，向右压扁一个bst，写不出的。思路是左边的中序遍历加上root，加上右边的中序遍历。","就像这样：re"],"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":["(l","+","0,","1);","1,","108.","1;","=",">",">=",">>>","array","binari","convert","dfs(int[]","dfs(nums,","int","l,","mid","mid);","new","null;","nums)","nums,","nums.length","nums.length);","public","r)","r);","return","root","root.left","root.right","root;","search","sort","sortedarraytobst(int[]","tree","treenod","treenode(nums[mid]);","{","}","由一个已经排序的数组构造二叉树，很容易就可以想到递归二分搜索，只是多了一个treenode的返回值。思路是每次取中间，再构造左右两边。","第二种边界姿势，同二分法。但是这两种方法构造出的二叉树可能是不一样的，sorted数组只是代表了中序遍历，不能确定唯一的树。"],"alg/654_Maximum_Binary_Tree.html":["(int","(l","+","0,","1);","1,","654.","=",">","binari","constructmaximumbinarytree(int[]","dfs(int[]","dfs(nums,","i;","int","l,","l;","max","max(int[]","max(nums,","max;","maximum","new","null;","nums)","nums,","nums.length","nums[max])","public","r)","r);","r;","return","root","root.left","root.right","root;","tree","treenod","treenode(nums[max]);","{","}","构造root值最大的二叉树，先找最大值，再构造左右两边的子树。和前面的二分法一样，只是把求mid换成了找最大值的函数。"],"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":["(...)","(int","(pl","//","0,","0;","1","1);","105.","=",">","binari","buildtree(int[]","construct","dfs()","dfs(preorder(range),","helper(int[]","helper(preorder,","il","il,","il;","inord","inorder(range))","inorder)","inorder,","inorder.length","inrootpo","int","int[]","ir","ir)","new","null;","pl,","preorder","preorder,","preorder.length","public","return","root","root.left","root.right","travers","tree","treenod","treenode(preorder[pl]);","treenode(val)","{","||","}","前序和后序不能确定唯一的二叉树因为：前序根左右，中序左根右，后序左右根。前序和后序代表的都是节点的上下关系，只有中序遍历代表了节点的左右关系。只有同时知道了左右和上下的关系才能确定唯一的二叉树。","时创建单个节点","这题是前序和中序确定一个二叉树，递归主体框架还是","需要找出这几个值。"],"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":["(il","(inorder[i]","(pl",")","+","0,","1);","1,","106.","=","==","binari","break;","buildtree(inorder,","buildtree(int[]","construct","i;","il,","inord","inorder,","inorder.length","inrootpo","inrootpos)","int","int[]","ir,","ir;","pl","pl)","postord","postorder)","postorder,","postorder.length","privat","public","return","root.left","root.right","root.val)","root;","travers","tree","treenod","{","}"],"alg/100_Same_Tree.html":["&&","(left","100.","==","boolean","false;","issametree(left.left,","issametree(left.right,","issametree(treenod","left,","left.val","null","null)","public","return","right","right)","right.left)","right.right);","right.val","same","tree","treenod","true;","{","||","}","基础递归"],"alg/572_Subtree_of_Another_Tree.html":["&&","(dfs(s,","(s","(s.val","(t","572.","==","[8,8,7,9,2,null,null,null,null,4,7]","[8,9,2]","anoth","boolean","dfs(s.left,","dfs(s.right,","dfs(treenod","false;","hassubtree(s.left,","hassubtree(s.right,","hassubtree(treenod","issubtree(s.left,","issubtree(s.right,","issubtree(treenod","null","null)","public","return","s,","s,treenod","subtre","t","t)","t))","t);","t.left)","t.right);","t.val)","tree","treenod","true;","{","||","}","区别点在sametree函数","如","完全相同的子树结构：","部分相同的子树结构,"],"alg/101_Symmetric_Tree.html":["&&","(left","(left.val","(root","101.","==","boolean","dfs(left.left,","dfs(left.right,","dfs(root.left,","dfs(treenod","false;","issymmetric(treenod","left,","null","null)","public","return","right","right)","right.left);","right.right)","right.val)","root)","root.right);","symmetr","tree","treenod","tree很像，把root弄成了两个点，并且左右子树相反。","true;","{","||","}","和same"],"alg/226_Invert_Binary_Tree.html":["!=","\"\"\"","(!q.isempty())","(node.left","(node.right","(root","226.",":rtype:",":type","=","==","bfs:","binari","def","invert","inverttree(root.right);","inverttree(self,","inverttree(tmp);","inverttree(treenod","linkedlist<>();","mirror(root.left);","mirror(root.right);","mirror(treenod","naive递归","new","node","node.left","node.left;","node.right","node.right;","null)","null;","public","q","q.offer(node.left);","q.offer(node.right);","q.offer(root);","q.poll();","queue","return","return;","root","root)","root):","root.left","root.left,","root.left;","root.right","root.right,","root.right;","root:","root;","self.inverttree(root.left)","self.inverttree(root.right)","tmp","tmp;","tree","treenod","void","{","}","没有返回值，先交换后递归"],"alg/617_Merge_Two_Binary_Trees.html":["(t1","+=","617.",":","=","==","?","binari","merg","mergetrees(t1.left,","mergetrees(t1.right,","mergetrees(treenod","null","null)","public","return","t1,","t1.left","t1.right","t1.val","t1;","t2","t2)","t2.left);","t2.right);","t2.val;","tree","treenod","two","{","||","}","简单递归，可以先考虑三个点的情况写出来。"],"alg/872_Leaf-Similar_Trees.html":["&&","(root","(root.left","872.","=","==","arraylist<>(),","arraylist<>();","boolean","findleaf(root.left,","findleaf(root.right,","findleaf(root1,","findleaf(root2,","findleaf(treenod","leaf","leafsimilar(treenod","list","naive比较法，效率比较低，还有一种同时比较的方法，记得去看。","new","null","null)","public","res)","res);","res.add(root.val);","res1","res1);","res1.equals(res2);","res2","res2);","return","return;","root,","root.right","root1,","root2)","similar","tree","treenod","void","{","}"],"alg/104_Maximum_Depth_of_Binary_Tree.html":["+","+1","/","0;","1","104.","15","1]","20","3","7","9","=","==","[0,","[1,2,3,4,5,6,7,8,null,null,null,null,9]","[1,2,null,3,4,5,null,null,6]","[3,3]","[3,9,20,null,null,15,7]","[4,4]","[4,6]","[max_depth,","\\","binari","def","depth","dfs(self,","if(root","int","l_depth,","l_di","math.max(maxdepth(root.left),","max(l_depth","max(l_depth,","max(l_dis,","max_depth","max_di","max_dis]","maxdepth(root.right));","maxdepth(treenod","maxdis(self,","maximum","null","null)","public","r_depth)","r_depth,","r_di","r_dis))","r_dis))，是说最远距离=max(左边最大深度+右边最大深度,max(左边最大距离,右边最大距离))","result:","return","root)","root):","root:","self.dfs(root)","self.dfs(root.left)","self.dfs(root.right)","tree","{","}","求二叉树节点最远距离:","测试：","递归时，每层路径加一","重点是这个公式max_di"],"alg/111_Minimum_Depth_of_Binary_Tree.html":["(left","(root.left","(root.right","+","0","0)","0;","1","111.","1;",":","=","==","?","binari","depth","if(root","int","left","math.min(left,","mindepth(root.left);","mindepth(root.right);","mindepth(treenod","minimum","null","null)","public","return","right","right)","right;","root)","root.right","tree","{","||","}","保证树左右子树任意一边为null的时候，返回有高度的一边","和求maxdepth基本一样","相当于"],"alg/110_Balanced_Binary_Tree.html":["(getdepth(root)","(math.abs(l","(root","+","0;","1","1)","110.","1;","1，也就是它不是平衡二叉树，那么root也返回","1，整个树都不是平衡二叉树。","=","==",">","balanc","binari","boolean","false;","getdepth(root.left);","getdepth(root.right);","getdepth(treenod","int","isbalanced(treenod","ll","lr","lr)","math.abs(l","math.max(ll,","null)","public","return","root)","tree","true;","{","||","}","第一种递归：在isbalanced中，对于一个root节点，用getdepth递归求出它左右两边的高度，再在isbalanced函数中进行递归。","第二种：把所有逻辑写在getdepth中，也就是在求高度的同时进行判断层数是否大于1，只需要对节点进行一次遍历。","这里这个条件是用来判断如果返回的root中左右两个节点的高度若有一个为"],"alg/222_Count_Complete_Tree_Nodes.html":["(countnodes(root.left)","(countnodes(root.right)","(int)","(leftdepth","(n>=0)","(root","+","0;","1","1)=2个节点","1)个节点。如第二层有2^(2","1.第i层有2^(i","1=7个节点","1个节点。如三层的树最多有2^3","2.深度为k的二叉树最多有2^k","222.","3.对任何一棵二叉树t,","4.具有","=","==","complet","count","countnodes(root.left)","countnodes(root.right);","countnodes(treenod","getdepth(root.left);","getdepth(root.right);","getdepth(treenod","int","leftdepth","leftdepth));","math.pow(2,","n","node","null)","public","return","rightdepth","rightdepth)","rightdepth));","root)","tree","{","}","个结点的完全二叉树的深度为⌊log(n)⌋+1。如4个节点的树有⌊log(4)⌋+1=3层。","则n0＝n2＋1。","可以用遍历法求，但是不能判断是不是complete，且为o(n)的时间复杂度","如果其叶结点数为n0,","度为2的结点数为n2,","是一个很迷的递归，","补一下二叉树的性质："],"alg/257_Binary_Tree_Paths.html":["\"","\"\",","&&","(root","(root.left","+","+=","257.","=","==",">\";",">\"，对于最后一个节点，不需要加箭头，并且将每条路径的字符串加入结果。对于空节点，直接返回（不执行)。","arraylist<>();","binari","binarytreepaths(treenod","dfs(root,","dfs(root.left,","dfs(root.right,","dfs(treenod","list","listres)","new","null","null)","path","path,","public","re","res);","res.add(path","res;","return","return;","root)","root,","root.right","root.val","root.val);","string","tree","void","{","}","求二叉树的所有路径，dfs返回值为空。dfs返回值为空的情况基本都是修改引用（比如说结果数组），因此需要声明一个结果数组之后另外写一个dfs。然后分情况讨论，对于中间节点path"],"alg/129_Sum_Root_to_Leaf_Numbers.html":["&&","(root","(root.left","*","+","0);","0;","10","129.","=","==","dfs(root,","dfs(root.left,","dfs(root.right,","dfs(treenod","int","leaf","null","null)","number","public","re","res)","res);","return","root","root)","root,","root.right","root.val;","root.val且继续调用dfs函数","root.val，中间节点计算r","sum","sumnumbers(treenod","{","}","其实就是求路径的变形。首先确定递归的函数dfs，返回值为int。然后分情况讨论，节点为空返回0，最后一个节点返回r"],"alg/112_Path_Sum.html":["&&","(root","(root.left","112.","==","boolean","false;","haspathsum(root.left,","haspathsum(root.right,","haspathsum(treenod","int","null","null)","path","public","return","root,","root.right","root.val)","root.val);","root.val;","root.val中间节点减去sum后调用dfs。","sum","sum)","{","||","}","路径问题，dfs返回值为boolean。分情况讨论，空节点时说明左右子树有一个为空。比如[1,2,null]这种情况，右边返回false，因为算的是到叶子节点的和。最后一个节点判断sum"],"alg/113_Path_Sum_II.html":["!=","\"\"\"","&&","(root","(root.left","(root.val","+","0)","1);","113.",":rtype:",":type","=","==","[]","[],","[root.val],","arraylist<>();","arraylist<>(path));","arraylist<>(path),","def","dfs(root,","dfs(root.left,","dfs(root.right,","dfs(self,","dfs(treenod","ii","int","list","list>","list[list[int]]","listpath,","new","null","null)","path","path,","path.add(root.val);","path.append(root.val)","path.remove(path.size()","pathsum(self,","pathsum(treenod","paths那道题差不多，第一步可以先写出一个返回所有路径的列表的递归函数，返回值为空。也是分三种情况讨论，空节点，最后一个节点和中间节点。注意python求中间结果的时候的不要指向同一个list。在空节点的情况中其实if","public","re","res)","res):","res,","res.add(new","res.add(path);","res.append(path)","res;","return","return;","return可以等价为","return这个条件。","root,","root.left","root.left:","root.right","root.right:","root.val","root.val)","root.val);","root:","self.dfs(root,","self.dfs(root.left,","self.dfs(root.right,","sth..","sum","sum)","sum):","sum);","sum:","tree","treenod","void","{","}","不过照这么写真的很慢。因为每次递归都会生成两个新的list。","和binari","然后就有了这种操作。path相当于一个栈，酱紫就减少了创建list的次数。","然后根据题意在递归的时候加入sum条件判断，以及if"],"alg/700_Search_in_a_Binary_Search_Tree.html":["!=","(cur","(cur.val","(root","(root.val","700.","=","==",">","binari","cur","cur.left;}","cur;}","int","null)","null;","public","return","root,","root;","search","searchbst(root.left,","searchbst(root.right,","searchbst(treenod","tree","treenod","val)","val);","{","}","二叉搜索树。基础递归，有点像简单版的递归二分法。分成两种情况，node为空，或不为空。","循环写法会比较快。","注意不要这么写，因为计算if的时候会抛nullpointerexcept"],"alg/701_Insert_into_a_Binary_Search_Tree.html":["!=","(cur","(cur.left","(cur.right","(cur.val","(root","(root.left","(root.right","(root.val","701.","=","==",">","binari","break;","cur","cur.left","cur.left;","cur.right","cur.right;","insert","insertintobst(root.left,","insertintobst(root.right,","insertintobst(treenod","int","iteration，相当于插入链表，快但代码多且乱。","new","node","node;","null)","public","return","root,","root.left","root.right","root;","search","tree","treenod","treenode(val),","treenode(val);","treenode(val);替换成两句判断。","val)","val);","{","}","基础递归，root左边右边要接住递归的返回值。","等价的写法：把if"],"alg/450_Delete_Node_in_a_BST.html":["(root","(root.val","450.","=","==",">","bst","delet","deletenode(root.left,","deletenode(treenod","int","key)","key);","node","null)","null;","public","return","root,","root.left","treenod","{","}","删除二叉树节点，注意相等的时候删除中间节点的三步操作：找到最小值node，和root交换，删除那个node。"],"alg/98_Validate_Binary_Search_Tree.html":["!=","\"\"\"","&&","((left","(root","98.",":rtype:",":type","=","==","binari","bool","boolean","def","dfs(root,","dfs(root.left,","dfs(root.right,","dfs(self,","dfs(treenod","fals","false;","isvalidbst(self,","isvalidbst(treenod","left,","null","null)","null);","null,","public","return","right)","right):","right);","right.val))","right:","root)","root):","root,","root.val","root.val)","root.val,","root:","search","self.dfs(root,","self.dfs(root.left,","self.dfs(root.right,","sys.maxsize)","sys.maxsize,","tree","treenod","true","true;","valid","{","}","每段都需要满足区间条件，否则return","还有一种可以输入最大(最小)整数，但是这样可能会溢出，不如直接判断中间值是否为null","验证是否为bst"],"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":["!=","&&","(p.val","(root","235.","=",">","ancestor","binari","common","iteration:","lowest","lowestcommonancestor(root.right,","lowestcommonancestor(treenod","null)","null;","p,","public","q)","q);","q.val","q的值比root都小就去左边找，反之。如果pq有一方的值等于root，或者pq分散在root的两边，直接一路返回root的值。","recursion:","return","root","root,","root.right;","root.val","root.val)","root;","search","tree","treenod","{","}","如果p,"],"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":["!=","&&","(root","(root.left","236.",":","=","==","?","ancestor","binari","common","lowest","lowestcommonancestor(root.left,","lowestcommonancestor(root.right,","lowestcommonancestor(treenod","null","null)","p","p,","public","q)","q);","return","root","root,","root.left","root.left;","root.right","root;","tree","treenod","{","||","}","分情况讨论，第一句是对于空节点的条件（递归出口条件）。后面是中间节点的情况，root的左边和右边接住返回值之后，判断是否为空，若两边都不为空，那么返回root。如果任意一边有值，就返回有值的一边。"],"alg/230_Kth_Smallest_Element_in_a_BST.html":["(count","(root","0;","230.","=","==","bst","count","count++;","dfs(root,","dfs(root.left,","dfs(treenod","element","int","k)","k);","kth","kthsmallest(treenod","null)","public","result","result;","return","return;","root,","root.val;","smallest","void","{","}","中序遍历设置计数器"],"alg/199_Binary_Tree_Right_Side_View.html":["(res.size()","(root","+","0);","1","1);","199.","=","==","arraylist<>();","binari","depth","depth)","dfs(root,","dfs(root.left,","dfs(root.right,","dfs(treenod","int","list","new","null)","public","re","res,","res.add(root.val);","res;","return","return;","right","rightsideview(treenod","root)","root,","side","tree","view","void","{","}","以这个数举例，当层数等于result个数的时候，当前的值会被加入结果数组。递归时会先加入[1,3,4]，然后递归到5的时候，发现当前的depth和result的大小不相等，所以不加入。"],"3_partition.html":["11,","15(3sum),","18(4sum)","215(k大)","26,27,80","28","344(reverse),","415","42","75(荷兰国旗),","905(奇偶交换),","partit","基础快排:","多个指针操作数组或字符串，使得某些操作达到线性的时间复杂度。","字符串/数组交换:","字符串比较:","找到指针移动的条件，贪心比什么，边界问题。","操作:","数字相加：2,","移除数组中的元素:","贪心:","通常时左右指针从两边走(或单边)，有时候会有第三个指针。","难点:"],"alg/Quick_Sort.html":["&&","(i","(int","(l","(lt","(nums[l]","(r","(true)",");","+","/","//","1","1)","1);","1,","1.填坑法","1.选择合适的pivot","10,","10}没什么改进。","2","2.交换法","2.考虑数组大小","2;","3.pindex法(在某些地方也叫普通快排):","3.处理重复元素",";","=",">",">=","break;","end","gt","gt)","gt);","gt)，不再对这些元素进行递归操作。","i++;","i,","int","l","l)","l);","l,","l;","lt","lt++;","lt,","mid","mid,","middleofthree(int[]","new","nums,","nums[gt]","nums[l]","nums[l])","nums[l];","nums[r]","nums[r])","nums[r];","partition(nums,","partition1(int[]","partition2(int[]","partition2_1(int[]","partition3(int[]","partition函数的逻辑是选定一个pivot作为基准，比它小的元素放在左边，大的放在右边。partition可以有多种方法","pindex","pindex法:","pivot","pivot)","privat","public","quick","quicksort(int[]","quicksort(nums,","r","r)","r);","r;","rand(int[]","rand(nums,","random","random();","random.nextint(r","randomindex","randomindex);","return","return;","sort","sort(int[]","sort2(int[]","sort2(nums,","sort3(int[]","sort3(nums,","start","swap","swap(int[]","swap(nums,","swap函数：","tmp","tmp;","void","{","}","三数取中:","三路快排:","下面这个代码某些地方也叫双路快排..","从末尾开始寻找一个小于pivot的元素赋值到l指针","优化","使用数组中左边，中间，右边的三个数字进行排序，选择其中的中位数（将中位数放在数组的最开始）","另一种交换法","只需要再次递归lt左边和gt右边的部分","后面的数字交换过来之后还要再比一次","填坑法过程如下：","将所有元素分为3个区域，将重复元素聚集到中间部分(lt,","小数组选用插入排序","循环中的数字依次和pivot比较，如果小于pivot，就和pindex中的数字进行交换，保证pindex前面的数字都是小于等于pivot的。最后将pindex中的数字和pivot交换。","快排主要逻辑：将数组用partition函数分为左右两部分，分别进行排序。","快排复杂度o(nlogn)，最坏复杂度o(n^2)出现在递归次数接近数组长度/partition极度不均匀的时候（本来的o(logn)变成了o(n)），如数组有序的情况下。","由于上面那段代码在元素相等时会有不必要的交换，所以while循环中也可以加上相等就不交换的条件。","记得加上=，否则每次相等的时候都要再进行一次没必要的递归。","这两种方法对数组重复，如{10,","随机化:","随机化选择一个index和最左边数字交换","🌝quick"],"alg/75_Sort_Colors.html":["(i","(int","0,","0;","1;","75.","=","color","gt","int","j","lt","lt;","n","nums)","nums.length","public","sort","sortcolors(int[]","void","{","不交换，但是会赋值很多次的解法，[0,i)区间为0，[i,j)区间为1，[j,n)区间为2。","荷兰国旗问题，同快排三路解法，不过lt是从0开始，因为pivot不是第一个元素。时间复杂度o(n)"],"alg/28_Implement_strStr.html":["\"\"\"","\"\"]这个例子。","#","(int","(k","+","0","0,","0;","1。另一个是while","1，也就是两个字串需要比较的长度，如果该值小于0，直接返回","28.",":rtype:",":type","=","a,","algorithm","b:","b=","def","h","haystack,","haystack.length(),","haystack:","https://www.geeksforgeeks.org/kmp","i,","implement","int","j","kmp","len(haystack),","len(needle)","lp","n","needle)","needle):","needle.length();","needle:","pattern","public","return","searching/","self.create_lps(needle)","str","string","strstr","strstr(self,","strstr(string","{","时间复杂度o(n^2)","有两个条件需要注意，一个是h","条件不能颠倒。k指针指向的位置必须小于needle字符串的长度，才能和haystack中的j指针比较，防止循环内部的指针改变使得while条件语句溢出，如[\"a\","],"alg/11_Container_With_Most_Water.html":["(i","(j","*","0,","0;","11.","1;","=","contain","height)","height.length","height[j])当前计算的面积，全局变量result存放最大面积。i前进的条件是height[i]","i)","int","j","maxarea(int[]","min(height[i],","public","result","water","{","时间复杂度o(n)","需要变量：i,j指针代表宽度，局部变量area","，因为要向右边试探有没有更大的高度，然后消除当前的高度最小值，保留高度最大值。"],"alg/42_Trapping_Rain_Water.html":["(i","0,","0;","1;","42.","=","height)","height.length","height[i]，右边相反。","height[j]。在大循环i","int","j","lm","public","rain","result","rm","rm分别用来指代左边的最大高度和右边的最大高度，相当于11题的height[i],","trap","trap(int[]","water","{","中，当lm","时，i向左边移动去试探有没有更大的高度，同时水以左边墙壁的最大值为基准增加lm","比11题更加复杂，多了两个变量lm,"],"alg/15_3Sum.html":["!!!","&&","(i","(int","(l","+","//","0","0;","1,","15.","1;","1])","3sum","=","==",">","arraylist<>();","arrays.sort(nums);","binari","cloest","closest，改改条件","continue;","int","j,","k重复的判断，i,","l","list","list>","l不能和它前面的数字相等，l不和它后面的数字相等。题目要求不能有重复的结果。","new","nums)","nums,","nums.length","nums[0]","nums[1]","nums[2];","nums[i","nums[i]","nums[i];","pointers，注意排序，处理重复，数组越界问题。","public","r","re","r移动的区域。","search","sort","start","target","target)","threesum(int[]","threesumclosest(int[]","{","}","使用two","时间复杂度o(n^2)(for里面套while)，空间复杂度o(1)","注意要对数组进行排序，因为要比较大小决定指针移动方向，没有排序会跳过某些数字。","紫色是i经过的区域，绿色是l,","这三句是防止i,"],"alg/18_4Sum.html":["&&","(int","(l","+","//","0","0;","1","1,","11,","12,","13,","15,","17","18.","1;","1])","3sum.","3sum偷懒法..","4sum","=","==","arraylist<>();","arrays.sort(nums);","binari","continue;","differ","foursum(int[]","int","j","l","line","list","list>","new","nums,","nums.length","nums[i","nums[i]","nums[j","nums[j]","nums[j];","public","r","re","search","sort","start","tar","target","target)","{","外部增加循环，判断重复，内部修改起始值。","时间复杂度o(n^3)(for里面套for再while)，空间复杂度o(1)"],"alg/344_Reverse_String.html":["(l","+","0,","1);","1,","1;","344.","=",">=","char","dfs(char[]","dfs(s,","int","l","l,","public","r","r)","recursion:","return;","revers","reversestring(char[]","s)","s,","s.length","s[l]","s[l];","s[r]","s[r];","string","tmp","tmp;","void","{","}","左右交换"],"alg/27_Remove_Element.html":["(int","0;","27.","=","element","int","k","k停在坑里，i向前试探不等于val的值。","nums,","public","remov","removeelement(int[]","val)","{"],"alg/26_Remove_Duplicates_from_Sorted_Array.html":["(int","+","0;","1","26.","=","array","array，指针k指向当前位置的唯一值，遍历数组，指针i一旦发现有和nums[k]不相等的数字，k指向下一个位置，将nums[i]赋值给位置k，最后返回元素个数index","duplic","int","k","nums)","public","remov","removeduplicates(int[]","sort","{","前提是一个sort"],"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":["(nums.length","2中的数字不相等，那么ik会同时前进，一旦i和k","2中的数字相等，说明i前面已经有两个相等的数字，k就停在第三个数字上等待i找到新的不同的数字。","80.","array","duplic","ii","int","nums)","public","remov","removeduplicates(int[]","sort","{","数组最多允许重复两个数字，如果数组长度小于等于2，直接返回数组长度。","然后依然是指针法，从2开始遍历。i作为一个试探指针，如果i和k"],"alg/905_Sort_Array_By_Parity.html":["&","&&","(int","(l","(n","//","0","0,","0;","1)","1;","1]))","1];","905.",";","=","==","a)","a.length","array","array[j","array[j]","boolean","int","int[]","iseven(array[j","iseven(int","j","key;","l","n)","pariti","public","r","return","sort","sortarraybyparity(int[]","{","}","使一个数组偶数在前，奇数在后。","保持奇偶的顺序，用插入排序","写成单独的函数：","没有越界且它的前面是偶数","首先使用while找到第一个奇数和第一个偶数出现的位置，然后进行交换。"],"alg/7_Reverse_Integer.html":["!=","%","&&","((cmp","(integer.max_valu","(x","*","+","/","0","0)","0,","0;","10","10)","10))","10;","123","12608718","2147483648为例子，输出结果为","7","7.","8","84","846","8463","84638","846384","8463847","84638474","=","==",">","cmp","cmp;","int","integ","integer.max_valu","integer.min_valu","public","re","res)","res;","return","revers","reverse(int","x","x)","{","||","}","中间和旧值进行比较","以","然后有些答案里是res为long直接判断。","难点在溢出，如果是python的话还要考虑符号，因为python中","预先计算"],"alg/2_Add_Two_Numbers.html":["!=","%","(2","(5","(l1","(l2","+","/","0","0;","1)","10);","10;","2.","3)","342","4","4)","465","6","7","8","807.",":","=","==",">","?","add","addtwonumbers(listnod","carri","carry;","dummi","dummy.next;","dummy;","explanation:","head","head,","head.next","head.next;","input:","int","l1","l1,","l1.next;","l1.val","l2","l2)","l2.next;","l2.val","l2，分别代表结果，l1，l2链表，值操作包括余数和进位问题，一个是%10，一个是/10，边界条件包括三个，进位为1的时候还要加一次carry。","listnod","listnode(0);","listnode(valu","new","null","null)","number","output:","public","return","two","v1","v2","valu","{","||","}","两个链表相加：可以分为指针操作和值操作，指针有dummy,"],"alg/415_Add_Strings.html":["(i","0","0;","1)","1,","1;","415.","=","==",">=","add","addstrings(str","carri","int","j","n1","new","num1,","num1.length()","num2)","num2.length()","numbers的字符串操作，不一样的地方在于循环。","public","sb","string","stringbuild","stringbuilder();","two","{","||"],"alg/189_Rotate_Array.html":["\"\";","%","(l","(num","(str","+","+=","//","0)","0,","1","1);","189.","2","3","=","==",">","[1,2,3,4,5,6,7]","[1,2]","[5,6,7,1,2,3,4]","[6,7,1,2,3,4,5]","[7,1,2,3,4,5,6]","abcxyzdef","arr","arr,","array","char[]","explanation:","input:","int","k","k)","k,","l,","left","leftrotatestring(str","length","length;","n","n)","n,","new","null","nums,","nums.length","nums.length;","output:","public","r)","return","return;","reverse(arr,","reverse(char[]","reverse(int[]","reverse(nums,","right:","rotat","rotate(int[]","s","s);","step","str","str,int","str.length()","str.length();","str.substring(s,","str.tochararray();","str;","string","string(arr);","void","xyzdefabc","{","||","}","向右旋转：","向左旋转","注意求模"],"4_stack.html":["(int","(pusha.length","0","0)","0;","=","==","[]","boolean","class","false;","int","ispoporder(int","linkedlist","linkedlist<>();","new","popa)","popa.length","popindex","public","pusha,int","return","solut","stack","{","||","使用辅助栈stack压入pusha序列，stack栈顶元素和popa[popindex]进行比较。最后检查stack是否为空。","给出栈的压入序列12345，判断弹出序列45231是否正确:","难点：入栈出栈条件的判断。"],"alg/155_Min_Stack.html":["155.","2],[getmin(),pop(),getmin()]的答案是[","2，所以栈中只有0,","3,","3,0,","3]，第二次的结果是","3是因为pop出了栈顶元素","3比较大小。","=","if(s2.isempty()","linkedlist","linkedlist<>();","min","new","public","push(int","s1","s1.push(x);","s2","stack","void","x","x)","{","||","所以这个思路是s1正常的push和pop，s2记录最小值序列，另外设定push和pop条件，小于等于peek最小值push，和s1栈顶元素一样pop。","这个题一开始还是有点迷的，后来想清楚了，因为它是一个栈，所以pop的时候会把栈顶的元素不管大小都pop出去。比如["],"alg/232_Implement_Queue_using_Stacks.html":["&&","(!s1.isempty())","(!this.s1.isempty())","()","(s2.isempty())","(this.s2.isempty())","*/",",peek(),","/**","//","232.","=",">s2时，s2必须为空。",">s2转移元素。","back","boolean","class","data","element","element.","empty()","empty.","front","here.","implement","initi","int","l2","linkedlist","linkedlist<>();","myqueu","myqueue()","new","peek()","peek();","peek()：如果peek转移了，那么s2中情况为3,1,2，第二次调用peek就会得到3，所以调用peek时必须满足s2为空的条件。","pop()","public","push","push(1),","push(2)","push(2),","push(3),","push(int","queue","queue.","remov","return","s1","s1);","s1.isempty()","s1;","s2.isempty();","s2.push(elemnt","s2;","stack","structur","this.s1","this.s1.push(x);","this.s2","this.s2.peek();","this.s2.pop();","this.s2.push(this.s1.pop());","transfer","us","void","whether","x","x)","{","{...}","}","两个栈做法，注意peek和pop方法。考虑两种情况，","根据情况一可以写出while循环，s1","根据情况二给while循环加上限制条件,","要把s1中的元素转移到s2中去。","：一次性在s1中push1,2,3，再pop(),"],"alg/225_Implement_Stack_using_Queues.html":["(int","*/","/**","0;","1次把当前头部的元素转移至尾部。两头操作用arraydequ","225.","=","arraydeque<>();","class","data","element","here.","implement","initi","int","mystack","mystack()","new","onto","public","push","push(int","q;","queue","size","stack","stack.","structur","this.q","this.q.add(x);","this.q.size();","us","void","x","x)","{","}","单个队列可以完成，重点在push函数，每次push后计算queue中的长度，循环n"],"alg/150_Evaluate_Reverse_Polish_Notation.html":["\"","\")","\"))","\"*\":","\"+\":","\"/\":","\":","(b","(string","(token)","(token.equals(\"","(token.equals(\"+\")","(token.equals(\"+\"))","*","+","/","150.",":","=","a);","b","break;","case","evalrpn(string[]","evalu","if(token.equals(\"*\"))","int","linkedlist","linkedlist<>();","new","notat","polish","public","return","revers","stack","stack.pop();","stack.push","stack.push(b","stack.push(integer.valueof(token));","switch","token","token.equals(\"","token.equals(\"*\")","token.equals(\"/\"))","tokens)","{","||","}","强行换成switch","注意包装类的转换。"],"alg/239_Sliding_Window_Maximum.html":["(int","(num","(size","//","0","0)","0;","1","1)","1;","239.","=","==","[]","arraydeque<>();","arraylist","arraylist<>();","fill","int","int[]","k","k)","length","max","max)","max;","maximum","maxinwindows(int","maxslidingwindow(int[]","naive比较方法，o(kn)","new","null","num,","num[k];","nums,","nums.length==","nums[q.peek()];","public","q","re","res;","res[resindex++]","result","return","size","size)","slide","start","window","{","||","}","双向队列"],"alg/32_Longest_Valid_Parentheses.html":["&&","'('","'(')","(int","//","0;","1","1);","1一直在栈中所以需要stack.size()","1来计算都是完整括号的状况，因为","1，否则会溢出。","32.","=","==",">","index","int","linkedlist","linkedlist<>();","longest","longestvalidparentheses(str","math.max(res,","new","parenthes","pop","public","re","res;","return","s)","s.charat(stack.peek())","stack","stack.peek());","stack.pop();","stack.push(","stack.push(i);","valid","{","}","栈中需要留一个","直接在stack中push括号的话不可以分辨留在栈中的括号的index，所以push每个符号的index。"],"alg/227_Basic_Calculator_II.html":["'+';","(int","(s","0)","0;","227.","=","==","basic","calcul","calculate(str","char","ii","int","linkedlist","linkedlist<>();","new","null","num","public","return","s)","s.length()","sign","stack","{","||","字符串的每一位有三种情况，数字，符号和空格。","放入操作数栈stack中","最后将操作数栈中所有的结果相加","计算每个操作数num,","记录每个操作数之前的符号位sign，根据符号位的不同采用不同的操作。需要注意最后一个操作数也需要之前记录的符号位对其进行计算"],"alg/200_Number_of_Islands.html":["!=","'0';","'1')","(grid","(int","*","+","0)","0,","0;","0};","1,","1};","200.","=","==","bf","col","continue;","count","count;","dfs，时间复杂度o(m","dx","dy","grid)","grid.length","grid.length;","grid[0].length","grid[0].length;","grid[newx][newy]","int","int[]","island","j","linkedlist<>();","n)，数据过大栈有限制。","new","newi","newy);","null","number","numislands(char[][]","public","queue","queue.offer(newx","return","row","{","{0,","{1,","||","}"],"alg/79_Word_Search.html":["!=","%","'","'#';","';","(board","(i","(int","(matrix","(t","+","+=","//","/=","0","0)","0){","0,","0;","1","1)","1);","1)||","1,","1.临时变量","10;","18。但是，它不能进入方格（35,38），因为3+5+3+8","19。请问该机器人能够达到多少个格子？","1;","2.异或修改","256;","79.","=","==","=row",">",">=","^=","board,","board.length","board[0].length","board[i][j]","board[i][j];","board为二维数组的情况：","boolean","boolean[]","boolean[][]","boolean[matrix.length];","boolean[rows][cols];","char","char[]","col","cols)","cols,","cols,i","cols,i,","df","dfs(board,","dfs(int","dfs(matrix,","dfs(matrix,rows,","dfs(threshold,","exist(char[][]","false;","flag","flag)","flag);","flag)||","flag[index]","flag[index])","getsum(i)","getsum(int","getsum(j)","haspath(char[]","i,","int","j","j,","k","matrix,","matrix.length","matrix[index]","matrix[index];","matrix为一维数组，直接在matrix数组上进行修改，用临时变量保存或者异或256，做完一次dfs之后将matrix中的字母复原。","movingcount(int","new","null","null)","public","re","res;","return","row","rows,","search","str","str)","str,","str.length","str[k]","str[k])","string","sum","sum;","t","t){","threshold)","threshold,","tmp","tmp;","true;","visit","visited)","visited);","visited[i][j]","word","word)","word.tochararray();","words,","words[k])","{","||","}","例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7","地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。","已经访问过","得到行或者列每位的和","思路：","机器人的运动范围：","标记","设置flag(visited)数组：","设置一个visited数组记录访问过的位置。","超出坐标阈值","递归终止条件：超出边界"],"alg/36_Valid_Sudoku.html":["(int","0;","36.","=","board)","boolean","isvalidsudoku(char[][]","public","sudoku","valid","{","根据条件判断，在不为空的格子中，同一列没有相同的元素，同一行没有相同的元素，同一个subgrid没有一样的元素。特别注意边界的取值范围。"],"alg/37_Sudoku_Solver.html":["(int","0;","37.","=","board)","boolean","public","solve(board);","solve(char[][]","solver","solvesudoku(char[][]","sudoku","void","{","}","注意solve函数的写法"],"5_bitmanipulation.html":["&","//","0x7fffffff;","0x80000000;","128","2147483648","324","32768","45","9223372036854775808","bit","diff","manipul","二进制位数：16","二进制位数：32","二进制位数：64","二进制位数：8","包装类：java.lang.byt","包装类：java.lang.charact","包装类：java.lang.doubl","包装类：java.lang.float","包装类：java.lang.integ","包装类：java.lang.long","包装类：java.lang.short","取最右边的1出现的位置:diff","可直接在java常见包装类中调用min_value和max_value进行查看。但是常识还是需要一些记忆。溢出之后会在min和max值中相互转换。","基本类型：byte","基本类型：char","基本类型：doubl","基本类型：float","基本类型：int","基本类型：long","基本类型：short","操作：移位，一元操作符","数字的位数和范围","最大值：byte.max_value=127","最大值：character.max_value=65535","最大值：double.max_value=1.7976931348623157e308","最大值：float.max_value=3.4028235e38","最大值：integer.max_value=2147483647","最大值：long.max_value=9223372036854775807","最大值：short.max_value=32767","最小值：byte.min_value=","最小值：character.min_value=0","最小值：double.min_value=4.9","最小值：float.min_value=1.4","最小值：integer.min_value=","最小值：long.min_value=","最小值：short.min_value=","难点：二进制运算的意义，数字的范围"],"alg/191_Number_of_1_Bits.html":["!=","&","((i","(i","(n","+","+=","...","//","0)","0;","0x0f0f0f0f;","0x33333333)","0x33333333);","0x3f;","0x55555555);","1","1)","1);","1073741824","11111111","11111111会变成2^31也就是2147483647，通过循环，最终可以到达0","11111111如果选择有符号右移，那么移来移去还是它本来的数字","134217728","16);","16777216","191.","1;","1来说11111111","1的二进制是11111111","1的和，最后算出来的就是1的个数。","1的性质，每次把n右移一位，累加n","1，举例来说:","1，结果永远不是0，就会产生死循环。负数的二进制是补码..","2","2)","268435456","33554432","4))","5","536870912","67108864","8);","=",">>>",">>>=",">>>是无符号右移，左边补0，对于",">>是带着符号的右移，左边由于移位空缺出来的数字会由这个数字的符号位补全（正数补0负数补1），所以负数最终会变成","[c","bin(n)[2:]].count('1')","bit","bitcount(int","c","figur","hammingweight(int","hd,","https://doc.lagout.org/security/hackers%20delight.pdf","i)","int","integer.bitcount(n);","n","n)","number","public","python字符串","re","res;","return","static","{","}","如果n输入的是负数，需要注意下>>>和>>的区别:","移位法，根据最右边一位是1的奇数n","计算一串二进制中1的个数","调库法"],"alg/461_Hamming_Distance.html":["!=","&","(x","(y","+=","0","0)","0;","1)","1);","1;","461.","=",">>>=","^","distanc","ham","hammingdistance(int","int","integer.bitcount(x","public","re","res;","return","x","x,","y","y)","y);","{","||","}","移位法，用1作为mask后异或算出个数。","调库"],"alg/136_Single_Number.html":["(2+1)*2","(int","(num","(set.contains(num))","*","//remov","0;","136.","2","2+2+1)",":","=","==","^=","duplic","hashset<>();","int","new","null","num","num;","number","nums)","nums.length","public","re","res;","return","set","set.add(num);","set.iterator().next();","set.remove(num);","singl","singlenumber(int[]","sum(nums)","sum(set(nums))","{","||","}","两倍的set和减去原数组和,","异或","熟悉下set"],"alg/137_Single_Number_II.html":["137.","ii","number","singl"],"alg/260_Single_Number_III.html":["&","((num","(diff","(int","(set.contains(other))","0)","0;","260.",":","=","==","[1,2,1,3,2,5]","[3,5]","^","^=","diff","diff);","hashset<>();","iii","input:","int","int[2];","int[]","mask","mask)","new","null;","num","num;","number","nums)","num，当res分别为0和其他数的时候，就可以把这两个数字筛选出来。","other};","output:","public","re","res;","res[0]","res[1]","return","set","set.add(num);","singl","singlenumber(int[]","sum","sum的方法异或，慢慢","{","{num,","}","使用two","在一堆出现二的数字中返回两个只出现一次的数字。","所有的数字xor之后的二进制sum结果至少会有一位被置1，然后找到sum中最后一位被置1的位作为mask，然后使用这个mask遍历整个数组，计算r"],"alg/231_Power_of_Two.html":["&","&&","(n","...","0","01111","0;","1))","10000","1的二进制刚好错开。n大于0","231.","=","==",">","boolean","ispoweroftwo(int","n","n)","power","public","return","two","two刚好进位，所以只有最高位是1，和它的n","x)，由于the","{","}","求n是否为pow(2,"],"alg/371_Sum_of_Two_Integers.html":["!=","&","(a","(b","+","0)","000","001","010","011","011&","100^","101","2","3","371.","5","=","^","a,","b","b)","b;","carri","getsum(int","int","integ","public","return","sum","two","{","用位运算实现加法，^求和，&左移求进位，进位为0时返回答案"],"alg/387_First_Unique_Character_in_a_String.html":["\"\";","\"null\"","'a'","'z'","(int","(obj","+","+=","..","//","//char[]","//insert","//return","//s.append(ch);","//stringbuff","0","0;","1","1;","387.","58",":","=","==","?","appear","b","ch)","ch;","char","char[256];","char[]","charact","count","current","first","firstappearingonce()","firstuniqchar(str","hash","hash[ch]++;","index","init","insert(char","int","int[]","int[length];","length","new","null)","obj)","obj.tostring();","on","onc","public","return","s","s)","s=new","static","str=s.tostring().tochararray();","string","stringbuffer();","stringstream","uniqu","valueof(object","void","z","{","}","必须初始化。。否则是null","找出字符串中第一个没有重复的字符。建立一个简单的字母哈希表，进行计数和检查。","求流中第一个只出现一次的字符，用stringbuffer。如果是string必须初始化为\"\"，因为如果一个string指向没有分配内存空间的时候，会打印出\"null\"字符串"],"alg/705_Design_HashSet.html":["!=","%","(!contains(key))","(contains(key))","(this.set[index]","*/","/**","//int[]","705.","=","add(int","assign","boolean","class","computehash(int","computehash(key);","contain","contains(int","data","design","element","false;","hashset","here.","index","initi","int","integer[1000000];","integer[]","key","key)","key;","myhashset","myhashset()","new","null","null)","null;","public","remove(int","return","set","set;","specifi","structur","this.set","this.set.length;","this.set[index]","true","true;","valu","void","{","}"]},"length":121},"tokenStore":{"root":{"0":{"0":{"0":{"docs":{"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}}},"1":{"docs":{"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.06382978723404255}}},"docs":{}},"1":{"0":{"docs":{"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.06382978723404255}}},"1":{"1":{"1":{"docs":{"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125}}},"docs":{}},"docs":{"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}},"&":{"docs":{"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}}}},"docs":{}},"docs":{"others.html":{"ref":"others.html","tf":0.010498687664041995},"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.029850746268656716},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.02531645569620253},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.03125},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.02857142857142857},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.043478260869565216},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.006607929515418502},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.0625},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.047619047619047616}},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"array.html":{"ref":"array.html","tf":0.008426966292134831},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.047619047619047616},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.02531645569620253},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.01639344262295082},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.01744186046511628},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}},":":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.013392857142857142}}},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}},";":{"docs":{"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232}}},"{":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}},".":{"0":{"0":{"1":{"4":{"0":{"9":{"0":{"5":{"3":{"8":{"0":{"2":{"4":{"9":{"0":{"2":{"3":{"4":{"4":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"5":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"7":{"5":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}},"是":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"默":{"docs":{},"认":{"docs":{},"的":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463}}},",":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.027972027972027972},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.023255813953488372},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.05263157894736842},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.058823529411764705},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.03389830508474576},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.02857142857142857},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.023255813953488372},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}}},";":{"docs":{"array.html":{"ref":"array.html","tf":0.028089887640449437},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.03787878787878788},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.039603960396039604},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.018867924528301886},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.05},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.05},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.010309278350515464},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.03260869565217391},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.0425531914893617},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.05263157894736842},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.058823529411764705},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.01904761904761905},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":0.1111111111111111},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.09523809523809523},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.03278688524590164},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.02459016393442623},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608},"4_stack.html":{"ref":"4_stack.html","tf":0.05405405405405406},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.02531645569620253},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.03773584905660377},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.07692307692307693},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.05504587155963303},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.011013215859030838},"alg/36_Valid_Sudoku.html":{"ref":"alg/36_Valid_Sudoku.html","tf":0.08333333333333333},"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.05263157894736842},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.017699115044247787},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.01904761904761905}}},"]":{"docs":{},",":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428}}}},"}":{"docs":{},";":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}},"x":{"0":{"docs":{},"f":{"0":{"docs":{},"f":{"0":{"docs":{},"f":{"0":{"docs":{},"f":{"docs":{},";":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"3":{"3":{"3":{"3":{"3":{"3":{"3":{"docs":{},")":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}},";":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"f":{"docs":{},";":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}},"5":{"5":{"5":{"5":{"5":{"5":{"5":{"5":{"docs":{},")":{"docs":{},";":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"7":{"docs":{},"f":{"docs":{},"f":{"docs":{},"f":{"docs":{},"f":{"docs":{},"f":{"docs":{},"f":{"docs":{},"f":{"docs":{},";":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}}}},"8":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"docs":{},";":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"1":{"0":{"0":{"0":{"0":{"docs":{"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125}},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},"docs":{}},"docs":{},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.010067114093959731},"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":3.356060606060606}}},"^":{"docs":{"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.0425531914893617}}}},"1":{"docs":{"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":3.350282485875706}}}},"2":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":1.689922480620155}}}},"3":{"docs":{},".":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":1.4389880952380951}}}},"4":{"docs":{},"(":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"最":{"docs":{},"大":{"docs":{},"深":{"docs":{},"度":{"docs":{},"和":{"docs":{},"最":{"docs":{},"远":{"docs":{},"距":{"docs":{},"离":{"docs":{},")":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}},".":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":2.0112359550561796}}}},"5":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":1.4401993355481726}}}},"6":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}},".":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":1.4419047619047618}}}},"7":{"3":{"7":{"4":{"1":{"8":{"2":{"4":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"8":{"docs":{},"(":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"数":{"docs":{},"组":{"docs":{},")":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}}}},".":{"docs":{"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":1.4372670807453414}}}},"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.039603960396039604},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.06451612903225806},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.05737704918032787}},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.010067114093959731},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.01805869074492099}}},".":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"0":{"1":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"5":{"2":{"8":{"9":{"5":{"6":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"3":{"2":{"5":{"7":{"8":{"5":{"1":{"1":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.011235955056179775}}},"8":{"4":{"0":{"4":{"3":{"4":{"6":{"7":{"3":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"}":{"docs":{},"没":{"docs":{},"什":{"docs":{},"么":{"docs":{},"改":{"docs":{},"进":{"docs":{},"。":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}},")":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}},")":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}},";":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}}},";":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.03278688524590164},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}}}},"1":{"0":{"docs":{},"(":{"docs":{},"判":{"docs":{},"断":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},")":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}}},".":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":2.5103092783505154}}}},"1":{"1":{"1":{"1":{"1":{"1":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.032}},"会":{"docs":{},"变":{"docs":{},"成":{"2":{"docs":{},"^":{"3":{"1":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"2":{"1":{"4":{"7":{"4":{"8":{"3":{"6":{"4":{"7":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"最":{"docs":{},"终":{"docs":{},"可":{"docs":{},"以":{"docs":{},"到":{"docs":{},"达":{"0":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}},"docs":{}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}}},"docs":{}}}},"如":{"docs":{},"果":{"docs":{},"选":{"docs":{},"择":{"docs":{},"有":{"docs":{},"符":{"docs":{},"号":{"docs":{},"右":{"docs":{},"移":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"移":{"docs":{},"来":{"docs":{},"移":{"docs":{},"去":{"docs":{},"还":{"docs":{},"是":{"docs":{},"它":{"docs":{},"本":{"docs":{},"来":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}},".":{"docs":{"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":2.0126582278481013}}}},"2":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":3.359649122807017}}}},"3":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":2.504854368932039}}}},"4":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}},".":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":1.6862745098039214}}}},"docs":{},",":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}},".":{"docs":{"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":3.3678160919540225}}}},"2":{"0":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"3":{"4":{"5":{"6":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"对":{"docs":{},"输":{"docs":{},"入":{"docs":{},"n":{"docs":{},"减":{"docs":{},"半":{"docs":{},"处":{"docs":{},"理":{"docs":{},"，":{"docs":{},"并":{"docs":{},"进":{"docs":{},"行":{"docs":{},"奇":{"docs":{},"偶":{"docs":{},"判":{"docs":{},"断":{"docs":{},"。":{"docs":{},"比":{"docs":{},"如":{"1":{"6":{"docs":{},"=":{"4":{"docs":{},"*":{"4":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"对":{"4":{"docs":{},"进":{"docs":{},"行":{"docs":{},"相":{"docs":{},"乘":{"docs":{},"即":{"docs":{},"可":{"docs":{},"求":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}}}}}}}}}}}}},"docs":{}}}}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}},"，":{"docs":{},"不":{"docs":{},"是":{"docs":{},"整":{"docs":{},"数":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}},"6":{"0":{"8":{"7":{"1":{"8":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"8":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"9":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":2.0161290322580645}}}},"docs":{},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}}},"3":{"4":{"2":{"1":{"7":{"7":{"2":{"8":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"6":{"docs":{},".":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":3.3494623655913975}}}},"7":{"docs":{},".":{"docs":{"alg/137_Single_Number_II.html":{"ref":"alg/137_Single_Number_II.html","tf":2.75}}}},"docs":{},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}}},"4":{"1":{"docs":{},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},".":{"docs":{"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":2.521276595744681}}}},"2":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}},".":{"docs":{"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":2.017543859649123}}}},"3":{"docs":{},"（":{"docs":{},"这":{"docs":{},"两":{"docs":{},"题":{"docs":{},"前":{"docs":{},"两":{"docs":{},"步":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"都":{"docs":{},"是":{"docs":{},"先":{"docs":{},"分":{"docs":{},"割":{"docs":{},"再":{"docs":{},"反":{"docs":{},"转":{"docs":{},"，":{"docs":{},"再":{"docs":{},"比":{"docs":{},"较":{"docs":{},"或":{"docs":{},"合":{"docs":{},"并":{"docs":{},"）":{"docs":{},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":3.3407960199004973}}}},"4":{"docs":{},"，":{"9":{"4":{"docs":{},"，":{"1":{"4":{"5":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},".":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":2.0093457943925235}}}},"5":{"docs":{},".":{"docs":{"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":2.0060975609756095}}}},"6":{"docs":{},"(":{"docs":{},"l":{"docs":{},"r":{"docs":{},"u":{"docs":{},")":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}}},".":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":3.3365180467091293}}}},"7":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}},".":{"docs":{"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":2.5238095238095237}}}},"8":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}},".":{"docs":{"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":3.345098039215686}}}},"9":{"docs":{},".":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":2.5044642857142856}}}},"docs":{},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}},"5":{"0":{"docs":{},".":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":2.0072463768115942}}}},"4":{"3":{"2":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"docs":{}},"docs":{}},"5":{"docs":{},".":{"docs":{"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":3.3636363636363633}}}},"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}},".":{"0":{"2":{"5":{"5":{"3":{"0":{"1":{"2":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":5.0095238095238095}}},"]":{"docs":{},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}},"(":{"3":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},",":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}}}}},"docs":{}},",":{"docs":{"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}}},"6":{"0":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}},".":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":2.018181818181818}}}},"7":{"7":{"7":{"2":{"1":{"6":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"9":{"docs":{},".":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":3.340909090909091}}}},"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}},",":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}},")":{"docs":{},";":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}},"7":{"3":{"docs":{},".":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":2.005050505050505}}}},"9":{"docs":{},".":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":3.346491228070175}}}},"docs":{"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}},"8":{"9":{"docs":{},".":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":3.339147286821705}}}},"docs":{},"(":{"4":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}}}},"docs":{}},".":{"docs":{"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":5.0131578947368425}}},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"，":{"docs":{},"它":{"docs":{},"不":{"docs":{},"能":{"docs":{},"进":{"docs":{},"入":{"docs":{},"方":{"docs":{},"格":{"docs":{},"（":{"3":{"5":{"docs":{},",":{"3":{"8":{"docs":{},"）":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"3":{"docs":{},"+":{"5":{"docs":{},"+":{"3":{"docs":{},"+":{"8":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}}}}},"9":{"1":{"docs":{},".":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":2.508}}}},"2":{"9":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"docs":{}},"9":{"docs":{},".":{"docs":{"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":1.6858974358974357}}}},"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}},"]":{"docs":{},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}},".":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":1.6735159817351597}}},"。":{"docs":{},"请":{"docs":{},"问":{"docs":{},"该":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"能":{"docs":{},"够":{"docs":{},"达":{"docs":{},"到":{"docs":{},"多":{"docs":{},"少":{"docs":{},"个":{"docs":{},"格":{"docs":{},"子":{"docs":{},"？":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}}}}}}}}}}},"docs":{"others.html":{"ref":"others.html","tf":0.007874015748031496},"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.02702702702702703},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.045454545454545456},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.012738853503184714},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.017167381974248927},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.033707865168539325},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.02531645569620253},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.041237113402061855},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.021739130434782608},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.047619047619047616},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":2.532},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}},")":{"docs":{"others.html":{"ref":"others.html","tf":0.010498687664041995},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.02027027027027027},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.030927835051546393},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.011013215859030838},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085}},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.022321428571428572},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}},";":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.031746031746031744},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.020833333333333332},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.024691358024691357},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.04},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.038461538461538464},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.009029345372460496},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.03389830508474576},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.03488372093023256},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085}}},"个":{"docs":{},"盘":{"docs":{},"移":{"docs":{},"动":{"docs":{},"到":{"docs":{},"b":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},"c":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"如":{"docs":{},"第":{"docs":{},"二":{"docs":{},"层":{"docs":{},"有":{"2":{"docs":{},"^":{"docs":{},"(":{"2":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}},"docs":{}}}},"docs":{}}}}}}}}}},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}}}}}}}}}},"，":{"docs":{},"随":{"docs":{},"机":{"docs":{},"数":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"：":{"docs":{},"i":{"docs":{},"后":{"docs":{},"面":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"交":{"docs":{},"换":{"docs":{},"i":{"docs":{},"和":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}},"=":{"2":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}},"docs":{}},"|":{"docs":{},"|":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}},")":{"docs":{"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125}}}},",":{"docs":{"others.html":{"ref":"others.html","tf":0.007874015748031496},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.013392857142857142},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.01048951048951049},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.04},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.01580135440180587},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.01904761904761905},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.04405286343612335}}},".":{"0":{"0":{"0":{"0":{"0":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"1":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.20512820512820512}}},"docs":{}},"docs":{}},"docs":{}},"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.011235955056179775}},")":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}},"docs":{"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":5.035714285714286},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}},"使":{"docs":{},"用":{"docs":{},"总":{"docs":{},"容":{"docs":{},"量":{"docs":{},"为":{"docs":{},"k":{"docs":{},"+":{"1":{"docs":{},"的":{"docs":{},"优":{"docs":{},"先":{"docs":{},"队":{"docs":{},"列":{"docs":{},"维":{"docs":{},"护":{"docs":{},"值":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"k":{"docs":{},"个":{"docs":{},"点":{"docs":{},"，":{"docs":{},"一":{"docs":{},"旦":{"docs":{},"总":{"docs":{},"数":{"docs":{},"量":{"docs":{},"y":{"docs":{},"超":{"docs":{},"过":{"docs":{},"k":{"docs":{},"，":{"docs":{},"移":{"docs":{},"除":{"docs":{},"y":{"docs":{},"中":{"docs":{},"值":{"docs":{},"最":{"docs":{},"小":{"docs":{},"的":{"docs":{},"点":{"docs":{},"。":{"docs":{},"堆":{"docs":{},"中":{"docs":{},"插":{"docs":{},"入":{"docs":{},"和":{"docs":{},"删":{"docs":{},"除":{"docs":{},"的":{"docs":{},"最":{"docs":{},"差":{"docs":{},"时":{"docs":{},"间":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"docs":{},"k":{"docs":{},")":{"docs":{},",":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"docs":{},"k":{"docs":{},")":{"docs":{},"为":{"docs":{},"堆":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"，":{"docs":{},"又":{"docs":{},"因":{"docs":{},"为":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"整":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"n":{"docs":{},"*":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"docs":{},"k":{"docs":{},")":{"docs":{},"，":{"docs":{},"不":{"docs":{},"会":{"docs":{},"修":{"docs":{},"改":{"docs":{},"输":{"docs":{},"入":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{},"r":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176}}}}}}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}}}}}}}},"第":{"docs":{},"i":{"docs":{},"层":{"docs":{},"有":{"2":{"docs":{},"^":{"docs":{},"(":{"docs":{},"i":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}},"docs":{}}}}},"填":{"docs":{},"坑":{"docs":{},"法":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}},"选":{"docs":{},"择":{"docs":{},"合":{"docs":{},"适":{"docs":{},"的":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}},"临":{"docs":{},"时":{"docs":{},"变":{"docs":{},"量":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}},"/":{"2":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"docs":{}},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},";":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"array.html":{"ref":"array.html","tf":0.014044943820224719},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.016778523489932886},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.02027027027027027},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.02247191011235955},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.05056179775280899},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.013986013986013986},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.01818181818181818},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0273972602739726},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.0379746835443038},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.030927835051546393},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.02631578947368421},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.01904761904761905},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.02631578947368421},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.04285714285714286},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.0425531914893617},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}},"]":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.010067114093959731},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},";":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}},"，":{"docs":{},"列":{"docs":{},"的":{"docs":{},"取":{"docs":{},"值":{"docs":{},"范":{"docs":{},"围":{"docs":{},"：":{"docs":{},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}},"，":{"docs":{},"行":{"docs":{},"的":{"docs":{},"取":{"docs":{},"值":{"docs":{},"范":{"docs":{},"围":{"docs":{},"：":{"docs":{},"[":{"docs":{},"i":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}}}}},")":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.02857142857142857},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.02631578947368421}},")":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285}}}}},"e":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"，":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"为":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}}}}},"继":{"docs":{},"续":{"docs":{},"在":{"docs":{},"左":{"docs":{},"边":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"会":{"docs":{},"修":{"docs":{},"改":{"docs":{},"输":{"docs":{},"入":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{},"注":{"docs":{},"意":{"docs":{},"边":{"docs":{},"界":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"说":{"docs":{},"明":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"较":{"docs":{},"长":{"docs":{},"，":{"docs":{},"缩":{"docs":{},"小":{"docs":{},"右":{"docs":{},"边":{"docs":{},"界":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"使":{"docs":{},"r":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}}}}}}}}}}}}}}},"相":{"docs":{},"当":{"docs":{},"于":{"docs":{},"原":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"调":{"docs":{},"换":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"。":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"它":{"docs":{},"不":{"docs":{},"是":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"也":{"docs":{},"返":{"docs":{},"回":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"字":{"docs":{},"串":{"docs":{},"需":{"docs":{},"要":{"docs":{},"比":{"docs":{},"较":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"该":{"docs":{},"值":{"docs":{},"小":{"docs":{},"于":{"0":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"整":{"docs":{},"个":{"docs":{},"树":{"docs":{},"都":{"docs":{},"不":{"docs":{},"是":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"。":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.010309278350515464}}}}}}}}}}}}}},"否":{"docs":{},"则":{"docs":{},"会":{"docs":{},"溢":{"docs":{},"出":{"docs":{},"。":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}}}}}}}},"举":{"docs":{},"例":{"docs":{},"来":{"docs":{},"说":{"docs":{},":":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}}},"结":{"docs":{},"果":{"docs":{},"永":{"docs":{},"远":{"docs":{},"不":{"docs":{},"是":{"0":{"docs":{},"，":{"docs":{},"就":{"docs":{},"会":{"docs":{},"产":{"docs":{},"生":{"docs":{},"死":{"docs":{},"循":{"docs":{},"环":{"docs":{},"。":{"docs":{},"负":{"docs":{},"数":{"docs":{},"的":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"是":{"docs":{},"补":{"docs":{},"码":{"docs":{},".":{"docs":{},".":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"的":{"docs":{},"关":{"docs":{},"系":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}}},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"是":{"1":{"1":{"1":{"1":{"1":{"1":{"1":{"1":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"刚":{"docs":{},"好":{"docs":{},"错":{"docs":{},"开":{"docs":{},"。":{"docs":{},"n":{"docs":{},"大":{"docs":{},"于":{"0":{"docs":{"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125}}},"docs":{}}}}}}}}}}}},"和":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"算":{"docs":{},"出":{"docs":{},"来":{"docs":{},"的":{"docs":{},"就":{"docs":{},"是":{"1":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}}},"docs":{}}}}}}}}}}},"性":{"docs":{},"质":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"把":{"docs":{},"n":{"docs":{},"右":{"docs":{},"移":{"docs":{},"一":{"docs":{},"位":{"docs":{},"，":{"docs":{},"累":{"docs":{},"加":{"docs":{},"n":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}}}}}}}}}}}}}},"（":{"docs":{},"防":{"docs":{},"止":{"docs":{},"重":{"docs":{},"复":{"docs":{},"打":{"docs":{},"印":{"docs":{},"同":{"docs":{},"一":{"docs":{},"列":{"docs":{},"）":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}},"行":{"docs":{},"）":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}}}}}},"|":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},"}":{"docs":{},")":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.022321428571428572}}},";":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}},"改":{"docs":{},"成":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},"免":{"docs":{},"去":{"docs":{},"检":{"docs":{},"查":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}}},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"已":{"docs":{},"经":{"docs":{},"累":{"docs":{},"加":{"docs":{},"的":{"docs":{},"和":{"docs":{},",":{"docs":{},"i":{"docs":{},"的":{"docs":{},"数":{"docs":{},"值":{"docs":{},")":{"docs":{},"，":{"docs":{},"而":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"是":{"docs":{},"用":{"docs":{},"来":{"docs":{},"记":{"docs":{},"录":{"docs":{},"整":{"docs":{},"个":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"f":{"docs":{},"。":{"docs":{"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"=":{"7":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}},"docs":{}},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"如":{"docs":{},"三":{"docs":{},"层":{"docs":{},"的":{"docs":{},"树":{"docs":{},"最":{"docs":{},"多":{"docs":{},"有":{"2":{"docs":{},"^":{"3":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}},"docs":{}}},"docs":{}}}}}}}}}}}}},"。":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"是":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}}}}},"次":{"docs":{},"把":{"docs":{},"当":{"docs":{},"前":{"docs":{},"头":{"docs":{},"部":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"转":{"docs":{},"移":{"docs":{},"至":{"docs":{},"尾":{"docs":{},"部":{"docs":{},"。":{"docs":{},"两":{"docs":{},"头":{"docs":{},"操":{"docs":{},"作":{"docs":{},"用":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"直":{"docs":{},"在":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"所":{"docs":{},"以":{"docs":{},"需":{"docs":{},"要":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}}}}}}}}}}}}}}}}}}}}}}},"来":{"docs":{},"计":{"docs":{},"算":{"docs":{},"都":{"docs":{},"是":{"docs":{},"完":{"docs":{},"整":{"docs":{},"括":{"docs":{},"号":{"docs":{},"的":{"docs":{},"状":{"docs":{},"况":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}}}}}}}}}}}}}}}},"说":{"1":{"1":{"1":{"1":{"1":{"1":{"1":{"1":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}},"2":{"0":{"0":{"docs":{},".":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":3.3425076452599387}}}},"3":{"docs":{},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},".":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":2.007142857142857}}}},"6":{"docs":{},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},".":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":2.514705882352941}}}},"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.010067114093959731}}},"]":{"docs":{},",":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}}},"1":{"4":{"7":{"4":{"8":{"3":{"6":{"4":{"8":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}},"为":{"docs":{},"例":{"docs":{},"子":{"docs":{},"，":{"docs":{},"输":{"docs":{},"出":{"docs":{},"结":{"docs":{},"果":{"docs":{},"为":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"5":{"docs":{},".":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":2.0033557046979866}}},"(":{"docs":{},"k":{"docs":{},"大":{"docs":{},")":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}}}},"docs":{},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},".":{"docs":{"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":2.017857142857143}}}},"2":{"2":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":2.010869565217391}}}},"5":{"docs":{},".":{"docs":{"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":2.0217391304347827}}}},"6":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":2.5085470085470085}}}},"7":{"docs":{},".":{"docs":{"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":2.5256410256410255}}}},"docs":{},"]":{"docs":{},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}}},"3":{"0":{"docs":{},".":{"docs":{"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":2.021276595744681}}}},"1":{"docs":{},".":{"docs":{"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":3.364583333333333}}}},"2":{"docs":{},".":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":2.008}}}},"4":{"docs":{},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},".":{"docs":{"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":2.511764705882353}}}},"5":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":1.4439560439560437}}}},"6":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}},".":{"docs":{"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":1.6836158192090394}}}},"7":{"docs":{},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},".":{"docs":{"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":2.0555555555555554}}}},"9":{"docs":{},".":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":2.5126582278481013}}}},"docs":{},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}},"(":{"docs":{},"一":{"docs":{},"开":{"docs":{},"始":{"docs":{},"的":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"很":{"docs":{},"慢":{"docs":{},")":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}}}}}}}}}},".":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":2.0069444444444446}}}},"4":{"0":{"docs":{},".":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":2.014925373134328}}}},"1":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"docs":{},"]":{"docs":{},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},".":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":2.5113636363636362}}}},"5":{"6":{"docs":{},";":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.00881057268722467}}}},"7":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}},".":{"docs":{"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":2.515151515151515}}}},"docs":{}},"6":{"0":{"docs":{},".":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":2.5088495575221237}}}},"8":{"4":{"3":{"5":{"4":{"5":{"6":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},".":{"2":{"4":{"0":{"0":{"9":{"9":{"0":{"0":{"9":{"9":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":2.0476190476190474}}},",":{"2":{"7":{"docs":{},",":{"8":{"0":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}},"7":{"docs":{},".":{"docs":{"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":3.3888888888888884}}}},"8":{"7":{"docs":{},".":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":2.5136986301369864}}}},"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}},".":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":3.348958333333333}}}},"docs":{"others.html":{"ref":"others.html","tf":0.007874015748031496},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.033783783783783786},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}},"n":{"docs":{},"+":{"1":{"0":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},"docs":{}},"docs":{}}},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}},"}":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}},")":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.02348993288590604},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.02247191011235955},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0273972602739726}}},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154}},"]":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},";":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}},",":{"docs":{},"[":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},"的":{"docs":{},"答":{"docs":{},"案":{"docs":{},"是":{"docs":{},"[":{"docs":{"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.02247191011235955},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}},"的":{"docs":{},"意":{"docs":{},"思":{"docs":{},"举":{"docs":{},"例":{"docs":{},"来":{"docs":{},"说":{"docs":{},"，":{"docs":{},"当":{"docs":{},"n":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}}}}}}}},":":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},")":{"docs":{},";":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}},";":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.006993006993006993},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":5.035714285714286}}}}},"|":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},".":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":2.5081967213114753}},"字":{"docs":{},"典":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}}}}}}}},"深":{"docs":{},"度":{"docs":{},"为":{"docs":{},"k":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"最":{"docs":{},"多":{"docs":{},"有":{"2":{"docs":{},"^":{"docs":{},"k":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}},"docs":{}}}}}}}}}}}},"交":{"docs":{},"换":{"docs":{},"法":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}},"考":{"docs":{},"虑":{"docs":{},"数":{"docs":{},"组":{"docs":{},"大":{"docs":{},"小":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}},"异":{"docs":{},"或":{"docs":{},"修":{"docs":{},"改":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}},"d":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":2.5090909090909093},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":2.014925373134328}}},"中":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"不":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"i":{"docs":{},"k":{"docs":{},"会":{"docs":{},"同":{"docs":{},"时":{"docs":{},"前":{"docs":{},"进":{"docs":{},"，":{"docs":{},"一":{"docs":{},"旦":{"docs":{},"i":{"docs":{},"和":{"docs":{},"k":{"docs":{"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":0.0625}}}}}}}}}}}}}}}}}}}}},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"i":{"docs":{},"前":{"docs":{},"面":{"docs":{},"已":{"docs":{},"经":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"相":{"docs":{},"等":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"k":{"docs":{},"就":{"docs":{},"停":{"docs":{},"在":{"docs":{},"第":{"docs":{},"三":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"上":{"docs":{},"等":{"docs":{},"待":{"docs":{},"i":{"docs":{},"找":{"docs":{},"到":{"docs":{},"新":{"docs":{},"的":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":0.0625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"只":{"docs":{},"有":{"0":{"docs":{},",":{"docs":{"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304}}}},"docs":{}}}}}}}},"+":{"2":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}}},"docs":{}}},"docs":{}}},"3":{"0":{"8":{"6":{"4":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"docs":{}},"docs":{}},"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}},"]":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}},"2":{"4":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"7":{"6":{"8":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}},"docs":{}},"8":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}},".":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":2.018181818181818}}}},"docs":{},".":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":2.518867924528302}}}},"3":{"5":{"5":{"4":{"4":{"3":{"2":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"4":{"2":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}},"4":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}}}}}}}}},".":{"docs":{"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":3.350282485875706}}}},"9":{"docs":{},".":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":2.509433962264151}}}},"docs":{},",":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}},"5":{"0":{"docs":{},".":{"docs":{"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":2.015873015873016}}}},"docs":{}},"6":{"docs":{},".":{"docs":{"alg/36_Valid_Sudoku.html":{"ref":"alg/36_Valid_Sudoku.html","tf":3.4166666666666665}}}},"7":{"1":{"docs":{},".":{"docs":{"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":2.521276595744681}}}},"docs":{},".":{"docs":{"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":3.3859649122807016}}}},"8":{"4":{"docs":{},".":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":3.348958333333333}}}},"5":{"8":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"docs":{}},"7":{"docs":{},".":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":2.0095238095238095}}}},"docs":{}},"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.02727272727272727},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.023255813953488372},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}},",":{"0":{"docs":{},",":{"docs":{"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304}}}},"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.03691275167785235},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304}}},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154}},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"是":{"docs":{"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304}}}}}}}}}}},".":{"4":{"3":{"6":{"8":{"4":{"4":{"7":{"5":{"2":{"0":{"7":{"6":{"7":{"9":{"3":{"5":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"排":{"docs":{},"序":{"docs":{},"+":{"docs":{},"返":{"docs":{},"回":{"docs":{},"中":{"docs":{},"间":{"docs":{},"值":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}}}}},"对":{"docs":{},"任":{"docs":{},"何":{"docs":{},"一":{"docs":{},"棵":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"法":{"docs":{},"(":{"docs":{},"在":{"docs":{},"某":{"docs":{},"些":{"docs":{},"地":{"docs":{},"方":{"docs":{},"也":{"docs":{},"叫":{"docs":{},"普":{"docs":{},"通":{"docs":{},"快":{"docs":{},"排":{"docs":{},")":{"docs":{},":":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}}}}},"处":{"docs":{},"理":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}},";":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},"来":{"docs":{},"说":{"docs":{},"，":{"docs":{},"分":{"docs":{},"割":{"docs":{},"完":{"docs":{},"之":{"docs":{},"后":{"docs":{},"l":{"docs":{},"h":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"=":{"1":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684}}},"docs":{}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":5.019047619047619}},".":{"docs":{"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}},"偷":{"docs":{},"懒":{"docs":{},"法":{"docs":{},".":{"docs":{},".":{"docs":{"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}}}}}}}}},")":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"出":{"docs":{},"了":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304}}}}}}}}}}}}}},"比":{"docs":{},"较":{"docs":{},"大":{"docs":{},"小":{"docs":{},"。":{"docs":{"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304}}}}}}}},"4":{"1":{"5":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}},".":{"docs":{"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":3.3550724637681157}}}},"docs":{}},"2":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}},".":{"docs":{"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":2.5294117647058822}}}},"5":{"0":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{},"出":{"docs":{},"现":{"docs":{},"过":{"docs":{},"，":{"docs":{},"另":{"docs":{},"外":{"docs":{},"在":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"链":{"docs":{},"表":{"docs":{},"里":{"docs":{},"也":{"docs":{},"出":{"docs":{},"现":{"docs":{},"过":{"docs":{},"。":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":2.537037037037037}}}},"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"6":{"1":{"docs":{},".":{"docs":{"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":3.354609929078014}}}},"5":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}},"docs":{}},"8":{"2":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"docs":{}},"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}},",":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.013422818791946308},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863}}},"}":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}},"时":{"docs":{},"，":{"docs":{},"f":{"docs":{},"(":{"4":{"docs":{},")":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}},"docs":{}}}}},".":{"docs":{},"具":{"docs":{},"有":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":5.0131578947368425}}}}},")":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}},")":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}},"5":{"0":{"docs":{},".":{"5":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":5.012820512820513}}},"]":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}},"3":{"6":{"8":{"7":{"0":{"9":{"1":{"2":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},".":{"docs":{"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":3.3678160919540225}}}},"4":{"docs":{},".":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":3.3445692883895126}}}},"7":{"2":{"docs":{},".":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":2.5078740157480315}}}},"docs":{}},"8":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}},"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}},"n":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},",":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.026845637583892617},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863}}},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.013422818791946308}}}},"6":{"0":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"1":{"7":{"2":{"8":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"docs":{}},"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":2.022727272727273}}}},"docs":{}},"3":{"7":{"docs":{},".":{"docs":{"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":2.025}}},"题":{"docs":{},"求":{"docs":{},"均":{"docs":{},"值":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"这":{"docs":{},"个":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"是":{"docs":{},"没":{"docs":{},"有":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{},"，":{"docs":{},"只":{"docs":{},"有":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"和":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"有":{"docs":{},"。":{"docs":{"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"5":{"4":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"最":{"docs":{},"大":{"docs":{},")":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}},".":{"docs":{"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":2.5123456790123457}}}},"docs":{}},"6":{"9":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},"docs":{}},"7":{"1":{"0":{"8":{"8":{"6":{"4":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"9":{"docs":{},".":{"docs":{"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":5.00561797752809}}}},"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.013422818791946308},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154}},"，":{"docs":{},"前":{"docs":{},"面":{"docs":{},"一":{"docs":{},"种":{"docs":{},"解":{"docs":{},"法":{"docs":{},"可":{"docs":{},"以":{"docs":{},"有":{"0":{"docs":{},"，":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"解":{"docs":{},"法":{"docs":{},"都":{"docs":{},"适":{"docs":{},"用":{"docs":{},"。":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"7":{"0":{"0":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":2.013333333333333}}}},"1":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},".":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":2.006666666666667}}}},"3":{"docs":{},".":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":2.027027027027027}}}},"4":{"docs":{},".":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":3.3368298368298364}}}},"5":{"docs":{},".":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":3.343537414965986}}}},"7":{"docs":{},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},".":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":2.504291845493562}}}},"docs":{},".":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":3.3400900900900896}}}},"4":{"docs":{},".":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":2.5090909090909093}}}},"5":{"docs":{},"(":{"docs":{},"荷":{"docs":{},"兰":{"docs":{},"国":{"docs":{},"旗":{"docs":{},")":{"docs":{},",":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}}}}}},".":{"docs":{"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":3.359649122807017}}}},"7":{"1":{"6":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"docs":{}},"docs":{}},"9":{"docs":{},".":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":3.335535976505139}}}},"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}},"]":{"docs":{},",":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}},".":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":3.3415300546448083}}}},"8":{"0":{"7":{"docs":{},".":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}}},"docs":{},".":{"docs":{"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":1.7291666666666665}}}},"1":{"7":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}},".":{"docs":{"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":2.55}}}},"docs":{},".":{"docs":{"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":1.689922480620155}}}},"2":{"docs":{},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},".":{"docs":{"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":1.6820512820512818}}}},"3":{"docs":{},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},".":{"docs":{"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":2.014925373134328}}}},"4":{"6":{"3":{"8":{"4":{"7":{"4":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}},"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}},"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}},"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}},"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}},"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}},"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}},"6":{"docs":{},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},".":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":3.3438596491228068}}}},"7":{"2":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}},".":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":2.519230769230769}}}},"6":{"docs":{},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},".":{"docs":{"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":2.5285714285714285}}}},"docs":{}},"9":{"7":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"变":{"docs":{},"形":{"docs":{},")":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}}}}},".":{"docs":{"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":2.020408163265306}}}},"docs":{}},"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}},"）":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}},".":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":3.343234323432343}}},")":{"docs":{},";":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}},"9":{"0":{"5":{"docs":{},"(":{"docs":{},"奇":{"docs":{},"偶":{"docs":{},"交":{"docs":{},"换":{"docs":{},")":{"docs":{},",":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}}}}}},".":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":2.5142857142857142}}}},"docs":{}},"2":{"2":{"3":{"3":{"7":{"2":{"0":{"3":{"6":{"8":{"5":{"4":{"7":{"7":{"5":{"8":{"0":{"8":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"4":{"docs":{},".":{"docs":{"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":2.008771929824561}}}},"6":{"4":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"docs":{}},"8":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}},".":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":2.011764705882353}}}},"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}},")":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802}}}},"docs":{},"别":{"docs":{},"背":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"别":{"docs":{},"背":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"别":{"docs":{},"背":{"docs":{},"答":{"docs":{},"案":{"docs":{},"，":{"docs":{},"重":{"docs":{},"要":{"docs":{},"的":{"docs":{},"事":{"docs":{},"说":{"docs":{},"三":{"docs":{},"遍":{"docs":{"./":{"ref":"./","tf":0.3333333333333333}}}}}}}}}}}}}}}}}}}}}}}},"算":{"docs":{},"法":{"docs":{},"笔":{"docs":{},"记":{"docs":{"./":{"ref":"./","tf":0.3333333333333333}}}}}},"能":{"docs":{},"全":{"docs":{},"部":{"docs":{},"背":{"docs":{},"下":{"docs":{},"来":{"docs":{},"可":{"docs":{},"还":{"docs":{},"行":{"docs":{"./":{"ref":"./","tf":0.3333333333333333}}}}}}}}}}},"�":{"docs":{},"�":{"docs":{},"a":{"docs":{},"l":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":10}}}}}}},"\"":{"0":{"docs":{},"\"":{"docs":{},";":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}}},"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"array.html":{"ref":"array.html","tf":0.0056179775280898875},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.030303030303030304},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}},"{":{"docs":{},"}":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},"\"":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}},"\"":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.017857142857142856},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.030303030303030304},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.029411764705882353},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.03821656050955414},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.05150214592274678},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.020833333333333332},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.017094017094017096},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.03125}}},",":{"docs":{"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152}}},"]":{"docs":{},"这":{"docs":{},"个":{"docs":{},"例":{"docs":{},"子":{"docs":{},"。":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}},")":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406}},")":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}}}},"*":{"docs":{},"\"":{"docs":{},":":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}}}}},"+":{"docs":{},"\"":{"docs":{},":":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}}}}},"/":{"docs":{},"\"":{"docs":{},":":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}}}}},":":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"\"":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}},"#":{"1":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}},"2":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}},"3":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}},"docs":{"others.html":{"ref":"others.html","tf":0.023622047244094488},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.033707865168539325},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.017857142857142856},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.01048951048951049},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.01910828025477707},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}},"#":{"docs":{},"#":{"docs":{},"#":{"docs":{},"#":{"docs":{},"#":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}},"'":{"0":{"docs":{},"'":{"docs":{},";":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}}},"1":{"docs":{},"'":{"docs":{},")":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}}},"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}},"a":{"docs":{},"'":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}},"b":{"docs":{},"'":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}},"c":{"docs":{},"'":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}},"z":{"docs":{},"'":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"'":{"docs":{},"d":{"docs":{},"y":{"docs":{},"前":{"docs":{},"面":{"docs":{},"加":{"docs":{},"上":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"浮":{"docs":{},"点":{"docs":{},"数":{"docs":{},"精":{"docs":{},"度":{"docs":{},"可":{"docs":{},"能":{"docs":{},"出":{"docs":{},"现":{"docs":{},"问":{"docs":{},"题":{"docs":{},"导":{"docs":{},"致":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"点":{"docs":{},"算":{"docs":{},"出":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"斜":{"docs":{},"率":{"docs":{},"。":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"'":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}},")":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}}}}},"+":{"docs":{},"'":{"docs":{},";":{"docs":{"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564}}}}},"#":{"docs":{},"'":{"docs":{},";":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}},";":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}},"(":{"1":{"docs":{},",":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.013392857142857142}}},"，":{"1":{"docs":{},")":{"docs":{},"中":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"点":{"docs":{},"斜":{"docs":{},"率":{"docs":{},"相":{"docs":{},"等":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}}}}},"docs":{}}},"2":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}},"+":{"1":{"docs":{},")":{"docs":{},"*":{"2":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}},"docs":{}}}},"docs":{}}},"5":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}},"docs":{},"i":{"docs":{"array.html":{"ref":"array.html","tf":0.008426966292134831},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.02631578947368421},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.043478260869565216},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.04}},"n":{"docs":{},"t":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"array.html":{"ref":"array.html","tf":0.019662921348314606},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0273972602739726},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.03773584905660377},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.031746031746031744},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.05},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.02631578947368421},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.01904761904761905},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.02631578947368421},"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":0.05555555555555555},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.047619047619047616},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.02531645569620253},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.006607929515418502},"alg/36_Valid_Sudoku.html":{"ref":"alg/36_Valid_Sudoku.html","tf":0.08333333333333333},"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.05263157894736842},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.03225806451612903},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.035398230088495575},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.01904761904761905}},"e":{"docs":{},"g":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}}}}}}}}}}}}}},")":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.021739130434782608}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334}}}}}}}}}}},"t":{"docs":{},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}}}}}}},"l":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334}}}},"n":{"docs":{"others.html":{"ref":"others.html","tf":0.010498687664041995},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.016},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.0625}},"u":{"docs":{},"m":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}},"s":{"1":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}},"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.046511627906976744}}}}},"]":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.013986013986013986}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":0.0625}}}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}}}}}},"e":{"docs":{},"w":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888}}}}}}}}}}}}}}},">":{"docs":{},"=":{"0":{"docs":{},")":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}},"docs":{}}}},"x":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.03932584269662921},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.03278688524590164},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.0425531914893617}},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}},"j":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655}}},"l":{"1":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.05357142857142857},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.02459016393442623}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.03571428571428571},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888}}}}}}},"2":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082}}},"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.010067114093959731},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.006993006993006993},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.034782608695652174},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.029345372460496615},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.02857142857142857},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.03389830508474576},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.02857142857142857},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}}}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.045454545454545456},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.03389830508474576},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.02531645569620253}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}}}}},"t":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.006772009029345372}}}},"s":{"2":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}}}}}},"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.03937007874015748},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564}},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.015748031496062992}}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}}}},"t":{"docs":{},"r":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406}}}}},"s":{"docs":{},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"\"":{"0":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}}}},"docs":{}}}}}}}}}}}},"docs":{}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},")":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703}}}}}}}}}}}}}},"b":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}},"t":{"1":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.02247191011235955},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.045454545454545456}}},"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}},"s":{"2":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}}}}}},"docs":{},"e":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}}},".":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"\"":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}},"+":{"docs":{},"\"":{"docs":{},")":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406}},")":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}},"n":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}},"u":{"docs":{},"m":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}},"i":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.016}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"=":{"docs":{},"=":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}}}}},"c":{"docs":{},"m":{"docs":{},"p":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}}}}}}}}}}},"h":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"m":{"docs":{},",":{"docs":{"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.02247191011235955}}}}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.020618556701030927}}}}}}}}}},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}},"p":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.01818181818181818}}}}}}}}}},"!":{"docs":{},"(":{"docs":{},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}},"s":{"1":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}}}}}},"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756}},")":{"docs":{"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364}}}}}}}}}}}}}},"c":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{},")":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}}}}}}}}}}}},"q":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}}}}}}}},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"1":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}}}}}},"docs":{}}}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}},"b":{"docs":{},"j":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808}}}}}}}}},"l":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.03076923076923077}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.0425531914893617}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{},")":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}}}}}}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}}},"u":{"docs":{},"r":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.013333333333333334},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.05333333333333334},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}}}}}}}}}},"r":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.006993006993006993},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.028037383177570093},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.018292682926829267},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.02564102564102564},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.020618556701030927},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.03260869565217391},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.013333333333333334},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.013333333333333334},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.03389830508474576}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.02666666666666667},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.013333333333333334},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.07407407407407407}}}}}}}}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02142857142857143},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.029850746268656716},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358}},")":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.014285714285714285},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368}}}}}},"a":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.05454545454545454}}},"b":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818}}}}}}},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.0425531914893617},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.03508771929824561},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818}}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}},".":{"docs":{},".":{"docs":{},".":{"docs":{},")":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}}}}},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.015748031496062992}}}}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.010309278350515464}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101}}}}}},"k":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}},")":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}},"y":{"docs":{"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085}}},"a":{"docs":{"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}}}},"*":{"docs":{"others.html":{"ref":"others.html","tf":0.01837270341207349},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.016853932584269662},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.017857142857142856},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.06451612903225806},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.01639344262295082},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}},"/":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.03125},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.04},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.043478260869565216},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.02040816326530612}}},"*":{"docs":{"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}},"+":{"1":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.02247191011235955}}},"docs":{"others.html":{"ref":"others.html","tf":0.028871391076115485},"array.html":{"ref":"array.html","tf":0.016853932584269662},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.013422818791946308},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.04054054054054054},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.02631578947368421},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.02247191011235955},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.017857142857142856},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.030303030303030304},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.013986013986013986},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.034782608695652174},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.056179775280898875},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.08860759493670886},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.010309278350515464},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.05434782608695652},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.06060606060606061},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.08064516129032258},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.019417475728155338},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.038461538461538464},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.024830699774266364},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.0380952380952381},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.039473684210526314},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.047619047619047616},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.01639344262295082},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.03278688524590164},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.05726872246696035},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.032},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}},"=":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}},",":{"docs":{},"c":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}},"/":{"docs":{"others.html":{"ref":"others.html","tf":0.010498687664041995},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.033707865168539325},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.022727272727272728},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.006993006993006993},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.02247191011235955},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.040983606557377046},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406}},"/":{"docs":{"others.html":{"ref":"others.html","tf":0.01837270341207349},"array.html":{"ref":"array.html","tf":0.016853932584269662},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.010067114093959731},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.02564102564102564},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.04950495049504951},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02142857142857143},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.03529411764705882},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.03731343283582089},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.009554140127388535},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0273972602739726},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.018691588785046728},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.020316027088036117},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.01904761904761905},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.039473684210526314},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.019823788546255508},"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.037037037037037035},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.02857142857142857}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},")":{"docs":{},";":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}}}}},"*":{"docs":{},"*":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.03125},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.04},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.043478260869565216},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.02040816326530612}}}},"=":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}},"=":{"docs":{"others.html":{"ref":"others.html","tf":0.07349081364829396},"array.html":{"ref":"array.html","tf":0.12078651685393259},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.06375838926174497},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.05405405405405406},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.12837837837837837},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.06741573033707865},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.078125},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.07894736842105263},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.07142857142857142},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.056179775280898875},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.044642857142857144},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.045454545454545456},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.06565656565656566},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.06293706293706294},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.046511627906976744},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.07272727272727272},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.05970149253731343},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.10344827586206896},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0547945205479452},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.0594059405940594},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.10377358490566038},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.07936507936507936},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.10294117647058823},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.13636363636363635},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.11428571428571428},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.0851063829787234},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.12280701754385964},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.07272727272727272},"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":0.1111111111111111},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.08571428571428572},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.05970149253731343},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.12307692307692308},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.1368421052631579},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.1411764705882353},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.1417910447761194},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.11904761904761904},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.14545454545454545},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.12941176470588237},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.03571428571428571},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.034722222222222224},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.10509554140127389},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.1},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.08583690987124463},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.1232876712328767},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.037383177570093455},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.06140350877192982},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.07926829268292683},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.11627906976744186},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.13541666666666666},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.125},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.13725490196078433},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.08163265306122448},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.06956521739130435},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.08641975308641975},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.08139534883720931},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.05333333333333334},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.10256410256410256},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.045454545454545456},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.038461538461538464},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.056179775280898875},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.02531645569620253},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.041237113402061855},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.021739130434782608},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.030303030303030304},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.019417475728155338},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.02666666666666667},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.08},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.03389830508474576},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.06382978723404255},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.07900677200902935},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.15789473684210525},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.078125},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.13793103448275862},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.14705882352941177},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.08571428571428572},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.07894736842105263},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.0847457627118644},"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":0.1111111111111111},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.09523809523809523},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.1},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.07377049180327869},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.09836065573770492},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.10869565217391304},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.046511627906976744},"4_stack.html":{"ref":"4_stack.html","tf":0.08108108108108109},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.06060606060606061},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.016},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.06521739130434782},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.043478260869565216},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.10126582278481013},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.07547169811320754},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.10256410256410256},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.12844036697247707},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.05726872246696035},"alg/36_Valid_Sudoku.html":{"ref":"alg/36_Valid_Sudoku.html","tf":0.08333333333333333},"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.05263157894736842},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.056},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.03225806451612903},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.061946902654867256},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.0425531914893617},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.05714285714285714},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.061224489795918366}},"=":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.02247191011235955},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.02631578947368421},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.02564102564102564},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.02247191011235955},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.013392857142857142},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.01048951048951049},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.03636363636363636},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.029850746268656716},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.06896551724137931},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.039603960396039604},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.07272727272727272},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02857142857142857},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.05970149253731343},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.03076923076923077},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.023529411764705882},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.03571428571428571},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.034722222222222224},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863},"2_tree.html":{"ref":"2_tree.html","tf":0.0449438202247191},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.037383177570093455},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.03508771929824561},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.024390243902439025},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.11363636363636363},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.09448818897637795},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.1016949152542373},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.02564102564102564},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.06818181818181818},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.057692307692307696},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.10126582278481013},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.07216494845360824},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.043478260869565216},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.045454545454545456},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.04838709677419355},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.13157894736842105},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.03398058252427184},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.05333333333333334},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02666666666666667},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.06779661016949153},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.0425531914893617},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.038461538461538464},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.02857142857142857},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.02631578947368421},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.03488372093023256},"4_stack.html":{"ref":"4_stack.html","tf":0.05405405405405406},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.02531645569620253},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.05128205128205128},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.03669724770642202},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.024229074889867842},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}},">":{"2":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.05263157894736842},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358}},",":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684}},"而":{"docs":{},"r":{"docs":{},"h":{"docs":{},"=":{"4":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684}}},"docs":{}}}}}},".":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"的":{"docs":{},"无":{"docs":{},"限":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"需":{"docs":{},"要":{"docs":{},"删":{"docs":{},"除":{"docs":{},"r":{"docs":{},"h":{"docs":{},"最":{"docs":{},"后":{"docs":{},"这":{"docs":{},"个":{"2":{"docs":{},"。":{"docs":{},"（":{"docs":{},"为":{"docs":{},"什":{"docs":{},"么":{"docs":{},"会":{"docs":{},"有":{"docs":{},"这":{"docs":{},"个":{"2":{"docs":{},"呢":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{},"在":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"次":{"docs":{},"加":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"没":{"docs":{},"有":{"docs":{},"新":{"docs":{},"的":{"docs":{},"值":{"docs":{},"了":{"docs":{},"，":{"docs":{},"s":{"docs":{},"o":{"docs":{},"这":{"docs":{},"个":{"2":{"docs":{},"没":{"docs":{},"有":{"docs":{},"被":{"docs":{},"覆":{"docs":{},"盖":{"docs":{},"。":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"。":{"docs":{},"r":{"docs":{},"h":{"docs":{},"最":{"docs":{},"后":{"docs":{},"这":{"docs":{},"个":{"2":{"docs":{},"和":{"docs":{},"l":{"docs":{},"h":{"docs":{},"最":{"docs":{},"后":{"docs":{},"这":{"docs":{},"个":{"2":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"在":{"docs":{},"运":{"docs":{},"行":{"docs":{},"l":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}}}}},"3":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.042105263157894736},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358}}},"4":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.031578947368421054}},";":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358}}}},"5":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.042105263157894736}}},"6":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358}}},"7":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179}}},"docs":{"others.html":{"ref":"others.html","tf":0.015748031496062992},"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.04054054054054054},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.02247191011235955},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.01048951048951049},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.029850746268656716},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.009554140127388535},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.04081632653061224},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.008695652173913044},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.023255813953488372},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.020618556701030927},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.013333333333333334},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.03076923076923077},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.004514672686230248},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.04918032786885246},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125}},"\"":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}},";":{"docs":{"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152}}},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"加":{"docs":{},"箭":{"docs":{},"头":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"将":{"docs":{},"每":{"docs":{},"条":{"docs":{},"路":{"docs":{},"径":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"加":{"docs":{},"入":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{},"对":{"docs":{},"于":{"docs":{},"空":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"（":{"docs":{},"不":{"docs":{},"执":{"docs":{},"行":{"docs":{},")":{"docs":{},"。":{"docs":{"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"=":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"array.html":{"ref":"array.html","tf":0.02247191011235955},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.008695652173913044},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.011286681715575621},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.043478260869565216},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}}},">":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.02247191011235955},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}},">":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.04}},"=":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.0425531914893617}}},"是":{"docs":{},"无":{"docs":{},"符":{"docs":{},"号":{"docs":{},"右":{"docs":{},"移":{"docs":{},"，":{"docs":{},"左":{"docs":{},"边":{"docs":{},"补":{"0":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}},"docs":{}}}}}}}}}}}},"出":{"docs":{},"错":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}}},"是":{"docs":{},"带":{"docs":{},"着":{"docs":{},"符":{"docs":{},"号":{"docs":{},"的":{"docs":{},"右":{"docs":{},"移":{"docs":{},"，":{"docs":{},"左":{"docs":{},"边":{"docs":{},"由":{"docs":{},"于":{"docs":{},"移":{"docs":{},"位":{"docs":{},"空":{"docs":{},"缺":{"docs":{},"出":{"docs":{},"来":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"会":{"docs":{},"由":{"docs":{},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"符":{"docs":{},"号":{"docs":{},"位":{"docs":{},"补":{"docs":{},"全":{"docs":{},"（":{"docs":{},"正":{"docs":{},"数":{"docs":{},"补":{"0":{"docs":{},"负":{"docs":{},"数":{"docs":{},"补":{"1":{"docs":{},"）":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"负":{"docs":{},"数":{"docs":{},"最":{"docs":{},"终":{"docs":{},"会":{"docs":{},"变":{"docs":{},"成":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}}}}}}}}}},"docs":{}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"2":{"docs":{},"时":{"docs":{},"，":{"docs":{},"s":{"2":{"docs":{},"必":{"docs":{},"须":{"docs":{},"为":{"docs":{},"空":{"docs":{},"。":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}},"docs":{}}}},"转":{"docs":{},"移":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}},"docs":{}}},"a":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.015748031496062992},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}}},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"x":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.011235955056179775}},"*":{"docs":{},"*":{"2":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},"docs":{}}}}}},"c":{"docs":{},"x":{"docs":{},"y":{"docs":{},"z":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}}}}}}}},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}},"a":{"docs":{},"y":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"array.html":{"ref":"array.html","tf":0.0056179775280898875},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":2.0033557046979866},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":3.364583333333333},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":1.689922480620155},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":2.509433962264151},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":2.015873015873016},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":1.4372670807453414},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":2.0476190476190474},"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":1.7291666666666665},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":2.5142857142857142},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":3.339147286821705}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.01904761904761905},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.02531645569620253}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.018691588785046728},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.02531645569620253}}},",":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}},",":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669}}}}}}}}}}}}}}},".":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}}}}}}}}}}},"，":{"docs":{},"指":{"docs":{},"针":{"docs":{},"k":{"docs":{},"指":{"docs":{},"向":{"docs":{},"当":{"docs":{},"前":{"docs":{},"位":{"docs":{},"置":{"docs":{},"的":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"值":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"指":{"docs":{},"针":{"docs":{},"i":{"docs":{},"一":{"docs":{},"旦":{"docs":{},"发":{"docs":{},"现":{"docs":{},"有":{"docs":{},"和":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},"不":{"docs":{},"相":{"docs":{},"等":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"k":{"docs":{},"指":{"docs":{},"向":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"将":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"赋":{"docs":{},"值":{"docs":{},"给":{"docs":{},"位":{"docs":{},"置":{"docs":{},"k":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.047619047619047616}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"j":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285}},"]":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.02857142857142857}}}}}}},")":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}},"[":{"0":{"docs":{},"]":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}},"1":{"docs":{},"]":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}},"docs":{}},",":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}},"g":{"docs":{},"s":{"docs":{},")":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.02857142857142857}},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}},"d":{"docs":{},"d":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":2.5081967213114753},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":3.3768115942028984}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703}}}}}}}},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608}}}}}}}}}}}}}}},")":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.02857142857142857}},";":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.057971014492753624}}}},";":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},"[":{"docs":{},"m":{"docs":{},"]":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463}}}},"a":{"docs":{},"r":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":2.025}},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":2.5078740157480315}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":1.4439560439560437},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":1.6836158192090394}}}}}}}}}},"b":{"docs":{"others.html":{"ref":"others.html","tf":0.010498687664041995},"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.0425531914893617},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.0425531914893617}},":":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997}}}},",":{"docs":{"others.html":{"ref":"others.html","tf":0.013123359580052493}}},"i":{"docs":{},"g":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":2.005050505050505},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":3.3368298368298364},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":2.0093457943925235},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":2.008771929824561},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":2.0060975609756095},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":1.689922480620155},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":1.4389880952380951},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":2.025},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":1.6862745098039214},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":1.4372670807453414},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":2.5123456790123457},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":1.4401993355481726},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":1.4419047619047618},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":2.5085470085470085},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":2.022727272727273},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":2.0112359550561796},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":2.0126582278481013},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":2.5103092783505154},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":2.515151515151515},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":2.013333333333333},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":2.006666666666667},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":2.011764705882353},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":1.4439560439560437},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":1.6836158192090394},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":1.6858974358974357},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"[":{"2":{"docs":{},":":{"docs":{},"]":{"docs":{},"]":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"1":{"docs":{},"'":{"docs":{},")":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}}}},"t":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":5.018518518518518},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":2.508}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.02666666666666667}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.04}}}}}}}}}}}}}}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.01818181818181818},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.018867924528301886},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.031496062992125984},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.03389830508474576},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.020618556701030927},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.013215859030837005},"alg/36_Valid_Sudoku.html":{"ref":"alg/36_Valid_Sudoku.html","tf":0.08333333333333333},"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.05263157894736842},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},"[":{"docs":{},"]":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}},"[":{"docs":{},"]":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"s":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"。":{"docs":{"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.011013215859030838}},";":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}},"为":{"docs":{},"二":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"：":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}},")":{"docs":{"alg/36_Valid_Sudoku.html":{"ref":"alg/36_Valid_Sudoku.html","tf":0.08333333333333333},"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.10526315789473684}}}}}}},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.020134228187919462},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463}}}}}},";":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}}},"s":{"1":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}},"docs":{},"t":{"docs":{"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":2.537037037037037},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":2.021276595744681}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.01048951048951049}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},";":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.013333333333333334},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.028985507246376812}}}}}}},"f":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}},"s":{"docs":{},":":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":2.5103092783505154}}}}}},"c":{"docs":{},"k":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":2.5256410256410255}}}}}},":":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}},"=":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}},"c":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}},")":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},";":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}},",":{"docs":{"others.html":{"ref":"others.html","tf":0.010498687664041995}}},"o":{"docs":{},"l":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.0449438202247191},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.027522935779816515},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.006607929515418502}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}},"=":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"%":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}}}}}}}},"]":{"docs":{},";":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}}}}},"o":{"docs":{},"r":{"docs":{"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":3.359649122807017}}}},"s":{"docs":{},")":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}},",":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.02643171806167401}},"i":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}},",":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}}}}}}},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":1.4372670807453414}}}}}},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}}}}}},"c":{"docs":{},"i":{"docs":{},"s":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}},"a":{"docs":{},"t":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":1.4401993355481726},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":1.4419047619047618}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":3.3678160919540225},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.02857142857142857},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.02631578947368421},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}}}}}}},"p":{"docs":{},"i":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}}},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":2.55}}}},"u":{"docs":{},"t":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{},";":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.030612244897959183}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":2.010869565217391}}}}}},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":1.4439560439560437},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":1.6836158192090394}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":2.010869565217391},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.01904761904761905}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.021739130434782608}}}}}}}}}}}}}}},";":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"2":{"docs":{},"^":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"如":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"汉":{"docs":{},"诺":{"docs":{},"塔":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}},"docs":{}}}}}}}}},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.02857142857142857}},"[":{"2":{"5":{"6":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}},"docs":{}},"docs":{}},"docs":{},"]":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.006607929515418502},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":2.0095238095238095}}}}}}},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.0297029702970297}}}}},")":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}},";":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}},"u":{"docs":{},"r":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.014285714285714285},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.046153846153846156},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0392156862745098},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.02666666666666667},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02}},"r":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.02575107296137339}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.030042918454935622}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}},")":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.014285714285714285},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179}},";":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.046153846153846156},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808}}},".":{"docs":{},"v":{"docs":{"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}},";":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}},";":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}},"}":{"docs":{"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.013333333333333334}}}}}}}}},";":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179}},"}":{"docs":{"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.02666666666666667}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.012738853503184714},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}},"i":{"docs":{},"m":{"docs":{},"b":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":3.3400900900900896}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514}}}}}},"i":{"docs":{},"i":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"，":{"docs":{},"改":{"docs":{},"改":{"docs":{},"条":{"docs":{},"件":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}}}}}}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":2.5425531914893615},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":2.017543859649123}},"e":{"docs":{},":":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}}},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.036231884057971016}}}},"c":{"docs":{},"h":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":3.3365180467091293}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}},":":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}}},":":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}},";":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.009554140127388535}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.02459016393442623},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.043478260869565216},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}}},"y":{"docs":{},";":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}}}}},"l":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":2.5256410256410255}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564}}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.02459016393442623}},";":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}}}}},"d":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997}},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},"e":{"docs":{},"f":{"docs":{"others.html":{"ref":"others.html","tf":0.023622047244094488},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.011235955056179775},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.025252525252525252},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.02097902097902098},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.028662420382165606},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.030042918454935622},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.02247191011235955},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.014563106796116505},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":2.0112359550561796},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":2.0126582278481013},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.038461538461538464}},":":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},")":{"docs":{"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.038461538461538464}}}}}},"c":{"docs":{},"i":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}},"l":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}},"e":{"docs":{},"t":{"docs":{"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":2.0555555555555554},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":2.537037037037037}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":0.05555555555555555}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.029850746268656716},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}}}}}}}}}},":":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":2.504291845493562},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":3.343537414965986}}}}}},"q":{"docs":{},"u":{"docs":{"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025}}}}},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"others.html":{"ref":"others.html","tf":0.007874015748031496},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025}}}}}},"x":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}},"f":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.015748031496062992}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.015748031496062992}}}}}}}}},",":{"docs":{"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.03389830508474576}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}},"[":{"docs":{},"]":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.006993006993006993},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.02097902097902098},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.05217391304347826},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.037037037037037035}}}}},"l":{"docs":{},"l":{"docs":{},",":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},",":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176}}}}},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176}}}}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.018691588785046728},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.015748031496062992},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232}}}}}}}},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},",":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.011013215859030838}}}}}}}}}}}},")":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.023255813953488372}}}}}}}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},",":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.00881057268722467}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},",":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.00881057268722467}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.00881057268722467}}}}}}}}}}}}}}},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"m":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":2.5273972602739727},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":2.014925373134328},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":1.6820512820512818},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":2.0476190476190474},"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":1.7291666666666665},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}}}}},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.014285714285714285},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.03076923076923077},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.02054794520547945},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}},"y":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.02054794520547945}},";":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}}}}}}},";":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}},",":{"docs":{"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}},"c":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}}},"f":{"docs":{},"f":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.017699115044247787}},"e":{"docs":{},"r":{"docs":{"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}}},")":{"docs":{},";":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":3.354609929078014}}}}}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}},"y":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.012738853503184714},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":2.0033557046979866},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":2.027027027027027},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":3.340909090909091},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":2.0142857142857142},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":2.021276595744681},"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":3.3888888888888884},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.024},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},".":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.016}}}}}}}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"d":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"对":{"docs":{},"输":{"docs":{},"入":{"docs":{},"n":{"docs":{},"进":{"docs":{},"行":{"docs":{},"减":{"docs":{},"半":{"docs":{},"+":{"docs":{},"奇":{"docs":{},"偶":{"docs":{},"判":{"docs":{},"断":{"docs":{},"。":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}}}},"如":{"docs":{},"测":{"docs":{},"试":{"docs":{},"用":{"docs":{},"例":{"1":{"docs":{},".":{"0":{"0":{"0":{"0":{"1":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}},"s":{"docs":{},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}},".":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.03508771929824561}}},"y":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806}}}}}}}},";":{"docs":{"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806}}}}}},"d":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":1.6735159817351597},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":2.0545454545454547}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.03636363636363636}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818}}}}}}}},";":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818}}}}}}}},";":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818}},";":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"r":{"docs":{},"p":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406}}}}}}}}}}}}}},"u":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":2.0072463768115942}}}}}}},"f":{"docs":{"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655}},"a":{"docs":{},"c":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}},"n":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997}},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},"会":{"docs":{},"减":{"docs":{},"少":{"docs":{},"空":{"docs":{},"间":{"docs":{},"开":{"docs":{},"销":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"会":{"docs":{},"增":{"docs":{},"加":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"，":{"docs":{},"从":{"docs":{},"而":{"docs":{},"增":{"docs":{},"加":{"docs":{},"了":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"和":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"开":{"docs":{},"销":{"docs":{},"。":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"用":{"docs":{},"于":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"的":{"docs":{},"自":{"docs":{},"动":{"docs":{},"扩":{"docs":{},"容":{"docs":{},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"说":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"有":{"1":{"6":{"docs":{},"个":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"，":{"docs":{},"当":{"1":{"2":{"docs":{},"(":{"1":{"6":{"docs":{},"*":{"0":{"docs":{},".":{"7":{"5":{"docs":{},")":{"docs":{},"个":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"装":{"docs":{},"满":{"docs":{},"后":{"docs":{},"，":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"会":{"docs":{},"自":{"docs":{},"动":{"docs":{},"增":{"docs":{},"加":{"docs":{},"到":{"3":{"2":{"docs":{},"个":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"。":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"s":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.020833333333333332},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882}},"e":{"docs":{},";":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.031496062992125984},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.010309278350515464},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.015418502202643172},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}},"s":{"docs":{},"t":{"docs":{"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.05714285714285714},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.0425531914893617},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.03508771929824561},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.023529411764705882},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.023529411764705882},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0273972602739726}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0273972602739726}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941}}}}}}}},":":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.02054794520547945}}}}}}}},",":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}},":":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":2.5136986301369864},"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}},"k":{"docs":{},"t":{"docs":{},"h":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154}}}}}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0410958904109589}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"f":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"1":{"docs":{},",":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}},"2":{"docs":{},",":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}},"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}}}}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":2.019047619047619}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}}},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}},"(":{"1":{"docs":{},")":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.02027027027027027}}}},"2":{"docs":{},")":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514}},"代":{"docs":{},"表":{"docs":{},"从":{"docs":{},"三":{"docs":{},"级":{"docs":{},"台":{"docs":{},"阶":{"docs":{},"可":{"docs":{},"以":{"docs":{},"跳":{"docs":{},"一":{"docs":{},"级":{"docs":{},"到":{"docs":{},"达":{"docs":{},"四":{"docs":{},"级":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"从":{"docs":{},"二":{"docs":{},"级":{"docs":{},"台":{"docs":{},"阶":{"docs":{},"跳":{"docs":{},"两":{"docs":{},"级":{"docs":{},"跳":{"docs":{},"到":{"docs":{},"四":{"docs":{},"级":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"结":{"docs":{},"果":{"docs":{},"为":{"docs":{},"两":{"docs":{},"数":{"docs":{},"之":{"docs":{},"和":{"docs":{},"。":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"3":{"docs":{},")":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.02702702702702703}}}},"4":{"docs":{},")":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514}}}},"docs":{},"n":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808}}}}}},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.016}}}}}},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.041666666666666664},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}},":":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}},")":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}},";":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}},"|":{"docs":{},"|":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}},")":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":1.6862745098039214}},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549}}}}}}}}}}}}}}}}},"g":{"docs":{},"c":{"docs":{},"d":{"2":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}},"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818}}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.020618556701030927},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.021739130434782608}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.020618556701030927},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.010309278350515464},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}},"n":{"docs":{},"t":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}}}}},"j":{"docs":{},")":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}},")":{"docs":{"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.05}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.027522935779816515}},";":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}},";":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}}}}}}}}}},"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"x":{"docs":{},"]":{"docs":{},"[":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"y":{"docs":{},"]":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101}}}}}}}}}}}}}}}}},"t":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.020316027088036117},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.02631578947368421}},")":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}},";":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.004514672686230248}}},"，":{"docs":{},"不":{"docs":{},"再":{"docs":{},"对":{"docs":{},"这":{"docs":{},"些":{"docs":{},"元":{"docs":{},"素":{"docs":{},"进":{"docs":{},"行":{"docs":{},"递":{"docs":{},"归":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}},"h":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}},"a":{"docs":{},"n":{"docs":{},"o":{"docs":{},"i":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},"3":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},"docs":{},"n":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997}},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}},"s":{"docs":{},"h":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.01904761904761905}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":3.343537414965986}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.018867924528301886},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.018867924528301886},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.05}}}}}}}},"[":{"docs":{},"c":{"docs":{},"h":{"docs":{},"]":{"docs":{},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},")":{"docs":{},":":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}}}}}},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421}}}}}}}}}}}}},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}}}}}}}}}}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},",":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.03125}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}}}}},":":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}},"m":{"docs":{"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":3.354609929078014}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.016}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},".":{"docs":{},"w":{"docs":{},"i":{"docs":{},"k":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"w":{"docs":{},"i":{"docs":{},"k":{"docs":{},"i":{"docs":{},"/":{"docs":{},"b":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{},"r":{"docs":{},"%":{"docs":{},"e":{"2":{"docs":{},"%":{"8":{"0":{"docs":{},"%":{"9":{"3":{"docs":{},"m":{"docs":{},"o":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"_":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"_":{"docs":{},"a":{"docs":{},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"2":{"0":{"1":{"3":{"docs":{},"/":{"1":{"0":{"docs":{},"/":{"docs":{},"m":{"docs":{},"a":{"docs":{},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"k":{"docs":{},"m":{"docs":{},"p":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"c":{"docs":{},".":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"/":{"docs":{},"h":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"%":{"2":{"0":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"d":{"docs":{},"f":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"k":{"docs":{},"e":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"z":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"/":{"docs":{},"?":{"docs":{},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},"=":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"+":{"docs":{},"l":{"docs":{},">":{"docs":{},"x":{"docs":{},"，":{"docs":{},"由":{"docs":{},"其":{"docs":{},"中":{"docs":{},"的":{"docs":{},"h":{"docs":{},"和":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.029411764705882353},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02142857142857143},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082}},")":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.022727272727272728},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.029850746268656716},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941}},":":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176}}},";":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.029411764705882353},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.014285714285714285},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.05970149253731343},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}},";":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.014285714285714285},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.029850746268656716}}}}}}},",":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358}},")":{"docs":{"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941}}}}}}},":":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.029411764705882353},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}},";":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.03409090909090909},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.04285714285714286},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.04477611940298507},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.03076923076923077},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.03636363636363636},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863}}},",":{"docs":{"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.03508771929824561},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02142857142857143},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.023529411764705882},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.05},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}},"a":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818}},",":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.03636363636363636}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818}}}}}}}},";":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818}}}},"b":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.03636363636363636}},")":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.03636363636363636}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818}}}}}}}},";":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818}}}}},"p":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}},"r":{"docs":{},"e":{"docs":{},".":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353}}}}}}}}},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},")":{"docs":{},"当":{"docs":{},"前":{"docs":{},"计":{"docs":{},"算":{"docs":{},"的":{"docs":{},"面":{"docs":{},"积":{"docs":{},"，":{"docs":{},"全":{"docs":{},"局":{"docs":{},"变":{"docs":{},"量":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"存":{"docs":{},"放":{"docs":{},"最":{"docs":{},"大":{"docs":{},"面":{"docs":{},"积":{"docs":{},"。":{"docs":{},"i":{"docs":{},"前":{"docs":{},"进":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"是":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"。":{"docs":{},"在":{"docs":{},"大":{"docs":{},"循":{"docs":{},"环":{"docs":{},"i":{"docs":{"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353}}}}}}}}}},"i":{"docs":{},"]":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"相":{"docs":{},"反":{"docs":{},"。":{"docs":{"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353}}}}}}}}}}}}}}}},"d":{"docs":{},",":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}},"i":{"docs":{},")":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.02247191011235955},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"当":{"docs":{},"前":{"docs":{},"列":{"docs":{},"不":{"docs":{},"可":{"docs":{},"等":{"docs":{},"于":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"列":{"docs":{},"i":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}},";":{"docs":{"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}}},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":3.348958333333333},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":2.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":2.0217391304347827}}}}}}}}}},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":2.5238095238095237},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":2.006666666666667}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808}}}}}}}}}}}}}}}}}},":":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},",":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}},"n":{"docs":{},"t":{"docs":{},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.013333333333333334}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.013333333333333334}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02}}}}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}},"t":{"docs":{"others.html":{"ref":"others.html","tf":0.007874015748031496},"array.html":{"ref":"array.html","tf":0.03651685393258427},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.07046979865771812},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.05405405405405406},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.04054054054054054},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.033707865168539325},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.011235955056179775},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.04017857142857143},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.03787878787878788},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.055944055944055944},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.046511627906976744},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.045454545454545456},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.029850746268656716},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.06896551724137931},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0684931506849315},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.039603960396039604},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.031746031746031744},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02142857142857143},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.020833333333333332},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.041401273885350316},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.05},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.030042918454935622},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0273972602739726},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.05217391304347826},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.08641975308641975},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.046511627906976744},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.04},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.0379746835443038},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.05154639175257732},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.05434782608695652},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.04838709677419355},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.019417475728155338},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.02666666666666667},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.10638297872340426},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.10835214446952596},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.07894736842105263},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.046875},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.10344827586206896},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.11764705882352941},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.05714285714285714},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.039473684210526314},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.05084745762711865},"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":0.16666666666666666},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.09523809523809523},"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":0.0625},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.02857142857142857},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.03278688524590164},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.03278688524590164},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.06521739130434782},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.05232558139534884},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.016},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.043478260869565216},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.0379746835443038},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.03773584905660377},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.05128205128205128},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.05504587155963303},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.030837004405286344},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.032},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.06382978723404255},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.04838709677419355},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.035398230088495575},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.0851063829787234},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.01904761904761905},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.04081632653061224}},"[":{"2":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}},"docs":{},"]":{"docs":{"array.html":{"ref":"array.html","tf":0.03089887640449438},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.0625},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.04716981132075472},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.047619047619047616},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.05},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.023255813953488372},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.02666666666666667},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.02857142857142857},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.035398230088495575},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}},"n":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}},"]":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"1":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}}}}},"docs":{}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}}}}}}}},"e":{"docs":{},"g":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":3.343234323432343},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":3.3415300546448083},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":2.521276595744681}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}},"x":{"docs":{"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085}}}}}}}}}}}}},"[":{"1":{"0":{"0":{"0":{"0":{"0":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"]":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}}},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":2.509433962264151},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":2.015873015873016},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":2.018181818181818}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.018867924528301886}}}}}}}},":":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}}}}}}}}}}},"n":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"array.html":{"ref":"array.html","tf":0.008426966292134831},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.05150214592274678},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.030612244897959183}},")":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571}},":":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463}}}},"是":{"docs":{},"从":{"0":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"k":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}},"docs":{}}},",":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}},":":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.012875536480686695}}}}}},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"合":{"docs":{},"并":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}},":":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":2.008771929824561},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":1.4401993355481726},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":1.4419047619047618}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"写":{"docs":{},"法":{"docs":{},"，":{"docs":{},"思":{"docs":{},"路":{"docs":{},"就":{"docs":{},"是":{"docs":{},"按":{"docs":{},"照":{"docs":{},"左":{"docs":{},"中":{"docs":{},"右":{"docs":{},"的":{"docs":{},"处":{"docs":{},"理":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"(":{"docs":{},"左":{"docs":{},"边":{"docs":{},"处":{"docs":{},"理":{"docs":{},"完":{"docs":{},"了":{"docs":{},"，":{"docs":{},"将":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"放":{"docs":{},"入":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"上":{"docs":{},"述":{"docs":{},"图":{"docs":{},"例":{"docs":{},"中":{"docs":{},"按":{"docs":{},"照":{"1":{"1":{"1":{"1":{"2":{"3":{"1":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"执":{"docs":{},"行":{"docs":{},")":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.023255813953488372}}}}}}}}}},")":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}},",":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.023255813953488372},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.02666666666666667}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334}}}}}}}}}}}}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372}}}}}},"a":{"docs":{},"s":{"docs":{"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":2.020408163265306}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}},"i":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":2.5085470085470085}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},")":{"docs":{},";":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.017094017094017096}}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"p":{"docs":{},"o":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.04}},"s":{"docs":{},")":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.013392857142857142},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":2.005050505050505},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"，":{"docs":{},"相":{"docs":{},"当":{"docs":{},"于":{"docs":{},"插":{"docs":{},"入":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"快":{"docs":{},"但":{"docs":{},"代":{"docs":{},"码":{"docs":{},"多":{"docs":{},"且":{"docs":{},"乱":{"docs":{},"。":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}},":":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385}}}}}}}}}},".":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}}}}}},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334}}},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728}}}}}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}}}}}}}}}}}}}}}},"y":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125}}}}}}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.020618556701030927}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/36_Valid_Sudoku.html":{"ref":"alg/36_Valid_Sudoku.html","tf":0.08333333333333333}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"[":{"docs":{},"j":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":3.3425076452599387}}}}}}},"]":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"当":{"docs":{},"前":{"docs":{},"行":{"docs":{},"不":{"docs":{},"可":{"docs":{},"以":{"docs":{},"等":{"docs":{},"于":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"行":{"docs":{},"：":{"docs":{},"i":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":1.689922480620155},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":2.014925373134328},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":2.015873015873016},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":2.017543859649123},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":1.6820512820512818},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":2.504854368932039},"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":1.7291666666666665},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":2.5256410256410255},"alg/137_Single_Number_II.html":{"ref":"alg/137_Single_Number_II.html","tf":2.75}},"i":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":2.5088495575221237}}}},"f":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266}}}}}},"s":{"2":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304}}}}}}}}}}}}},"docs":{}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"*":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.023255813953488372}},",":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.02666666666666667}}},";":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}}},"r":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}},")":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.023255813953488372}}},",":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.02666666666666667}}},";":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}},",":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.015418502202643172}}}},"j":{"docs":{"others.html":{"ref":"others.html","tf":0.013123359580052493},"array.html":{"ref":"array.html","tf":0.016853932584269662},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.0449438202247191},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.02631578947368421},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.05263157894736842},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.043478260869565216},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.02643171806167401}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"p":{"docs":{},"h":{"docs":{},"u":{"docs":{},"s":{"docs":{},"(":{"docs":{},"k":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}},"用":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"做":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"判":{"docs":{},"空":{"docs":{},"不":{"docs":{},"要":{"docs":{},"直":{"docs":{},"接":{"docs":{},"像":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"一":{"docs":{},"样":{"docs":{},"和":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"比":{"docs":{},"较":{"docs":{},"。":{"docs":{},"。":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.019823788546255508}}}},"k":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"array.html":{"ref":"array.html","tf":0.0056179775280898875},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":2.0069444444444446},"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":0.05555555555555555},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.047619047619047616},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.023255813953488372},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.0379746835443038},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.02643171806167401}},"e":{"docs":{},"y":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.01592356687898089},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.012738853503184714}}},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.07407407407407407},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.04081632653061224}},":":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}},";":{"docs":{"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035}}}},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.012738853503184714}}},";":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}},")":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.010067114093959731},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.06382978723404255},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}},";":{"docs":{"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.0425531914893617}}}},"=":{"4":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}},"docs":{}},"t":{"docs":{},"h":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":2.0033557046979866},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":2.027027027027027},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":2.021276595744681}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703}}}}}}}}}}}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085}}}}}}}}}}}}}}}}}}}},",":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}},";":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.05405405405405406}}},"m":{"docs":{},"p":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"i":{"docs":{},",":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}}}}}}},"停":{"docs":{},"在":{"docs":{},"坑":{"docs":{},"里":{"docs":{},"，":{"docs":{},"i":{"docs":{},"向":{"docs":{},"前":{"docs":{},"试":{"docs":{},"探":{"docs":{},"不":{"docs":{},"等":{"docs":{},"于":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":0.05555555555555555}}}}}}}}}}}}}}}}}}}}}},"l":{"1":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179}},";":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}}}}},",":{"docs":{"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.03571428571428571},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082}}}},"2":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.03571428571428571},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}},";":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}},")":{"docs":{"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.03571428571428571},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}},";":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}}}}},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"代":{"docs":{},"表":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"l":{"1":{"docs":{},"，":{"docs":{},"l":{"2":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"值":{"docs":{},"操":{"docs":{},"作":{"docs":{},"包":{"docs":{},"括":{"docs":{},"余":{"docs":{},"数":{"docs":{},"和":{"docs":{},"进":{"docs":{},"位":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"是":{"docs":{},"%":{"1":{"0":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"是":{"docs":{},"/":{"1":{"0":{"docs":{},"，":{"docs":{},"边":{"docs":{},"界":{"docs":{},"条":{"docs":{},"件":{"docs":{},"包":{"docs":{},"括":{"docs":{},"三":{"docs":{},"个":{"docs":{},"，":{"docs":{},"进":{"docs":{},"位":{"docs":{},"为":{"1":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"还":{"docs":{},"要":{"docs":{},"加":{"docs":{},"一":{"docs":{},"次":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"y":{"docs":{},"。":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}},"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.013422818791946308},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.02247191011235955},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.045454545454545456},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.01580135440180587},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.01904761904761905},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.03389830508474576},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.02857142857142857}},"e":{"docs":{},"n":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.01048951048951049}},")":{"docs":{},":":{"docs":{"others.html":{"ref":"others.html","tf":0.007874015748031496}}}}}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428}}}}}}}}},"a":{"docs":{},")":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.01048951048951049}}}},"h":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{},",":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}}}}}},"a":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}}},"b":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}},"]":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}}}}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.02054794520547945},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.046511627906976744},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}},",":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}},")":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}},";":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186}}}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":1.689922480620155},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":1.4389880952380951},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":2.025}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372}}}}}}}}}}}}}}}}}},"f":{"docs":{},"t":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.05063291139240506},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}},";":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549}}},",":{"docs":{"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.047058823529411764}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}},")":{"docs":{},")":{"docs":{},";":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"f":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":2.519230769230769},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":2.0161290322580645}},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}}}}}}}}}}}}}}}}}},",":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.02348993288590604},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.04195804195804196},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.034782608695652174},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.04938271604938271},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.056433408577878104},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"array.html":{"ref":"array.html","tf":0.014044943820224719}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":2.518867924528302}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":1.4439560439560437},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":1.6836158192090394}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.03076923076923077},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.006772009029345372}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":2.0033557046979866},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":2.027027027027027},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":3.346491228070175}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}}}}}}}}}}}}}},"r":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}},"s":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}},"_":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.02247191011235955},"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":5},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":2.514705882352941},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":2.5285714285714285},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":2.5425531914893615},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":2.017543859649123},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":2.018181818181818},"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":2.0555555555555554},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":2.0142857142857142},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":2.014925373134328},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":1.6820512820512818},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":3.3438596491228068},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":2.511764705882353},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":3.3407960199004973},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":2.5238095238095237},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":2.018181818181818},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":3.345098039215686},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":2.017857142857143},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":2.0208333333333335},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":2.55},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":2.504291845493562},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":1.6735159817351597},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.056074766355140186},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.05263157894736842},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.036585365853658534},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.05},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":1.6862745098039214},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.038461538461538464},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.030303030303030304},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.057692307692307696},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"]":{"docs":{},"]":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},")":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}},"docs":{}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.08823529411764706},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.07954545454545454},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.05714285714285714},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.03508771929824561},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.05454545454545454},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.04285714285714286},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.04477611940298507},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.06153846153846154},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.07368421052631578},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.047058823529411764},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.04477611940298507},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.09523809523809523},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.03636363636363636},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.08235294117647059},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.10714285714285714},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.06944444444444445},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0410958904109589},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.03278688524590164}},"e":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}},";":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}},",":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368}}}}},"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}}}}}}}}}},"升":{"docs":{},"级":{"docs":{},"版":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}},")":{"docs":{},";":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}},"s":{"docs":{},")":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.020833333333333332}}},",":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}}},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}},",":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463}}},".":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.02575107296137339}}},">":{"docs":{"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.046511627906976744},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.020833333333333332},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.019417475728155338},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.01904761904761905},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.02631578947368421}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669}}}}}}}}},"n":{"docs":{},"e":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":2.5044642857142856},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}},"/":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"4":{"7":{"1":{"1":{"3":{"docs":{},"/":{"docs":{},"a":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}},"docs":{}},"docs":{}},"2":{"6":{"8":{"docs":{},"/":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"k":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":5},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":2.514705882352941},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":2.5285714285714285},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":2.5425531914893615},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":2.017543859649123},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":2.018181818181818},"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":2.0555555555555554},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":2.007142857142857},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":2.511764705882353},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":2.018181818181818},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":2.55},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":2.53862660944206},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":1.6862745098039214}},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.06060606060606061},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.016},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.06976744186046512},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.03125},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.06060606060606061},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.016},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}}},"直":{"docs":{},"接":{"docs":{},"实":{"docs":{},"现":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"参":{"docs":{},"数":{"docs":{},"和":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"y":{"docs":{},"的":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"配":{"docs":{},"置":{"docs":{},"在":{"docs":{},"t":{"docs":{},"i":{"docs":{},"j":{"docs":{},"中":{"docs":{},"也":{"docs":{},"提":{"docs":{},"到":{"docs":{},"过":{"docs":{},"，":{"docs":{},"没":{"docs":{},"有":{"docs":{},"被":{"docs":{},"访":{"docs":{},"问":{"docs":{},"过":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"会":{"docs":{},"在":{"docs":{},"列":{"docs":{},"表":{"docs":{},"的":{"docs":{},"最":{"docs":{},"前":{"docs":{},"面":{"docs":{},"。":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.006993006993006993},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}},"/":{"2":{"docs":{},"不":{"docs":{},"会":{"docs":{},"溢":{"docs":{},"出":{"docs":{},"。":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}},"docs":{}},";":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}},"不":{"docs":{},"会":{"docs":{},"溢":{"docs":{},"出":{"docs":{},"，":{"docs":{},"又":{"docs":{},"因":{"docs":{},"为":{"docs":{},"l":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"l":{"docs":{},"+":{"docs":{},"(":{"docs":{},"h":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}}},"能":{"docs":{},"和":{"docs":{},"它":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"l":{"docs":{},"不":{"docs":{},"和":{"docs":{},"它":{"docs":{},"后":{"docs":{},"面":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"相":{"docs":{},"等":{"docs":{},"。":{"docs":{},"题":{"docs":{},"目":{"docs":{},"要":{"docs":{},"求":{"docs":{},"不":{"docs":{},"能":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"和":{"docs":{},"r":{"docs":{},"=":{"docs":{},"m":{"docs":{},"同":{"docs":{},"时":{"docs":{},"写":{"docs":{},"会":{"docs":{},"造":{"docs":{},"成":{"docs":{},"死":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"[":{"3":{"docs":{},",":{"4":{"docs":{},",":{"7":{"docs":{},",":{"9":{"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"1":{"docs":{},"]":{"docs":{},",":{"6":{"docs":{},")":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"要":{"docs":{},"在":{"docs":{},"l":{"docs":{},"=":{"docs":{},"r":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"跳":{"docs":{},"出":{"docs":{},"循":{"docs":{},"环":{"docs":{},"进":{"docs":{},"行":{"docs":{},"边":{"docs":{},"界":{"docs":{},"检":{"docs":{},"查":{"docs":{},"。":{"docs":{},"这":{"docs":{},"个":{"docs":{},"程":{"docs":{},"序":{"docs":{},"会":{"docs":{},"错":{"docs":{},"的":{"docs":{},"原":{"docs":{},"因":{"docs":{},"是":{"docs":{},"返":{"docs":{},"回":{"docs":{},"时":{"docs":{},"没":{"docs":{},"有":{"docs":{},"进":{"docs":{},"行":{"docs":{},"检":{"docs":{},"查":{"docs":{},"。":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"得":{"docs":{},"h":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}},"没":{"docs":{},"有":{"docs":{},"对":{"docs":{},"边":{"docs":{},"界":{"docs":{},"进":{"docs":{},"行":{"docs":{},"检":{"docs":{},"查":{"docs":{},"。":{"docs":{},"如":{"docs":{},"b":{"docs":{},"s":{"1":{"docs":{},"(":{"docs":{},"[":{"3":{"docs":{},",":{"4":{"docs":{},",":{"7":{"docs":{},",":{"9":{"docs":{},",":{"1":{"0":{"docs":{},",":{"1":{"1":{"docs":{},"]":{"docs":{},",":{"1":{"1":{"docs":{},")":{"docs":{},"返":{"docs":{},"回":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}},"docs":{}},"docs":{}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"h":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}},"h":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368}}},"r":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.041237113402061855}},"u":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":3.3365180467091293}},"c":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"2":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}},"docs":{},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}},":":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}},")":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.041237113402061855}}}},"c":{"docs":{},"a":{"docs":{},":":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}},"i":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}},"l":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.041237113402061855}}},"t":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.011286681715575621},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.02631578947368421}},"+":{"docs":{},"+":{"docs":{},";":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}},",":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}},";":{"docs":{"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.02631578947368421}}}},"p":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}},"m":{"docs":{"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353}}}},"m":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.03932584269662921},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.038461538461538464},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}},"a":{"docs":{},"x":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"array.html":{"ref":"array.html","tf":0.0056179775280898875},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":2.5044642857142856},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.06172839506172839},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"[":{"docs":{},"]":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678}}}}}}},"l":{"docs":{},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.02247191011235955}},",":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}},"i":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.02247191011235955}}}}}}}}},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}},";":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"2":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}},"docs":{},"(":{"docs":{},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":3.3678160919540225},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":2.5123456790123457},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":2.0112359550561796},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":2.5126582278481013}}}}},"n":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}},"i":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}},"s":{"docs":{},"]":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"]":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":3.3445692883895126},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":2.518181818181818},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":2.029850746268657}},")":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}},";":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}},",":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.029850746268656716}},";":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}}}}}}}}}},"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.013215859030837005}},";":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}}}},"注":{"docs":{},"意":{"docs":{},"判":{"docs":{},"空":{"docs":{},"，":{"docs":{},"防":{"docs":{},"止":{"docs":{},"列":{"docs":{},"数":{"docs":{},"为":{"0":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}},"docs":{}}}}}}}}}}},",":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.01818181818181818},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}}},"为":{"docs":{},"一":{"docs":{},"维":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"在":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"数":{"docs":{},"组":{"docs":{},"上":{"docs":{},"进":{"docs":{},"行":{"docs":{},"修":{"docs":{},"改":{"docs":{},"，":{"docs":{},"用":{"docs":{},"临":{"docs":{},"时":{"docs":{},"变":{"docs":{},"量":{"docs":{},"保":{"docs":{},"存":{"docs":{},"或":{"docs":{},"者":{"docs":{},"异":{"docs":{},"或":{"2":{"5":{"6":{"docs":{},"，":{"docs":{},"做":{"docs":{},"完":{"docs":{},"一":{"docs":{},"次":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"之":{"docs":{},"后":{"docs":{},"将":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"中":{"docs":{},"的":{"docs":{},"字":{"docs":{},"母":{"docs":{},"复":{"docs":{},"原":{"docs":{},"。":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"1":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}}}}}}}}}},"docs":{}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266}}}}}}}}}},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},",":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},",":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.010309278350515464}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.010309278350515464}}}}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"2":{"docs":{},",":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.021739130434782608}}}},"docs":{}}}}}}}},"p":{"docs":{"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.07142857142857142},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.031746031746031744},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571}}}}}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"j":{"docs":{},")":{"docs":{"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571}}}},"n":{"docs":{},")":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},",":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152}}},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.031746031746031744}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}},";":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":3.371212121212121}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{},"h":{"docs":{},"t":{"docs":{},"m":{"docs":{},"l":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"3":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}}}},"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"i":{"docs":{},"p":{"docs":{},"u":{"docs":{},"l":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":5.018518518518518}}}}}}},"s":{"docs":{},"k":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.017699115044247787}},")":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":2.017857142857143},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":2.0069444444444446},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":2.022727272727273}},"e":{"2":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}}}}}}},"l":{"1":{"docs":{},",":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}},"docs":{},",":{"docs":{"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}}}},":":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372},"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.03571428571428571}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"1":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728}}}}}}}}}},"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728}}}}}}}}}}}}}}},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"2":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}}}}}}}},"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},")":{"docs":{},"：":{"docs":{},"原":{"docs":{},"理":{"docs":{},"是":{"docs":{},"取":{"docs":{},"一":{"docs":{},"条":{"docs":{},"曲":{"docs":{},"线":{"docs":{},"f":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},"点":{"docs":{},"x":{"0":{"docs":{},"处":{"docs":{},"的":{"docs":{},"切":{"docs":{},"线":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"和":{"docs":{},"x":{"docs":{},"轴":{"docs":{},"相":{"docs":{},"交":{"docs":{},"后":{"docs":{},"新":{"docs":{},"点":{"docs":{},"x":{"1":{"docs":{},"，":{"docs":{},"再":{"docs":{},"取":{"docs":{},"f":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},"点":{"docs":{},"x":{"1":{"docs":{},"处":{"docs":{},"的":{"docs":{},"切":{"docs":{},"线":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"以":{"docs":{},"此":{"docs":{},"类":{"docs":{},"推":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"递":{"docs":{},"推":{"docs":{},"公":{"docs":{},"式":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},".":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}}}}}}},"i":{"docs":{},"n":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":3.3636363636363633}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266}}}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":2.0126582278481013}}}}}},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655}}}}}}}}}}}}}},"d":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.013422818791946308},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.043478260869565216},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.020316027088036117}},"d":{"docs":{},"l":{"docs":{"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":2.5285714285714285}},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}}}}}}}},",":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857}}}}}}}}}}}}}}}}},":":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.02727272727272727}}},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}},"e":{"docs":{},":":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.02727272727272727}}},"的":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"计":{"docs":{},"算":{"docs":{},"：":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"=":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},",":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.008695652173913044}}}},",":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.004514672686230248}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}}}}}}}}}},"y":{"docs":{},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}}}}}}}}}},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"3":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}}},"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}},"(":{"docs":{},")":{"docs":{"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"i":{"3":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}},"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},"(":{"docs":{},")":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}}}}}}}},",":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}},")":{"docs":{"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.02247191011235955}},";":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}},";":{"docs":{"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.028089887640449437},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.006993006993006993}}},"o":{"docs":{},"o":{"docs":{},"r":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.018867924528301886}},"e":{"docs":{},"d":{"docs":{},";":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}}}}}}}},"n":{"1":{"docs":{"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608}}},"docs":{"others.html":{"ref":"others.html","tf":0.013123359580052493},"array.html":{"ref":"array.html","tf":0.008426966292134831},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.02564102564102564},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.05263157894736842},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.03125},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.023255813953488372},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125}},")":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.016},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125}},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}},"，":{"docs":{},"数":{"docs":{},"据":{"docs":{},"过":{"docs":{},"大":{"docs":{},"栈":{"docs":{},"有":{"docs":{},"限":{"docs":{},"制":{"docs":{},"。":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}}}}}}}}}}},">":{"docs":{},"=":{"docs":{},"n":{"0":{"docs":{},">":{"docs":{},"=":{"1":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"f":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"=":{"docs":{},"n":{"0":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},"docs":{}}}}}}}}}}},"docs":{}}}},"docs":{}}}},"b":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}},"u":{"docs":{},"m":{"1":{"docs":{},",":{"docs":{"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608}}}}}}}}}}}},"2":{"docs":{},")":{"docs":{"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608}}}}}}}}}}}},"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.011235955056179775},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0273972602739726},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.02830188679245283},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.031746031746031744},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.03225806451612903},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.035398230088495575}},")":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.011235955056179775}},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}},"/":{"docs":{},"x":{"docs":{},"n":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":3.346491228070175},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.020202020202020204},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":2.5136986301369864},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":2.0161290322580645},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":2.5081967213114753},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":3.3425076452599387},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":2.508},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":3.3494623655913975},"alg/137_Single_Number_II.html":{"ref":"alg/137_Single_Number_II.html","tf":2.75},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":2.5088495575221237}},"s":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"不":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"地":{"docs":{},"方":{"docs":{},"在":{"docs":{},"于":{"docs":{},"循":{"docs":{},"环":{"docs":{},"。":{"docs":{"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}}}}}}},"s":{"1":{"docs":{},",":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.018867924528301886},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}},"[":{"docs":{},"i":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}}},"k":{"docs":{"array.html":{"ref":"array.html","tf":0.011235955056179775}}}},")":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}}},"2":{"docs":{},")":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.02830188679245283},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.031746031746031744}}},",":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}},")":{"docs":{},";":{"docs":{"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}}}}}}}}}},"[":{"docs":{},"j":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}},"]":{"docs":{},")":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}},"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.05405405405405406},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.03787878787878788},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0684931506849315},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.05263157894736842},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.047619047619047616},"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":0.0625},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.06451612903225806},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.05309734513274336}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.008695652173913044},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.02631578947368421},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.01904761904761905},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}},";":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186}}},")":{"docs":{},";":{"docs":{"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.008695652173913044}}}},"=":{"docs":{},"=":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}}}}}}}}}},"[":{"0":{"docs":{},"]":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}},";":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655}}},",":{"docs":{"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655}}}}},"1":{"docs":{},"]":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}},"2":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}},"docs":{},"i":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.02857142857142857},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}},"]":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.02857142857142857},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.02631578947368421}},";":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}},"j":{"docs":{"others.html":{"ref":"others.html","tf":0.010498687664041995},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}},"]":{"docs":{"others.html":{"ref":"others.html","tf":0.015748031496062992},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}},";":{"docs":{"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}}}},"l":{"docs":{},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.006772009029345372}},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.013422818791946308},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.01805869074492099}}},")":{"docs":{"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}},"r":{"docs":{},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.009029345372460496}}},")":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.004514672686230248}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372}}}}},"a":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678}}}}}}},"g":{"docs":{},"t":{"docs":{},"]":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}},"q":{"docs":{},".":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}}}}}}}}}}}},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.020134228187919462},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.013986013986013986},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.024691358024691357},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.02708803611738149},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":0.05555555555555555},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}},";":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.03125}}}},";":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.04424778761061947}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.05}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}}}}},"i":{"docs":{},"s":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101}}}}}}}}}}}}}}}}}},"，":{"docs":{},"当":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"分":{"docs":{},"别":{"docs":{},"为":{"0":{"docs":{},"和":{"docs":{},"其":{"docs":{},"他":{"docs":{},"数":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"把":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"筛":{"docs":{},"选":{"docs":{},"出":{"docs":{},"来":{"docs":{},"。":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}},"l":{"docs":{},"l":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02142857142857143},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.029850746268656716},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.03731343283582089},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.03529411764705882},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.03571428571428571},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"2_tree.html":{"ref":"2_tree.html","tf":0.02247191011235955},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.045454545454545456},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.031496062992125984},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.03389830508474576},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.014563106796116505},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.03389830508474576},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.01744186046511628},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.011013215859030838},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},";":{"docs":{"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.014285714285714285},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.023529411764705882},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.020833333333333332},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.023255813953488372},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.017094017094017096},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.013333333333333334},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"拿":{"docs":{},"例":{"docs":{},"题":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684}}}}}}}}}}}}},")":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.025252525252525252},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.03409090909090909},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.05454545454545454},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02142857142857143},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.029850746268656716},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.03529411764705882},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.029850746268656716},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.03636363636363636},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.03529411764705882},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.05357142857142857},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"2_tree.html":{"ref":"2_tree.html","tf":0.033707865168539325},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.06542056074766354},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.05263157894736842},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.04878048780487805},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0392156862745098},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.045454545454545456},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.047244094488188976},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.05084745762711865},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.042735042735042736},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.045454545454545456},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.038461538461538464},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.0379746835443038},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.020618556701030927},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.03260869565217391},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.030303030303030304},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.03225806451612903},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.05263157894736842},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.014563106796116505},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.02666666666666667},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.04666666666666667},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.03389830508474576},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.03278688524590164},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},";":{"docs":{"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}}},",":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}},"已":{"docs":{},"经":{"docs":{},"排":{"docs":{},"除":{"docs":{},"了":{"docs":{},"另":{"docs":{},"外":{"docs":{},"一":{"docs":{},"种":{"docs":{},"状":{"docs":{},"况":{"docs":{},"。":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}},",":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}},"a":{"docs":{},"n":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},":":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}},"e":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"先":{"docs":{},"移":{"docs":{},"除":{"docs":{},"头":{"docs":{},"部":{"docs":{},"，":{"docs":{},"再":{"docs":{},"移":{"docs":{},"除":{"docs":{},"中":{"docs":{},"间":{"docs":{},"。":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143}}}}}}}}}}}}}},"要":{"docs":{},"算":{"docs":{},"两":{"docs":{},"次":{"docs":{},"，":{"docs":{},"正":{"docs":{},"数":{"docs":{},"=":{"docs":{},"总":{"docs":{},"数":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}},"docs":{}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358}}},"设":{"docs":{},"置":{"docs":{},"d":{"docs":{},"u":{"docs":{},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856}}}}}}}}}}},"迭":{"docs":{},"代":{"docs":{"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941}}}},"级":{"docs":{},"别":{"docs":{},"递":{"docs":{},"归":{"docs":{},"三":{"docs":{},"连":{"docs":{},"其":{"docs":{},"一":{"docs":{},"：":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364}}}}}}}}},"二":{"docs":{},"：":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403}}}}}}}}},"三":{"docs":{},"：":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756}}}}}}}}}}}}}}}},"递":{"docs":{},"归":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}},"比":{"docs":{},"较":{"docs":{},"法":{"docs":{},"，":{"docs":{},"效":{"docs":{},"率":{"docs":{},"比":{"docs":{},"较":{"docs":{},"低":{"docs":{},"，":{"docs":{},"还":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"同":{"docs":{},"时":{"docs":{},"比":{"docs":{},"较":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"记":{"docs":{},"得":{"docs":{},"去":{"docs":{},"看":{"docs":{},"。":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}}}}}}}}}}}}}}}}}}}}}}}}},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"o":{"docs":{},"(":{"docs":{},"k":{"docs":{},"n":{"docs":{},")":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}}}}}}}}}}}}}}},"e":{"docs":{},"w":{"docs":{"array.html":{"ref":"array.html","tf":0.016853932584269662},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.010067114093959731},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.039473684210526314},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.04716981132075472},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.031746031746031744},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.042105263157894736},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.020833333333333332},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.05},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.028037383177570093},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.02631578947368421},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.03048780487804878},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.06976744186046512},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.03125},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.05},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.038461538461538464},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.019417475728155338},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.03333333333333333},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.06060606060606061},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.016},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.0379746835443038},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.02654867256637168},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.01904761904761905},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}},"docs":{}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}},"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}}}}},"i":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}},"y":{"docs":{},")":{"docs":{},";":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}}}},"x":{"docs":{},"t":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.020202020202020204},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808}},"(":{"docs":{},")":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},")":{"docs":{},":":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}},"_":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.04411764705882353},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}},"v":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}},")":{"docs":{},";":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},";":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}},":":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}}}}},":":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}},"/":{"2":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}},"次":{"docs":{},"，":{"docs":{},"用":{"docs":{},"字":{"docs":{},"典":{"docs":{},"记":{"docs":{},"录":{"docs":{},"下":{"docs":{},"各":{"docs":{},"个":{"docs":{},"斜":{"docs":{},"率":{"docs":{},"（":{"docs":{},"或":{"docs":{},"者":{"docs":{},"点":{"docs":{},"）":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{},"为":{"docs":{},"一":{"docs":{},"次":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"中":{"docs":{},"最":{"docs":{},"多":{"docs":{},"的":{"docs":{},"点":{"docs":{},"+":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"点":{"docs":{},"+":{"docs":{},"本":{"docs":{},"身":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},"a":{"docs":{},"t":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":2.0072463768115942}}}}},"n":{"docs":{},"e":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.02054794520547945}},":":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}},"d":{"docs":{},"e":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":2.5113636363636362},"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":2.0555555555555554},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02142857142857143},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.023529411764705882},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.01592356687898089},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.055793991416309016},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":1.6735159817351597},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.043859649122807015},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.054878048780487805},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":2.010869565217391},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":2.537037037037037}},"a":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.03636363636363636}}},"b":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.03636363636363636}}},")":{"docs":{"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":0.05555555555555555}},":":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":0.05555555555555555},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.014285714285714285},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":0.05555555555555555},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143}}}}}}},"v":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143}},"a":{"docs":{},"l":{"docs":{},";":{"docs":{"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":0.05555555555555555}}}}}}},";":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941}}}}}}},"v":{"docs":{"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":0.05555555555555555}},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}},";":{"docs":{"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}},":":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}},";":{"docs":{"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}},":":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}}}}},"方":{"docs":{},"法":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143}}}},";":{"docs":{"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.013333333333333334}}},"法":{"docs":{},"跳":{"docs":{},"过":{"docs":{},"重":{"docs":{},"复":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385}}}}}}}}}},"再":{"docs":{},"比":{"docs":{},"较":{"docs":{},"大":{"docs":{},"小":{"docs":{},"。":{"docs":{"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856}}}}}}}},"(":{"0":{"docs":{},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}}},"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},":":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}},":":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}}}}}}},"s":{"docs":{},":":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}},":":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863}}},";":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}},"]":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863}},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"范":{"docs":{},"围":{"docs":{},"（":{"docs":{},"不":{"docs":{},"能":{"docs":{},"是":{"0":{"docs":{},"）":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"出":{"docs":{},"界":{"docs":{},"，":{"docs":{},"如":{"docs":{},"测":{"docs":{},"试":{"docs":{},"用":{"docs":{},"例":{"docs":{},"[":{"0":{"docs":{},",":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}}},"t":{"docs":{},"h":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":1.6735159817351597}}}},"修":{"docs":{},"改":{"docs":{},"指":{"docs":{},"针":{"docs":{},"指":{"docs":{},"向":{"docs":{},"。":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}}}}}}},"o":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.022321428571428572}},"(":{"1":{"docs":{},")":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}},"docs":{},"n":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.022727272727272728}},"衡":{"docs":{},"量":{"docs":{},"了":{"docs":{},"算":{"docs":{},"法":{"docs":{},"的":{"docs":{},"增":{"docs":{},"长":{"docs":{},"曲":{"docs":{},"线":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"程":{"docs":{},"序":{"docs":{},"运":{"docs":{},"行":{"docs":{},"时":{"docs":{},"间":{"docs":{},"和":{"docs":{},"输":{"docs":{},"入":{"docs":{},"大":{"docs":{},"小":{"docs":{},"的":{"docs":{},"关":{"docs":{},"系":{"docs":{},"。":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}}}},"p":{"docs":{"others.html":{"ref":"others.html","tf":0.013123359580052493}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":1.689922480620155},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":1.4389880952380951},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":2.020408163265306}},"e":{"docs":{},"d":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}},"(":{"docs":{},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}}}}}},"u":{"docs":{},"t":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},":":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}}}},".":{"docs":{},"x":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},"y":{"docs":{},";":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},";":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},"}":{"docs":{},";":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}},":":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}}}},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"c":{"docs":{},")":{"docs":{},";":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":2.0545454545454547}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.03636363636363636}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818}}}}}}}},";":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818}}}}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818}}}}}}}}}}}}}}}}}}}},"n":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}},"t":{"docs":{},"o":{"docs":{"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}}}},"c":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}},"p":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288}},"o":{"docs":{},"w":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":5.012820512820513}},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}}}},":":{"docs":{},"直":{"docs":{},"接":{"docs":{},"x":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}},"e":{"docs":{},"r":{"docs":{"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":3.395833333333333}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":2.5223214285714284},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.022727272727272728}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}},")":{"docs":{},")":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}},"s":{"docs":{},")":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}},":":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}},":":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428}}}},",":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}},";":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}}}},";":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"处":{"docs":{},"理":{"docs":{},"重":{"docs":{},"复":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"越":{"docs":{},"界":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}},":":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.040268456375838924}}},"a":{"docs":{},")":{"docs":{"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703}}}}}}},"(":{"docs":{},")":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":2.0060975609756095},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":1.4419047619047618}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.018292682926829267}}}}}}}}}}}}}}}}}}},")":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334}}},",":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.05333333333333334}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":2.0072463768115942}}}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}},"e":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}}}}}}},"k":{"docs":{},")":{"docs":{},";":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}},"e":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.058823529411764705},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.03076923076923077},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.03529411764705882},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.023529411764705882}},",":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176}}},";":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.029411764705882353},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941}},";":{"docs":{"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941}}},".":{"docs":{},"v":{"docs":{"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808}}}}}}}}},"v":{"docs":{},"_":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":2.0093457943925235},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":1.4401993355481726}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.018691588785046728}}}}}}}}}}}}}}}}}}},",":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.023255813953488372}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"others.html":{"ref":"others.html","tf":0.007874015748031496},"array.html":{"ref":"array.html","tf":0.019662921348314606},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.020134228187919462},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.05405405405405406},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.02702702702702703},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.046875},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.02631578947368421},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.011235955056179775},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.013392857142857142},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.022727272727272728},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.015151515151515152},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.013986013986013986},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.01818181818181818},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0410958904109589},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.02830188679245283},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.029411764705882353},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.022727272727272728},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818},"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":0.05555555555555555},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02142857142857143},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.029850746268656716},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.023529411764705882},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.03571428571428571},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.041666666666666664},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.009554140127388535},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.05},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.037383177570093455},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.03508771929824561},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.03048780487804878},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.04081632653061224},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.034782608695652174},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.037037037037037035},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.023255813953488372},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.031496062992125984},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.03389830508474576},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.02564102564102564},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.038461538461538464},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.030927835051546393},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.03260869565217391},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.030303030303030304},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.03225806451612903},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.014563106796116505},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.02666666666666667},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.03076923076923077},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.0425531914893617},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.038461538461538464},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.024830699774266364},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.05263157894736842},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.01904761904761905},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.05084745762711865},"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":0.05555555555555555},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.047619047619047616},"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":0.0625},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.04285714285714286},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.01639344262295082},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.029069767441860465},"4_stack.html":{"ref":"4_stack.html","tf":0.05405405405405406},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.09090909090909091},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.04},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.043478260869565216},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.02531645569620253},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.013215859030837005},"alg/36_Valid_Sudoku.html":{"ref":"alg/36_Valid_Sudoku.html","tf":0.08333333333333333},"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.10526315789473684},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.024},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.03225806451612903},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.017699115044247787},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.0380952380952381},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.05102040816326531}}}}}},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}}}}}}}},"s":{"docs":{},"h":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}},"a":{"docs":{},",":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703}}}}}}},"(":{"1":{"docs":{},")":{"docs":{},",":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.016}}}}},"2":{"docs":{},")":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}},",":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}},"3":{"docs":{},")":{"docs":{},",":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.016}}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":3.3438596491228068},"3_partition.html":{"ref":"3_partition.html","tf":10.043478260869565}},"i":{"docs":{},"o":{"docs":{},"n":{"1":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}},"2":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}},"_":{"1":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}},"docs":{}}},"3":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}},"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368}},"e":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}},"s":{"docs":{},",":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.020833333333333332}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.004514672686230248}}}}}}}},"做":{"docs":{},"法":{"docs":{},"，":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"随":{"docs":{},"机":{"docs":{},"取":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},"作":{"docs":{},"为":{"docs":{},"基":{"docs":{},"准":{"docs":{},"将":{"docs":{},"其":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"成":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"左":{"docs":{},"边":{"docs":{},"比":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},"小":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"比":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{},"大":{"docs":{},"，":{"docs":{},"分":{"docs":{},"割":{"docs":{},"完":{"docs":{},"后":{"docs":{},"计":{"docs":{},"算":{"docs":{},"左":{"docs":{},"边":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"比":{"docs":{},"较":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"注":{"docs":{},"意":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"是":{"docs":{},"数":{"docs":{},"组":{"docs":{},"下":{"docs":{},"标":{"docs":{},")":{"docs":{},"和":{"docs":{},"k":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}},"函":{"docs":{},"数":{"docs":{},"的":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"是":{"docs":{},"选":{"docs":{},"定":{"docs":{},"一":{"docs":{},"个":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"作":{"docs":{},"为":{"docs":{},"基":{"docs":{},"准":{"docs":{},"，":{"docs":{},"比":{"docs":{},"它":{"docs":{},"小":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"放":{"docs":{},"在":{"docs":{},"左":{"docs":{},"边":{"docs":{},"，":{"docs":{},"大":{"docs":{},"的":{"docs":{},"放":{"docs":{},"在":{"docs":{},"右":{"docs":{},"边":{"docs":{},"。":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"可":{"docs":{},"以":{"docs":{},"有":{"docs":{},"多":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":2.5142857142857142}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":2.518867924528302}}}}}}}}},"i":{"docs":{},"r":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":2.5113636363636362}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":2.511764705882353}}}}}}}}},"t":{"docs":{},"h":{"docs":{"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":2.5454545454545454},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":3.359649122807017},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":2.529126213592233}},"(":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}},",":{"docs":{"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.045454545454545456},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.024271844660194174}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.014563106796116505}}}}}}}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}}}}}}},"那":{"docs":{},"道":{"docs":{},"题":{"docs":{},"差":{"docs":{},"不":{"docs":{},"多":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"步":{"docs":{},"可":{"docs":{},"以":{"docs":{},"先":{"docs":{},"写":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"返":{"docs":{},"回":{"docs":{},"所":{"docs":{},"有":{"docs":{},"路":{"docs":{},"径":{"docs":{},"的":{"docs":{},"列":{"docs":{},"表":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"为":{"docs":{},"空":{"docs":{},"。":{"docs":{},"也":{"docs":{},"是":{"docs":{},"分":{"docs":{},"三":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"讨":{"docs":{},"论":{"docs":{},"，":{"docs":{},"空":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"和":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"注":{"docs":{},"意":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"求":{"docs":{},"中":{"docs":{},"间":{"docs":{},"结":{"docs":{},"果":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"的":{"docs":{},"不":{"docs":{},"要":{"docs":{},"指":{"docs":{},"向":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"。":{"docs":{},"在":{"docs":{},"空":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"中":{"docs":{},"其":{"docs":{},"实":{"docs":{},"i":{"docs":{},"f":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.020316027088036117}},")":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.013544018058690745}}},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}},"法":{"docs":{},":":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}}}}}},";":{"docs":{"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856}}},"l":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.02666666666666667}},",":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}},")":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334}}}},",":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.046153846153846156},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.05084745762711865}}},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.016}},";":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}},"：":{"docs":{},"如":{"docs":{},"果":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"转":{"docs":{},"移":{"docs":{},"了":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"s":{"2":{"docs":{},"中":{"docs":{},"情":{"docs":{},"况":{"docs":{},"为":{"3":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},"，":{"docs":{},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"调":{"docs":{},"用":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"就":{"docs":{},"会":{"docs":{},"得":{"docs":{},"到":{"3":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"调":{"docs":{},"用":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"时":{"docs":{},"必":{"docs":{},"须":{"docs":{},"满":{"docs":{},"足":{"docs":{},"s":{"2":{"docs":{},"为":{"docs":{},"空":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"。":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.013422818791946308},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.011235955056179775},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.04895104895104895},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.023529411764705882},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.011286681715575621},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.01904761904761905},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.03389830508474576},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.02857142857142857}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}},"e":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.007874015748031496}}}},"1":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},"docs":{},"i":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463}},")":{"docs":{},":":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}}}},"n":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}},")":{"docs":{},":":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},")":{"docs":{},":":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.03125},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.004514672686230248}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}},")":{"docs":{},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}},";":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":2.5294117647058822}}}}},"e":{"docs":{"array.html":{"ref":"array.html","tf":0.011235955056179775},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.039603960396039604},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.018867924528301886},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.018691588785046728},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.018292682926829267},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.041666666666666664},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.04838709677419355},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.014563106796116505},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.04918032786885246},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.03773584905660377},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.006607929515418502},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.016},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.0425531914893617},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.03225806451612903},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"others.html":{"ref":"others.html","tf":0.007874015748031496},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.02564102564102564},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288}}}}}}}},"s":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"others.html":{"ref":"others.html","tf":0.013123359580052493},"array.html":{"ref":"array.html","tf":0.0056179775280898875},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.020134228187919462},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.02027027027027027},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.02247191011235955},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.046875},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.05263157894736842},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.03932584269662921},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.017857142857142856},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.022727272727272728},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.045454545454545456},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.055944055944055944},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.02727272727272727},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0273972602739726},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.02830188679245283},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.058823529411764705},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.03409090909090909},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.0425531914893617},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.03508771929824561},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.03636363636363636},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02857142857142857},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.04477611940298507},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.023529411764705882},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.03636363636363636},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.023529411764705882},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.05555555555555555},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.01910828025477707},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.02575107296137339},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0410958904109589},"2_tree.html":{"ref":"2_tree.html","tf":0.02247191011235955},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.018691588785046728},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.018292682926829267},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.03125},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.061224489795918366},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.05217391304347826},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.04938271604938271},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.046511627906976744},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.02666666666666667},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.06818181818181818},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.09448818897637795},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.0847457627118644},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.05128205128205128},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.045454545454545456},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.056179775280898875},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.06329113924050633},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.08247422680412371},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.07608695652173914},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.06451612903225806},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.07894736842105263},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.024271844660194174},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.08},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.03333333333333333},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.09411764705882353},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.06153846153846154},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.05084745762711865},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.03278688524590164},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.023255813953488372},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.04},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.0379746835443038},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.027522935779816515},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.028634361233480177},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.032},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.0425531914893617},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.04838709677419355},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.02654867256637168},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.04081632653061224}},";":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.037383177570093455},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.03508771929824561},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.024390243902439025},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.030303030303030304},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.019417475728155338},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.011286681715575621},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}},"可":{"docs":{},"以":{"docs":{},"等":{"docs":{},"价":{"docs":{},"为":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}},"这":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{},"。":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}}},"的":{"docs":{},"实":{"docs":{},"现":{"docs":{},"方":{"docs":{},"式":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"到":{"docs":{},"比":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"多":{"docs":{},"了":{"docs":{},"些":{"docs":{},"代":{"docs":{},"码":{"docs":{},":":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"1":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}},")":{"docs":{},";":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}},".":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"2":{"docs":{},")":{"docs":{},";":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}}},"docs":{}}}}}}}}}}}}},"2":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}},")":{"docs":{},";":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}}},"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.02247191011235955},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.018691588785046728},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.018292682926829267},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.01639344262295082},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.006607929515418502},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403}}}}}}}}}}},"e":{"docs":{},"w":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.018691588785046728},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152}},")":{"docs":{},";":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}}}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513}}}}}}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}},"(":{"docs":{},")":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.0425531914893617},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}},":":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}},";":{"docs":{"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085}}}}}},")":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.015151515151515152},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.018691588785046728},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.02631578947368421},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.018292682926829267},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.03225806451612903},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.01639344262295082}},":":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}},";":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.04672897196261682},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.03508771929824561},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.024390243902439025},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.038461538461538464},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.045454545454545456},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516}}}},"[":{"0":{"docs":{},"]":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}},"1":{"docs":{},"]":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}},"docs":{},"i":{"docs":{},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"+":{"docs":{},"+":{"docs":{},"]":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}}}}}}}}}}}}},",":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.05339805825242718},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.07692307692307693}}}},"f":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":2.514705882352941},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":3.350282485875706},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":3.3415300546448083},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":2.0072463768115942}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.03389830508474576}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.01639344262295082}},"[":{"docs":{},"]":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},",":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.01744186046511628}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.01744186046511628}}}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":2.0214285714285714},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":2.014925373134328},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":1.6820512820512818},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.012738853503184714},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":1.6735159817351597},"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":3.3888888888888884},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":2.0476190476190474},"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":1.7291666666666665},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}},"e":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02142857142857143}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":0.05555555555555555}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.047619047619047616},"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":0.0625}}}}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}}}}}},"l":{"2":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.029850746268656716}},";":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358}}}},"docs":{}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":3.3407960199004973}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.045454545454545456},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.03389830508474576},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.06329113924050633},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":1.6858974358974357}},";":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266}}},")":{"docs":{"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882}},":":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}},";":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728}},";":{"docs":{"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288}},";":{"docs":{"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728}},")":{"docs":{"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288}},")":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}}}}}}},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}},")":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}},")":{"docs":{},";":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}}}}},":":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.01744186046511628}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},")":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.016778523489932886},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.006993006993006993},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.013888888888888888},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.05217391304347826},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.037037037037037035},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.03837471783295711},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.03389830508474576},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186}},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.024691358024691357},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.022573363431151242}}}},"]":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}},"o":{"docs":{},"w":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.056179775280898875},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.01818181818181818},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.029850746268656716},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}},"s":{"docs":{},",":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.028634361233480177}}}}},"o":{"docs":{},"t":{"1":{"docs":{},",":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}},"2":{"docs":{},")":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232}}}},"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.025252525252525252},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.03488372093023256},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":2.0161290322580645},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.03389830508474576}},")":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.018691588785046728},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.018292682926829267},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.02564102564102564},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.030927835051546393},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.03260869565217391},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232}},":":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.02247191011235955},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}},";":{"docs":{"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612}}}},",":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.018691588785046728},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.02912621359223301},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.02666666666666667},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.03529411764705882},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.03076923076923077},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.0425531914893617},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.04081632653061224},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.02564102564102564},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288}},";":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.017094017094017096},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288}}},",":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}},":":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.02247191011235955},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.02564102564102564},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.05084745762711865}},";":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385}}},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"再":{"docs":{},"看":{"docs":{},"看":{"docs":{},"递":{"docs":{},"归":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"写":{"docs":{},"的":{"docs":{},"很":{"docs":{},"有":{"docs":{},"道":{"docs":{},"理":{"docs":{"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288}}}},",":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}},":":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.014563106796116505}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.030303030303030304},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.014563106796116505},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.03076923076923077}},")":{"docs":{"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.03076923076923077}},";":{"docs":{"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669}}}},";":{"docs":{"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.03225806451612903},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085}}},"且":{"docs":{},"继":{"docs":{},"续":{"docs":{},"调":{"docs":{},"用":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"函":{"docs":{},"数":{"docs":{"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516}}}}}}}}}}}},"，":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"计":{"docs":{},"算":{"docs":{},"r":{"docs":{"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516}}}}}}}}}},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"减":{"docs":{},"去":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"后":{"docs":{},"调":{"docs":{},"用":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"。":{"docs":{"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421}}}}}}}}}}}}}}}}}},",":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}}}}}},":":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.020833333333333332},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.017094017094017096},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.019417475728155338},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882}}},";":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.017094017094017096},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.02666666666666667},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02666666666666667},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.03076923076923077},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.03389830508474576}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":1.689922480620155},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":3.3565891472868215}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}}}}}}}}}}},",":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.02097902097902098}}},";":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.009029345372460496}}},"h":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},";":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"其":{"docs":{},"实":{"docs":{},"会":{"docs":{},"同":{"docs":{},"时":{"docs":{},"改":{"docs":{},"变":{"docs":{},"l":{"docs":{},"和":{"docs":{},"r":{"docs":{},"h":{"docs":{},"，":{"docs":{},"结":{"docs":{},"果":{"docs":{},"就":{"docs":{},"变":{"docs":{},"成":{"1":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}},",":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.033707865168539325}}}}}}},"i":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}},"s":{"docs":{},")":{"docs":{},")":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}},"，":{"docs":{},"是":{"docs":{},"说":{"docs":{},"最":{"docs":{},"远":{"docs":{},"距":{"docs":{},"离":{"docs":{},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"左":{"docs":{},"边":{"docs":{},"最":{"docs":{},"大":{"docs":{},"深":{"docs":{},"度":{"docs":{},"+":{"docs":{},"右":{"docs":{},"边":{"docs":{},"最":{"docs":{},"大":{"docs":{},"深":{"docs":{},"度":{"docs":{},",":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"左":{"docs":{},"边":{"docs":{},"最":{"docs":{},"大":{"docs":{},"距":{"docs":{},"离":{"docs":{},",":{"docs":{},"右":{"docs":{},"边":{"docs":{},"最":{"docs":{},"大":{"docs":{},"距":{"docs":{},"离":{"docs":{},")":{"docs":{},")":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353}},"分":{"docs":{},"别":{"docs":{},"用":{"docs":{},"来":{"docs":{},"指":{"docs":{},"代":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"高":{"docs":{},"度":{"docs":{},"和":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"高":{"docs":{},"度":{"docs":{},"，":{"docs":{},"相":{"docs":{},"当":{"docs":{},"于":{"1":{"1":{"docs":{},"题":{"docs":{},"的":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},",":{"docs":{"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"移":{"docs":{},"动":{"docs":{},"的":{"docs":{},"区":{"docs":{},"域":{"docs":{},"。":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}}}}}},"s":{"1":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}},",":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}},";":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.022727272727272728},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}},"2":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304}},")":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}},";":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}},";":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}}},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}}}}}}},"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.01904761904761905}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}}}}},"f":{"docs":{},".":{"docs":{},"d":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}},")":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}},")":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}}}},")":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"(":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"=":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.012738853503184714}}},"[":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"]":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.01910828025477707}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"]":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}}}}}}}}},"p":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.020202020202020204}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102}}}}}}},":":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.020202020202020204}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.015151515151515152}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"p":{"docs":{},")":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}}}}},"i":{"docs":{},"z":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.012875536480686695}},"e":{"docs":{},":":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.012875536480686695}}}}}}},"_":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"_":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}},"_":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.009554140127388535}},"a":{"docs":{},"c":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.009554140127388535}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"_":{"docs":{},"l":{"docs":{},"p":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.034334763948497854}},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.009554140127388535}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.009554140127388535}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}},"u":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}},"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},",":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":2.005050505050505},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":3.3368298368298364},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":1.689922480620155},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":2.5090909090909093},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":2.014925373134328},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":2.020408163265306},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":1.4372670807453414},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":4.026666666666666},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":2.006666666666667},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":2.011764705882353},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":1.4439560439560437},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":3.335535976505139}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.006993006993006993},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.01818181818181818},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}}}}}}}}}}}}}},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.013333333333333334}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.013333333333333334}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.02666666666666667}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}}},"t":{"1":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}},")":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"2":{"docs":{},")":{"docs":{},";":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}},"docs":{}}}}}}}}}}}}}}}},"2":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}}}}}},"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.04716981132075472},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.1},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.017699115044247787},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}}}}}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"2":{"docs":{},")":{"docs":{},")":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}},"docs":{}}}}}},"，":{"docs":{},"很":{"docs":{},"乱":{"docs":{},"，":{"docs":{},"各":{"docs":{},"种":{"docs":{},"数":{"docs":{},"据":{"docs":{},"类":{"docs":{},"型":{"docs":{},"乱":{"docs":{},"转":{"docs":{},"。":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}}}}}}}},";":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}},"h":{"docs":{},"i":{"docs":{},"f":{"docs":{},"t":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"l":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":3.364583333333333}},"e":{"docs":{},"数":{"docs":{},"组":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}},"(":{"docs":{},")":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}}}}}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997},"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.015873015873015872},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}},";":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}},"(":{"docs":{},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}},")":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}}}},"g":{"docs":{},"n":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564}}}},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":2.519230769230769}}}}}}},"d":{"docs":{},"e":{"docs":{"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":1.6858974358974357}}}},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":3.3494623655913975},"alg/137_Single_Number_II.html":{"ref":"alg/137_Single_Number_II.html","tf":2.75},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":2.5088495575221237}},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.03225806451612903},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.017699115044247787}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"2":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.004514672686230248}}}}}}}}},"3":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.004514672686230248}}}}}}}}},"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":1.689922480620155},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":2.014925373134328},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":1.6820512820512818},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":2.5238095238095237},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":3.345098039215686},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":2.017857142857143},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":2.0069444444444446},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":1.4372670807453414},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":5.002257336343115},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":3.359649122807017},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":2.0476190476190474},"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":1.7291666666666665},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":2.5142857142857142}},":":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}},"适":{"docs":{},"合":{"docs":{},"链":{"docs":{},"表":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},")":{"docs":{},",":{"docs":{"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},")":{"docs":{},";":{"docs":{"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"t":{"docs":{},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.05263157894736842}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"b":{"docs":{},"y":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.02857142857142857}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.013392857142857142},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.05263157894736842}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.05263157894736842}}}}}}}}}}},"r":{"docs":{"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":3.3859649122807016}}},"s":{"docs":{},"u":{"docs":{},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.05263157894736842}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"r":{"docs":{},"t":{"2":{"docs":{},"(":{"docs":{},"x":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}},"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}}},"x":{"docs":{},")":{"docs":{"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":5.00561797752809}}}}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"array.html":{"ref":"array.html","tf":0.008426966292134831},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}},"r":{"docs":{},"t":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}},"e":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}}}}}}}}},"i":{"docs":{},"r":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":3.3400900900900896}}}},"c":{"docs":{},"k":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"4_stack.html":{"ref":"4_stack.html","tf":10.054054054054054},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":3.3636363636363633},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":2.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":2.0217391304347827},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.03773584905660377},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564}},".":{"docs":{"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.043478260869565216},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}},"(":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756}}}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513}}}}}}}},"b":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.050724637681159424}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}}}}}}}}}}},";":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}},"r":{"1":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}},"2":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"1":{"docs":{},")":{"docs":{},";":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}}},"docs":{}}}}}}}}}}}}}}}},"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.03125},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"array.html":{"ref":"array.html","tf":0.008426966292134831},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.05263157894736842},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":3.343234323432343},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":3.350282485875706},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":3.3985507246376807},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":2.0285714285714285}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608}}}}}}}}}},"f":{"docs":{},"f":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}}},"[":{"docs":{},"]":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"]":{"docs":{},";":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}}}}}}}}}}}}}},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.01904761904761905}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":2.027027027027027}}}}},"s":{"docs":{},")":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}},"t":{"docs":{},"r":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":3.348958333333333}},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}}}}},")":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}}},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}},"(":{"docs":{},")":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186}},";":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}}}}}}}}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}}},",":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.01762114537444934}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186}}}}}},";":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}},")":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}},"=":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808}}}}},"e":{"docs":{},"p":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.01744186046511628}}}},"h":{"docs":{},".":{"docs":{},".":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669}}}}}},")":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.03389830508474576},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}},";":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},")":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.03389830508474576}},"(":{"docs":{},")":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364}}}}}}}}}}}}}},"b":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}},"s":{"docs":{},")":{"docs":{},";":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}},"(":{"docs":{},"s":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":3.3678160919540225}}}}}}},"r":{"docs":{"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":2.5078740157480315}}}}}},"m":{"docs":{"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":2.0161290322580645},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":3.4385964912280698},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":2.533980582524272},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.02654867256637168},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":2.5425531914893615}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516}}}}}}}}}}}}}}}}},")":{"docs":{"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.024271844660194174}},":":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669}}},";":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.014563106796116505}}}},":":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.014563106796116505}}},";":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{},")":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}}}}}}}}}}}},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"异":{"docs":{},"或":{"docs":{},"，":{"docs":{},"慢":{"docs":{},"慢":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{"alg/36_Valid_Sudoku.html":{"ref":"alg/36_Valid_Sudoku.html","tf":3.4166666666666665},"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":3.3859649122807016}}}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},".":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"n":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"e":{"docs":{},"x":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}}}}}}}}},"s":{"docs":{},"b":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}},",":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}}}}}}}}}}},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":3.350282485875706}}}}}}}},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":2.5113636363636362},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.01805869074492099}}}}}}}},"p":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.022727272727272728}}}}}}}}}}}}}}},"函":{"docs":{},"数":{"docs":{},"：":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}}}}}}},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":3.3445692883895126}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179}}}}},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}}}},":":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.020202020202020204},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":2.021276595744681}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.05714285714285714},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.0425531914893617},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.05263157894736842},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.023529411764705882},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.023529411764705882},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.02054794520547945}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.02054794520547945}},";":{"docs":{"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.03508771929824561},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}}}}}}}}},";":{"docs":{"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941}}},")":{"docs":{"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.03508771929824561}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":2.5126582278481013}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":3.356060606060606}}}}},",":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.023622047244094488},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}}}}}}}}}},"[":{"docs":{},"l":{"docs":{},"]":{"docs":{"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288}},";":{"docs":{"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288}}}}},"r":{"docs":{},"]":{"docs":{"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288}},";":{"docs":{"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288}}}}}},"=":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}},"t":{"1":{"docs":{},";":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.045454545454545456}}},",":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728}}}}}}},"2":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.02247191011235955},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.045454545454545456}},")":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},";":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728}}}}}}}},"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.031496062992125984},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}},"(":{"0":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},"docs":{},"n":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}},")":{"docs":{"others.html":{"ref":"others.html","tf":0.005249343832020997}}},"/":{"2":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},"docs":{}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"'":{"docs":{},"x":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},"'":{"docs":{},",":{"docs":{},"'":{"docs":{},"x":{"docs":{},"=":{"docs":{},"[":{"docs":{},"]":{"docs":{},"'":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"e":{"docs":{},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406}},".":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"\"":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406}},"*":{"docs":{},"\"":{"docs":{},")":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406}}}}},"/":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406}}}}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.028985507246376812}}}}}}}},"h":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.012875536480686695}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},")":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}},",":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"k":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}},"s":{"docs":{},";":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},";":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}}}}},"s":{"1":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}}}},"2":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}},".":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"1":{"docs":{},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"docs":{},"i":{"docs":{},"z":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}},"e":{"docs":{},")":{"docs":{},";":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}}}}}},"e":{"docs":{},"t":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},";":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.02040816326530612}}}}}}}}}}}},"i":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},"x":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}},"q":{"docs":{"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}}}}}}}}}}}},")":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}},"r":{"docs":{},"d":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}},"m":{"docs":{},"p":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.02564102564102564},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.017094017094017096},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}}}}},"a":{"docs":{},"r":{"docs":{"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.046511627906976744},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}},")":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.027972027972027972},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.046511627906976744},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.02727272727272727},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}},":":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.01048951048951049}}},";":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.02097902097902098}}}},":":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.013986013986013986}}}}}},")":{"docs":{},":":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.01048951048951049}}}},":":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.01048951048951049}}}},"i":{"docs":{},"l":{"docs":{},")":{"docs":{"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612}},";":{"docs":{"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612}}}},";":{"docs":{"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612}}}}}},"w":{"docs":{},"o":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":2.509433962264151},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":2.015873015873016},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":2.018181818181818},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":2.017857142857143},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":2.022727272727273},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":2.5081967213114753},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.021739130434782608},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":3.364583333333333},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":2.521276595744681}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571}}}}}}}}}}},"刚":{"docs":{},"好":{"docs":{},"进":{"docs":{},"位":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"只":{"docs":{},"有":{"docs":{},"最":{"docs":{},"高":{"docs":{},"位":{"docs":{},"是":{"1":{"docs":{},"，":{"docs":{},"和":{"docs":{},"它":{"docs":{},"的":{"docs":{},"n":{"docs":{"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125}}}}}}}},"docs":{}}}}}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},";":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.01818181818181818},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.031496062992125984},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.03389830508474576},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.020618556701030927},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}},"e":{"docs":{},"e":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":2.005050505050505},"2_tree.html":{"ref":"2_tree.html","tf":10},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":2.0093457943925235},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":2.008771929824561},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":2.0060975609756095},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":1.689922480620155},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":1.4389880952380951},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":2.025},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":1.6862745098039214},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":2.020408163265306},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":1.4372670807453414},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":2.5123456790123457},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":1.4401993355481726},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":1.4419047619047618},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":3.356060606060606},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":2.5078740157480315},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":3.350282485875706},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":2.5085470085470085},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":2.022727272727273},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":2.519230769230769},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":2.0112359550561796},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":2.0126582278481013},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":2.5103092783505154},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":2.010869565217391},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":2.515151515151515},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":2.013333333333333},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":2.006666666666667},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":2.011764705882353},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":1.4439560439560437},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":1.6836158192090394},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":1.6858974358974357}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.015151515151515152},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.058823529411764705},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.08163265306122448},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.05217391304347826},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.037037037037037035},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.03488372093023256},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.02666666666666667},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.023622047244094488},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.06837606837606838},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.045454545454545456},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.04},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02666666666666667},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.03529411764705882},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.09230769230769231},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.05084745762711865}},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"[":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.017391304347826087}}}}}}},"a":{"docs":{},"x":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"[":{"docs":{},"p":{"docs":{},"l":{"docs":{},"]":{"docs":{},")":{"docs":{},";":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}},",":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}}},";":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02}},"替":{"docs":{},"换":{"docs":{},"成":{"docs":{},"两":{"docs":{},"句":{"docs":{},"判":{"docs":{},"断":{"docs":{},"。":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}},"很":{"docs":{},"像":{"docs":{},"，":{"docs":{},"把":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"弄":{"docs":{},"成":{"docs":{},"了":{"docs":{},"两":{"docs":{},"个":{"docs":{},"点":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"相":{"docs":{},"反":{"docs":{},"。":{"docs":{"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":2.0093457943925235},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":2.008771929824561},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":2.0060975609756095},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":1.689922480620155},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":1.4389880952380951},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":1.4401993355481726},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":1.4419047619047618}},"a":{"docs":{},"l":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"来":{"docs":{},"统":{"docs":{},"计":{"docs":{},"各":{"docs":{},"级":{"docs":{},"目":{"docs":{},"录":{"docs":{},"下":{"docs":{},"的":{"docs":{},"目":{"docs":{},"录":{"docs":{},"和":{"docs":{},"文":{"docs":{},"件":{"docs":{},"。":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":2.5294117647058822}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353}}}}}}}}},"n":{"docs":{},"s":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}},"i":{"docs":{},"m":{"docs":{},":":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}},")":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.047244094488188976}},")":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.015748031496062992}}},";":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.015748031496062992}}},"{":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.015748031496062992}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.015748031496062992}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.015748031496062992}}}}}}}},"x":{"docs":{"others.html":{"ref":"others.html","tf":0.01837270341207349},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.033707865168539325},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.04918032786885246},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085}},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.028089887640449437},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.01639344262295082},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}},"，":{"docs":{},"由":{"docs":{},"于":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125}}}}}}}}},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085}}},"=":{"1":{"docs":{},".":{"0":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"docs":{}}},"docs":{}},"^":{"2":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"docs":{}},"n":{"docs":{},"带":{"docs":{},"入":{"docs":{},"以":{"docs":{},"上":{"docs":{},"公":{"docs":{},"式":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}}}}}},";":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},">":{"docs":{},"h":{"docs":{},">":{"docs":{},"=":{"0":{"docs":{},"，":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}},"docs":{}}}},"l":{"docs":{},">":{"docs":{},"=":{"0":{"docs":{},"，":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}},"docs":{}}}}},"y":{"docs":{},"z":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"b":{"docs":{},"c":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}}}}}}}}},"{":{"0":{"docs":{},",":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}},"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"}":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}},"docs":{}}},"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}},"3":{"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"4":{"docs":{},"}":{"docs":{},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}},"4":{"docs":{},",":{"5":{"docs":{},"}":{"docs":{},";":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}},"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}},"docs":{"others.html":{"ref":"others.html","tf":0.007874015748031496},"array.html":{"ref":"array.html","tf":0.0449438202247191},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.026845637583892617},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.08108108108108109},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.033783783783783786},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.033707865168539325},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.0625},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.05263157894736842},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.02564102564102564},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.033707865168539325},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.026785714285714284},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.08333333333333333},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.045454545454545456},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.03496503496503497},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.046511627906976744},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.03636363636363636},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0684931506849315},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.05660377358490566},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.06349206349206349},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.029411764705882353},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.045454545454545456},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.05714285714285714},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.06382978723404255},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.07017543859649122},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.03636363636363636},"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":0.05555555555555555},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.05714285714285714},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.05970149253731343},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.07692307692307693},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.042105263157894736},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.058823529411764705},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.029850746268656716},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.047619047619047616},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.03636363636363636},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.047058823529411764},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.05357142857142857},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.05555555555555555},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.01910828025477707},"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.05},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863},"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.04672897196261682},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.05263157894736842},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.06707317073170732},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.046511627906976744},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.020833333333333332},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.05},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0392156862745098},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.04081632653061224},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.034782608695652174},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.037037037037037035},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.046511627906976744},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.05333333333333334},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.06818181818181818},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.031496062992125984},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.06779661016949153},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.03418803418803419},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.045454545454545456},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.038461538461538464},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.02531645569620253},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.041237113402061855},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.05434782608695652},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.045454545454545456},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.03225806451612903},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.024271844660194174},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.12},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.12},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.07407407407407407},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.07692307692307693},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.03389830508474576},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.0425531914893617},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.038461538461538464},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.033860045146726865},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.05263157894736842},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.02857142857142857},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.05084745762711865},"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":0.05555555555555555},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.047619047619047616},"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":0.0625},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.05714285714285714},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.03278688524590164},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.043478260869565216},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.029069767441860465},"4_stack.html":{"ref":"4_stack.html","tf":0.05405405405405406},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.08},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.06521739130434782},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.09420289855072464},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.02531645569620253},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.05660377358490566},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.011013215859030838},"alg/36_Valid_Sudoku.html":{"ref":"alg/36_Valid_Sudoku.html","tf":0.08333333333333333},"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.10526315789473684},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.032},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.0425531914893617},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.06451612903225806},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.07079646017699115},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.0425531914893617},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.0380952380952381},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.10204081632653061}},"/":{"docs":{},"/":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},"}":{"docs":{"others.html":{"ref":"others.html","tf":0.007874015748031496},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}},"\"":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}},"(":{"0":{"docs":{},",":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428}}}},"1":{"docs":{},",":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.017857142857142856}}}},"docs":{}},".":{"docs":{},".":{"docs":{},".":{"docs":{},"}":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}}},"}":{"docs":{"others.html":{"ref":"others.html","tf":0.010498687664041995},"array.html":{"ref":"array.html","tf":0.03932584269662921},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.03355704697986577},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703},"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.0449438202247191},"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.03125},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.039473684210526314},"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.10714285714285714},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0449438202247191},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.017857142857142856},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.08333333333333333},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.045454545454545456},"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.03496503496503497},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.01818181818181818},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0273972602739726},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.04716981132075472},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.06349206349206349},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.029411764705882353},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.045454545454545456},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.05714285714285714},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.06382978723404255},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.07017543859649122},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.03636363636363636},"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":0.05555555555555555},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.05714285714285714},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.05970149253731343},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.07692307692307693},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.058823529411764705},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.029850746268656716},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.03636363636363636},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.023529411764705882},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.034722222222222224},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.01592356687898089},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.04672897196261682},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.05263157894736842},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.06707317073170732},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0392156862745098},"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.04081632653061224},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.034782608695652174},"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.04938271604938271},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.03488372093023256},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.05333333333333334},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.06818181818181818},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.031496062992125984},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.06779661016949153},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.03418803418803419},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.045454545454545456},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.038461538461538464},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.02531645569620253},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.030927835051546393},"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.05434782608695652},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.045454545454545456},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.03225806451612903},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.024271844660194174},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.05333333333333334},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.12},"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.07692307692307693},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.03389830508474576},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.038461538461538464},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.022573363431151242},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.03389830508474576},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.05714285714285714},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.03278688524590164},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.01744186046511628},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.08},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.09420289855072464},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.05063291139240506},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.07547169811320754},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.045871559633027525},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.015418502202643172},"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.05263157894736842},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.032},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.0425531914893617},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.06451612903225806},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.07079646017699115},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.01904761904761905},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.10204081632653061}},";":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}},"一":{"docs":{},"些":{"docs":{},"递":{"docs":{},"归":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},"基":{"docs":{},"本":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"操":{"docs":{},"作":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}},"个":{"docs":{},"例":{"docs":{},"子":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}},"：":{"docs":{},"检":{"docs":{},"查":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"后":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},",":{"docs":{},"检":{"docs":{},"查":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"后":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"3":{"docs":{},")":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}},"docs":{}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}},"只":{"docs":{},"青":{"docs":{},"蛙":{"docs":{},"一":{"docs":{},"次":{"docs":{},"可":{"docs":{},"以":{"docs":{},"跳":{"docs":{},"上":{"1":{"docs":{},"级":{"docs":{},"台":{"docs":{},"阶":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"跳":{"docs":{},"上":{"2":{"docs":{},"级":{"docs":{},"…":{"docs":{},"…":{"docs":{},"它":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"跳":{"docs":{},"上":{"docs":{},"n":{"docs":{},"级":{"docs":{},"。":{"docs":{},"求":{"docs":{},"该":{"docs":{},"青":{"docs":{},"蛙":{"docs":{},"跳":{"docs":{},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"n":{"docs":{},"级":{"docs":{},"的":{"docs":{},"台":{"docs":{},"阶":{"docs":{},"总":{"docs":{},"共":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"种":{"docs":{},"跳":{"docs":{},"法":{"docs":{},"。":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}},"样":{"docs":{},"的":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"递":{"docs":{},"归":{"docs":{},"写":{"docs":{},"法":{"docs":{},":":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.006993006993006993}}}}}}}}}}}}},"开":{"docs":{},"始":{"docs":{},"的":{"docs":{},"实":{"docs":{},"现":{"docs":{},"，":{"docs":{},"拼":{"docs":{},"一":{"docs":{},"拼":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}}}}}},"下":{"docs":{},"面":{"docs":{},"是":{"docs":{},"s":{"docs":{},"q":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"1":{"0":{"0":{"docs":{},")":{"docs":{},"的":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"过":{"docs":{},"程":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}},"这":{"docs":{},"个":{"docs":{},"代":{"docs":{},"码":{"docs":{},"某":{"docs":{},"些":{"docs":{},"地":{"docs":{},"方":{"docs":{},"也":{"docs":{},"叫":{"docs":{},"双":{"docs":{},"路":{"docs":{},"快":{"docs":{},"排":{"docs":{},".":{"docs":{},".":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}},"代":{"docs":{},"码":{"docs":{},"运":{"docs":{},"行":{"docs":{},"时":{"docs":{},"间":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}},"片":{"docs":{},"段":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}},"其":{"docs":{},"他":{"docs":{"others.html":{"ref":"others.html","tf":10.00262467191601}},"简":{"docs":{},"单":{"docs":{},"推":{"docs":{},"论":{"docs":{},"：":{"docs":{},"递":{"docs":{},"归":{"docs":{},"输":{"docs":{},"入":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}},"的":{"docs":{},"坑":{"docs":{},"：":{"docs":{},"小":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"大":{"docs":{},"堆":{"docs":{},"。":{"docs":{},"。":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}}}}},":":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}},"实":{"docs":{},"就":{"docs":{},"是":{"docs":{},"求":{"docs":{},"路":{"docs":{},"径":{"docs":{},"的":{"docs":{},"变":{"docs":{},"形":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"确":{"docs":{},"定":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"函":{"docs":{},"数":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"为":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"分":{"docs":{},"情":{"docs":{},"况":{"docs":{},"讨":{"docs":{},"论":{"docs":{},"，":{"docs":{},"节":{"docs":{},"点":{"docs":{},"为":{"docs":{},"空":{"docs":{},"返":{"docs":{},"回":{"0":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"返":{"docs":{},"回":{"docs":{},"r":{"docs":{"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"冒":{"docs":{},"泡":{"docs":{},"排":{"docs":{},"序":{"docs":{},"：":{"docs":{},"i":{"docs":{},"代":{"docs":{},"表":{"docs":{},"需":{"docs":{},"要":{"docs":{},"进":{"docs":{},"行":{"docs":{},"两":{"docs":{},"两":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"(":{"docs":{},"所":{"docs":{},"以":{"docs":{},"边":{"docs":{},"界":{"docs":{},"是":{"docs":{},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"度":{"docs":{},"减":{"docs":{},"去":{"docs":{},"一":{"docs":{},")":{"docs":{},"，":{"docs":{},"j":{"docs":{},"代":{"docs":{},"表":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"的":{"docs":{},"需":{"docs":{},"要":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"初":{"docs":{},"值":{"docs":{},"点":{"docs":{},"x":{"docs":{},"不":{"docs":{},"为":{"docs":{},"负":{"docs":{},"数":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}}}}}},"取":{"docs":{},"二":{"docs":{},"阶":{"docs":{},"可":{"docs":{},"导":{"docs":{},"曲":{"docs":{},"线":{"docs":{},"f":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}}}}}}}},"初":{"docs":{},"始":{"docs":{},"值":{"docs":{},"x":{"0":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"docs":{}}}}},"最":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"1":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},":":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}}}}}},"docs":{}}}}}},"如":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}},"果":{"docs":{},"存":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"*":{"docs":{},"*":{"docs":{},"常":{"docs":{},"数":{"docs":{},"c":{"docs":{},"*":{"docs":{},"*":{"docs":{},">":{"0":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},"docs":{}}}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"这":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{},"话":{"docs":{},"需":{"docs":{},"要":{"docs":{},"在":{"docs":{},"s":{"docs":{},"l":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}},"不":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"长":{"docs":{},"度":{"docs":{},"和":{"docs":{},"范":{"docs":{},"围":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"设":{"docs":{},"置":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"并":{"docs":{},"去":{"docs":{},"重":{"docs":{},"，":{"docs":{},"时":{"docs":{},"间":{"docs":{},"空":{"docs":{},"间":{"docs":{},"均":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"要":{"docs":{},"找":{"docs":{},"的":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"数":{"docs":{},"字":{"docs":{},"大":{"docs":{},"于":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"总":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"空":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}}}}}},"其":{"docs":{},"叶":{"docs":{},"结":{"docs":{},"点":{"docs":{},"数":{"docs":{},"为":{"docs":{},"n":{"0":{"docs":{},",":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}},"docs":{}}}}}}}},"p":{"docs":{},",":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385}}}},"n":{"docs":{},"输":{"docs":{},"入":{"docs":{},"的":{"docs":{},"是":{"docs":{},"负":{"docs":{},"数":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"下":{"docs":{},">":{"docs":{},">":{"docs":{},">":{"docs":{},"和":{"docs":{},">":{"docs":{},">":{"docs":{},"的":{"docs":{},"区":{"docs":{},"别":{"docs":{},":":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}},"常":{"docs":{},"见":{"docs":{},"排":{"docs":{},"序":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}},"得":{"docs":{},"到":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"公":{"docs":{},"式":{"docs":{},"x":{"docs":{},"(":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{},"=":{"docs":{},"(":{"1":{"docs":{},"/":{"2":{"docs":{},")":{"docs":{},"*":{"docs":{},"(":{"docs":{},"x":{"docs":{},"n":{"docs":{},"+":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}}}}}}}},"行":{"docs":{},"或":{"docs":{},"者":{"docs":{},"列":{"docs":{},"每":{"docs":{},"位":{"docs":{},"的":{"docs":{},"和":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}}},"把":{"docs":{},"a":{"docs":{},"中":{"docs":{},"最":{"docs":{},"下":{"docs":{},"面":{"docs":{},"的":{"docs":{},"盘":{"docs":{},"子":{"docs":{},"移":{"docs":{},"动":{"docs":{},"到":{"docs":{},"c":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}},"的":{"docs":{},"(":{"docs":{},"n":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}},"b":{"docs":{},"中":{"docs":{},"(":{"docs":{},"n":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}},"推":{"docs":{},"出":{"docs":{},"通":{"docs":{},"项":{"docs":{},"公":{"docs":{},"式":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{},"：":{"docs":{},"先":{"docs":{},"从":{"docs":{},"后":{"docs":{},"面":{"docs":{},"拎":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"和":{"docs":{},"前":{"docs":{},"面":{"docs":{},"已":{"docs":{},"经":{"docs":{},"排":{"docs":{},"好":{"docs":{},"序":{"docs":{},"的":{"docs":{},"进":{"docs":{},"行":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"如":{"docs":{},"打":{"docs":{},"牌":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"摸":{"docs":{},"牌":{"docs":{},"。":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655}}},"^":{"2":{"docs":{},")":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}},"(":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"里":{"docs":{},"面":{"docs":{},"套":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"3":{"docs":{},")":{"docs":{},"(":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"里":{"docs":{},"面":{"docs":{},"套":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"再":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"创":{"docs":{},"建":{"docs":{},"单":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}}}}}}},"，":{"docs":{},"i":{"docs":{},"向":{"docs":{},"左":{"docs":{},"边":{"docs":{},"移":{"docs":{},"动":{"docs":{},"去":{"docs":{},"试":{"docs":{},"探":{"docs":{},"有":{"docs":{},"没":{"docs":{},"有":{"docs":{},"更":{"docs":{},"大":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"水":{"docs":{},"以":{"docs":{},"左":{"docs":{},"边":{"docs":{},"墙":{"docs":{},"壁":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"为":{"docs":{},"基":{"docs":{},"准":{"docs":{},"增":{"docs":{},"加":{"docs":{},"l":{"docs":{},"m":{"docs":{"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"最":{"docs":{},"大":{"docs":{},"公":{"docs":{},"约":{"docs":{},"数":{"docs":{},"和":{"docs":{},"最":{"docs":{},"小":{"docs":{},"公":{"docs":{},"倍":{"docs":{},"数":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}},"堆":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},"这":{"docs":{},"个":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"，":{"docs":{},"别":{"docs":{},"的":{"docs":{},"自":{"docs":{},"定":{"docs":{},"义":{"docs":{},"对":{"docs":{},"象":{"docs":{},"需":{"docs":{},"要":{"docs":{},"自":{"docs":{},"己":{"docs":{},"实":{"docs":{},"现":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"值":{"docs":{},"：":{"docs":{},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"1":{"2":{"7":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"6":{"5":{"5":{"3":{"5":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"1":{"docs":{},".":{"7":{"9":{"7":{"6":{"9":{"3":{"1":{"3":{"4":{"8":{"6":{"2":{"3":{"1":{"5":{"7":{"docs":{},"e":{"3":{"0":{"8":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"3":{"docs":{},".":{"4":{"0":{"2":{"8":{"2":{"3":{"5":{"docs":{},"e":{"3":{"8":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"2":{"1":{"4":{"7":{"4":{"8":{"3":{"6":{"4":{"7":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"9":{"2":{"2":{"3":{"3":{"7":{"2":{"0":{"3":{"6":{"8":{"5":{"4":{"7":{"7":{"5":{"8":{"0":{"7":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"3":{"2":{"7":{"6":{"7":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}},"直":{"docs":{},"观":{"docs":{},"的":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"新":{"docs":{},"建":{"docs":{},"复":{"docs":{},"制":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"i":{"docs":{},"的":{"docs":{},"取":{"docs":{},"值":{"docs":{},"范":{"docs":{},"围":{"docs":{},"：":{"0":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"后":{"docs":{},"将":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"相":{"docs":{},"加":{"docs":{"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564}}}}}}}}}}}}}}}},"小":{"docs":{},"值":{"docs":{},"：":{"docs":{},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"0":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"4":{"docs":{},".":{"9":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"1":{"docs":{},".":{"4":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"=":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}}}}}}},"桶":{"docs":{},"排":{"docs":{},"序":{"docs":{},"：":{"docs":{},"洗":{"docs":{},"扑":{"docs":{},"克":{"docs":{},"牌":{"docs":{},"，":{"docs":{},"先":{"docs":{},"按":{"docs":{},"花":{"docs":{},"色":{"docs":{},"分":{"docs":{},"成":{"docs":{},"四":{"docs":{},"堆":{"docs":{},"，":{"docs":{},"再":{"docs":{},"排":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}}}}}}}},"欧":{"docs":{},"几":{"docs":{},"里":{"docs":{},"得":{"docs":{},"算":{"docs":{},"法":{"docs":{},"(":{"docs":{},"e":{"docs":{},"u":{"docs":{},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}}}},"汉":{"docs":{},"诺":{"docs":{},"塔":{"docs":{},"：":{"docs":{},"可":{"docs":{},"以":{"docs":{},"对":{"docs":{},"比":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"分":{"docs":{},"为":{"docs":{},"三":{"docs":{},"步":{"docs":{},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}}}}}}}}}},"牛":{"docs":{},"顿":{"docs":{},"开":{"docs":{},"方":{"docs":{},"法":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"'":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}}}}}}}}}}},"简":{"docs":{},"单":{"docs":{},"程":{"docs":{},"序":{"docs":{},"分":{"docs":{},"析":{"docs":{},"：":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}},"递":{"docs":{},"归":{"docs":{},"程":{"docs":{},"序":{"docs":{},"分":{"docs":{},"析":{"docs":{},"：":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"先":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"三":{"docs":{},"个":{"docs":{},"点":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"写":{"docs":{},"出":{"docs":{},"来":{"docs":{},"。":{"docs":{"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728}}}}}}}}}}}}}}}}}}}}}},"约":{"docs":{},"瑟":{"docs":{},"夫":{"docs":{},"环":{"docs":{},"：":{"docs":{},"k":{"docs":{},":":{"docs":{},"数":{"docs":{},"到":{"docs":{},"的":{"docs":{},"人":{"docs":{},"消":{"docs":{},"失":{"docs":{},"，":{"docs":{},"n":{"docs":{},":":{"docs":{},"总":{"docs":{},"人":{"docs":{},"数":{"docs":{},"，":{"docs":{},"求":{"docs":{},"最":{"docs":{},"后":{"docs":{},"剩":{"docs":{},"下":{"docs":{},"的":{"docs":{},"人":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"设":{"docs":{},"f":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"和":{"docs":{},"g":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"为":{"docs":{},"两":{"docs":{},"个":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"f":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"=":{"docs":{},"o":{"docs":{},"(":{"docs":{},"g":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},")":{"docs":{},"成":{"docs":{},"立":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"是":{"docs":{},"：":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"定":{"docs":{},"精":{"docs":{},"度":{"docs":{},"范":{"docs":{},"围":{"docs":{"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}}},"置":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"指":{"docs":{},"针":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{},"(":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},"数":{"docs":{},"组":{"docs":{},"：":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"数":{"docs":{},"组":{"docs":{},"记":{"docs":{},"录":{"docs":{},"访":{"docs":{},"问":{"docs":{},"过":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}}}}}}}}}}}}}}},"证":{"docs":{},"明":{"2":{"docs":{},"n":{"docs":{},"+":{"1":{"0":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},":":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}},"docs":{}}},"越":{"docs":{},"靠":{"docs":{},"近":{"docs":{},"答":{"docs":{},"案":{"docs":{},"计":{"docs":{},"算":{"docs":{},"次":{"docs":{},"数":{"docs":{},"越":{"docs":{},"少":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"说":{"1":{"0":{"0":{"docs":{},"的":{"docs":{},"话":{"docs":{},"是":{"1":{"0":{"docs":{},"只":{"docs":{},"用":{"docs":{},"计":{"docs":{},"算":{"docs":{},"一":{"docs":{},"次":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"有":{"docs":{},"些":{"docs":{},"点":{"docs":{},"可":{"docs":{},"能":{"docs":{},"没":{"docs":{},"有":{"docs":{},"答":{"docs":{},"案":{"docs":{},"如":{"docs":{},"极":{"docs":{},"值":{"docs":{},"点":{"docs":{},"如":{"0":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"迭":{"docs":{},"代":{"docs":{},"公":{"docs":{},"式":{"docs":{},"x":{"docs":{},"(":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},")":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}},"docs":{}}}}}}},"：":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}},"选":{"docs":{},"择":{"docs":{},"排":{"docs":{},"序":{"docs":{},"：":{"docs":{},"从":{"docs":{},"后":{"docs":{},"面":{"docs":{},"拎":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"与":{"docs":{},"前":{"docs":{},"面":{"docs":{},"元":{"docs":{},"素":{"docs":{},"交":{"docs":{},"换":{"docs":{},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"人":{"docs":{},"眼":{"docs":{},"排":{"docs":{},"列":{"docs":{},"有":{"docs":{},"限":{"docs":{},"数":{"docs":{},"据":{"docs":{},"（":{"docs":{},"可":{"docs":{},"以":{"docs":{},"一":{"docs":{},"眼":{"docs":{},"看":{"docs":{},"出":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"如":{"1":{"docs":{},",":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"会":{"docs":{},"发":{"docs":{},"生":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{},"u":{"docs":{},"m":{"docs":{"others.html":{"ref":"others.html","tf":0.0026246719160104987},"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}}}}}}}}}}},"因":{"docs":{},"为":{"docs":{},"要":{"docs":{},"向":{"docs":{},"右":{"docs":{},"边":{"docs":{},"试":{"docs":{},"探":{"docs":{},"有":{"docs":{},"没":{"docs":{},"有":{"docs":{},"更":{"docs":{},"大":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"消":{"docs":{},"除":{"docs":{},"当":{"docs":{},"前":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"，":{"docs":{},"保":{"docs":{},"留":{"docs":{},"高":{"docs":{},"度":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"。":{"docs":{"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"&":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.02564102564102564},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.064},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.0425531914893617},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.017699115044247787},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.0625},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}},"&":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.02247191011235955},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.046511627906976744},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.0297029702970297},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.02142857142857143},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.015384615384615385},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.011764705882352941},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.014925373134328358},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.023529411764705882},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856},"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.06818181818181818},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.03937007874015748},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.05084745762711865},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"ref":"alg/129_Sum_Root_to_Leaf_Numbers.html","tf":0.016129032258064516},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.014563106796116505},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.023529411764705882},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.03076923076923077},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.004514672686230248},"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.02857142857142857},"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.02631578947368421},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125}}}},")":{"docs":{"array.html":{"ref":"array.html","tf":0.0056179775280898875},"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.02247191011235955},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"ref":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","tf":0.013333333333333334}},";":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}},"[":{"0":{"docs":{},",":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}},"1":{"0":{"docs":{},",":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}},"8":{"docs":{},",":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}},"docs":{},",":{"2":{"docs":{},",":{"1":{"docs":{},",":{"3":{"docs":{},",":{"2":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}},"docs":{}}},"docs":{}}},"docs":{}}},"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},",":{"8":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"9":{"docs":{},"]":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"]":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}},"docs":{}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}},"]":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}},"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.010067114093959731},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}},"2":{"3":{"docs":{},",":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}},"docs":{},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.013422818791946308},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}},"3":{"0":{"docs":{},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154}}}},"docs":{},",":{"3":{"docs":{},"]":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}},"5":{"docs":{},"]":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}},"9":{"docs":{},",":{"2":{"0":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"1":{"5":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}},"]":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154}}}},"4":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}},"6":{"docs":{},"]":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}},"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}},"5":{"docs":{},",":{"6":{"docs":{},",":{"7":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.011627906976744186}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"6":{"docs":{},",":{"7":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}},"7":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"8":{"docs":{},",":{"8":{"docs":{},",":{"7":{"docs":{},",":{"9":{"docs":{},",":{"2":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"4":{"docs":{},",":{"7":{"docs":{},"]":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"9":{"docs":{},",":{"2":{"docs":{},"]":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}}}},"docs":{}}},"docs":{}}},"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}},"]":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.020833333333333332},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345},"4_stack.html":{"ref":"4_stack.html","tf":0.05405405405405406},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"s":{"docs":{},")":{"docs":{},"{":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}},",":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}},"l":{"docs":{},",":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}},"[":{"0":{"docs":{},",":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}},"docs":{}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"]":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"]":{"docs":{},",":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.019417475728155338}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},",":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}}}}}}},"c":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}},"]":{"docs":{"array.html":{"ref":"array.html","tf":0.011235955056179775},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}},";":{"docs":{"array.html":{"ref":"array.html","tf":0.011235955056179775}}}},"v":{"1":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082}}},"2":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082}}},"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"array.html":{"ref":"array.html","tf":0.008426966292134831},"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":0.05555555555555555},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.009554140127388535},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.017167381974248927},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.018691588785046728},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.012195121951219513},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"alg/872_Leaf-Similar_Trees.html":{"ref":"alg/872_Leaf-Similar_Trees.html","tf":0.019230769230769232},"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085},"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.013544018058690745},"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.05263157894736842},"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.05084745762711865},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.01744186046511628},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608},"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.05263157894736842},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.02040816326530612}}}},"t":{"docs":{},"e":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152}}}}},"a":{"docs":{},"l":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.017167381974248927},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}},")":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.05},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.008583690987124463},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.09333333333333334},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.04},"alg/27_Remove_Element.html":{"ref":"alg/27_Remove_Element.html","tf":0.05555555555555555}},";":{"docs":{"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.02666666666666667},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02666666666666667}}},":":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.017167381974248927}}}},"u":{"docs":{"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.01910828025477707},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.017167381974248927},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}},"e":{"docs":{},")":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}},":":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.009554140127388535}}},";":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}},":":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}}}}},":":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.012875536480686695}}},"i":{"docs":{},"d":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":2.011764705882353},"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":2.518867924528302},"alg/36_Valid_Sudoku.html":{"ref":"alg/36_Valid_Sudoku.html","tf":3.4166666666666665}},".":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},":":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":1.6858974358974357}}}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.011013215859030838}},";":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.004405286343612335}}}}}}}}}}}}}}},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"开":{"docs":{},"头":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"串":{"docs":{},"串":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}},"从":{"docs":{},"前":{"docs":{},"向":{"docs":{},"后":{"docs":{},"合":{"docs":{},"并":{"docs":{},"两":{"docs":{},"个":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},":":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}}},"大":{"docs":{},"到":{"docs":{},"小":{"docs":{},"排":{"docs":{},"列":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}},"末":{"docs":{},"尾":{"docs":{},"开":{"docs":{},"始":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"于":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"赋":{"docs":{},"值":{"docs":{},"到":{"docs":{},"l":{"docs":{},"指":{"docs":{},"针":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"排":{"docs":{},"序":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"元":{"docs":{},"素":{"docs":{},"是":{"docs":{},"否":{"docs":{},"在":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"g":{"docs":{},")":{"docs":{},"中":{"docs":{},"得":{"docs":{},"到":{"docs":{},"连":{"docs":{},"通":{"docs":{},"分":{"docs":{},"量":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"（":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"或":{"docs":{},"者":{"docs":{},"不":{"docs":{},"在":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"中":{"docs":{},"）":{"docs":{},"。":{"docs":{"alg/817_Linked_List_Components.html":{"ref":"alg/817_Linked_List_Components.html","tf":0.05}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"典":{"docs":{},"序":{"docs":{},"最":{"docs":{},"大":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}},"法":{"docs":{},"，":{"docs":{},"将":{"docs":{},"原":{"docs":{},"字":{"docs":{},"典":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"和":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"转":{"docs":{},"换":{"docs":{},"，":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"次":{"docs":{},"数":{"docs":{},"组":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"和":{"docs":{},"当":{"docs":{},"前":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"。":{"docs":{"alg/1_2Sum.html":{"ref":"alg/1_2Sum.html","tf":0.03571428571428571}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"符":{"docs":{},"串":{"docs":{},"/":{"docs":{},"数":{"docs":{},"组":{"docs":{},"交":{"docs":{},"换":{"docs":{},":":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}}}}},"比":{"docs":{},"较":{"docs":{},":":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}},"的":{"docs":{},"每":{"docs":{},"一":{"docs":{},"位":{"docs":{},"有":{"docs":{},"三":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"符":{"docs":{},"号":{"docs":{},"和":{"docs":{},"空":{"docs":{},"格":{"docs":{},"。":{"docs":{"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{},"数":{"docs":{},"组":{"docs":{},"拆":{"docs":{},"分":{"docs":{},"成":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"3":{"docs":{},"，":{"docs":{},"和":{"2":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"并":{"docs":{},"求":{"docs":{},"出":{"docs":{},"各":{"docs":{},"部":{"docs":{},"分":{"docs":{},"的":{"docs":{},"和":{"docs":{},"。":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"等":{"docs":{},"分":{"docs":{},"，":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"函":{"docs":{},"数":{"docs":{},"和":{"2":{"1":{"docs":{},"题":{"docs":{},"一":{"docs":{},"样":{"docs":{"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"元":{"docs":{},"素":{"docs":{},"分":{"docs":{},"为":{"3":{"docs":{},"个":{"docs":{},"区":{"docs":{},"域":{"docs":{},"，":{"docs":{},"将":{"docs":{},"重":{"docs":{},"复":{"docs":{},"元":{"docs":{},"素":{"docs":{},"聚":{"docs":{},"集":{"docs":{},"到":{"docs":{},"中":{"docs":{},"间":{"docs":{},"部":{"docs":{},"分":{"docs":{},"(":{"docs":{},"l":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}},"微":{"docs":{},"秒":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}},"拆":{"docs":{},"分":{"docs":{},"数":{"docs":{},"组":{"docs":{},"并":{"docs":{},"求":{"docs":{},"和":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}},"数":{"docs":{},"组":{"docs":{"array.html":{"ref":"array.html","tf":10}},"b":{"docs":{},"合":{"docs":{},"并":{"docs":{},"到":{"docs":{},"a":{"docs":{},"后":{"docs":{},"面":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"新":{"docs":{},"数":{"docs":{},"组":{"docs":{},":":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}}}},"合":{"docs":{},"并":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}},"中":{"docs":{},"超":{"docs":{},"过":{"docs":{},"一":{"docs":{},"半":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}}}}},"和":{"docs":{},"链":{"docs":{},"表":{"docs":{},"：":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}},"：":{"docs":{},"长":{"docs":{},"度":{"docs":{},"确":{"docs":{},"定":{"docs":{},"，":{"docs":{},"随":{"docs":{},"机":{"docs":{},"读":{"docs":{},"写":{"docs":{},"，":{"docs":{},"容":{"docs":{},"易":{"docs":{},"实":{"docs":{},"现":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}}}}}}}}}}}}},"最":{"docs":{},"多":{"docs":{},"允":{"docs":{},"许":{"docs":{},"重":{"docs":{},"复":{"docs":{},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"度":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"2":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"度":{"docs":{},"。":{"docs":{"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":0.0625}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"相":{"docs":{},"加":{"docs":{},"：":{"2":{"docs":{},",":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}},"docs":{}}}},"的":{"docs":{},"位":{"docs":{},"数":{"docs":{},"和":{"docs":{},"范":{"docs":{},"围":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}}},"测":{"docs":{},"量":{"docs":{},"时":{"docs":{},"间":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}},"试":{"docs":{},"：":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}},"生":{"docs":{},"成":{"docs":{},"一":{"docs":{},"串":{"docs":{},"范":{"docs":{},"围":{"docs":{},"内":{"docs":{},"的":{"docs":{},"随":{"docs":{},"机":{"docs":{},"数":{"docs":{},"组":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}},"纳":{"docs":{},"秒":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{},"+":{"1":{"docs":{},"，":{"docs":{},"个":{"docs":{},"数":{"docs":{},"为":{"docs":{},"最":{"docs":{},"右":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"减":{"docs":{},"去":{"docs":{},"最":{"docs":{},"左":{"docs":{},"的":{"docs":{},"加":{"1":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}},"docs":{}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"间":{"docs":{},"隔":{"docs":{},"为":{"docs":{},"数":{"docs":{},"组":{"docs":{},"元":{"docs":{},"素":{"docs":{},"个":{"docs":{},"数":{"docs":{},"减":{"docs":{},"去":{"1":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}},"docs":{}}}}}}}}}}}},"需":{"docs":{},"要":{"docs":{},"分":{"docs":{},"清":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"，":{"docs":{},"长":{"docs":{},"度":{"docs":{},"（":{"docs":{},"范":{"docs":{},"围":{"docs":{},"，":{"docs":{},"个":{"docs":{},"数":{"docs":{},"）":{"docs":{},"，":{"docs":{},"第":{"docs":{},"k":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"间":{"docs":{},"隔":{"docs":{},"。":{"docs":{"array.html":{"ref":"array.html","tf":0.0028089887640449437}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"找":{"docs":{},"出":{"docs":{},"这":{"docs":{},"几":{"docs":{},"个":{"docs":{},"值":{"docs":{},"。":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}}}}}}}},"变":{"docs":{},"量":{"docs":{},"：":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},"指":{"docs":{},"针":{"docs":{},"代":{"docs":{},"表":{"docs":{},"宽":{"docs":{},"度":{"docs":{},"，":{"docs":{},"局":{"docs":{},"部":{"docs":{},"变":{"docs":{},"量":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":0.034482758620689655}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703},"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.015151515151515152},"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0273972602739726},"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.02830188679245283},"alg/350_Intersection_of_Two_Arrays_II.html":{"ref":"alg/350_Intersection_of_Two_Arrays_II.html","tf":0.031746031746031744},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.03636363636363636},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"2_tree.html":{"ref":"2_tree.html","tf":0.02247191011235955},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.014492753623188406},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.03225806451612903},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.035398230088495575},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},":":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.012738853503184714},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.02145922746781116},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.025477707006369428},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.02575107296137339},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.0136986301369863},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.009708737864077669},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.03125}}}}}}},"q":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.006711409395973154},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}},".":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.03076923076923077}}}}}},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.020833333333333332},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":2.024},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":2.0434782608695654},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.01834862385321101}},";":{"docs":{"alg/703_Kth_Largest_Element_in_a_Stream.html":{"ref":"alg/703_Kth_Largest_Element_in_a_Stream.html","tf":0.02702702702702703}}},".":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}},"docs":{}}}}},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"x":{"docs":{"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/637_Average_of_Levels_in_Binary_Tree.html":{"ref":"alg/637_Average_of_Levels_in_Binary_Tree.html","tf":0.025}}}}}}}}}},":":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"[":{"docs":{},"]":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.004514672686230248}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},",":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.009029345372460496}}}}}}}}}}}}}}}},")":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.03076923076923077},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.03389830508474576}},";":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.03389830508474576}}}},"的":{"docs":{},"值":{"docs":{},"比":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"都":{"docs":{},"小":{"docs":{},"就":{"docs":{},"去":{"docs":{},"左":{"docs":{},"边":{"docs":{},"找":{"docs":{},"，":{"docs":{},"反":{"docs":{},"之":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"p":{"docs":{},"q":{"docs":{},"有":{"docs":{},"一":{"docs":{},"方":{"docs":{},"的":{"docs":{},"值":{"docs":{},"等":{"docs":{},"于":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"p":{"docs":{},"q":{"docs":{},"分":{"docs":{},"散":{"docs":{},"在":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"的":{"docs":{},"两":{"docs":{},"边":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"一":{"docs":{},"路":{"docs":{},"返":{"docs":{},"回":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}}}},"使":{"docs":{},"用":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},"或":{"docs":{},"者":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},"方":{"docs":{},"法":{"docs":{},"时":{"docs":{},"会":{"docs":{},"进":{"docs":{},"行":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"维":{"docs":{},"护":{"docs":{},"一":{"docs":{},"个":{"docs":{},"小":{"docs":{},"堆":{"docs":{},"。":{"docs":{},"p":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},"方":{"docs":{},"法":{"docs":{},"移":{"docs":{},"除":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"最":{"docs":{},"高":{"docs":{},"的":{"docs":{},"点":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"重":{"docs":{},"写":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"第":{"docs":{},"二":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"上":{"docs":{},"只":{"docs":{},"要":{"docs":{},"x":{"docs":{},"y":{"docs":{},"相":{"docs":{},"等":{"docs":{},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"就":{"docs":{},"算":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"重":{"docs":{},"写":{"docs":{},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"中":{"docs":{},"的":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"和":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"方":{"docs":{},"法":{"docs":{},"在":{"docs":{},"每":{"docs":{},"次":{"docs":{},"存":{"docs":{},"储":{"docs":{},"或":{"docs":{},"者":{"docs":{},"查":{"docs":{},"找":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"计":{"docs":{},"算":{"docs":{},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"存":{"docs":{},"放":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"用":{"docs":{},"来":{"docs":{},"比":{"docs":{},"较":{"docs":{},"两":{"docs":{},"个":{"docs":{},"点":{"docs":{},"的":{"docs":{},"x":{"docs":{},",":{"docs":{},"y":{"docs":{},"是":{"docs":{},"否":{"docs":{},"相":{"docs":{},"等":{"docs":{},"。":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"左":{"docs":{},"边":{"docs":{},"，":{"docs":{},"中":{"docs":{},"间":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"三":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"进":{"docs":{},"行":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"选":{"docs":{},"择":{"docs":{},"其":{"docs":{},"中":{"docs":{},"的":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"（":{"docs":{},"将":{"docs":{},"中":{"docs":{},"位":{"docs":{},"数":{"docs":{},"放":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"最":{"docs":{},"开":{"docs":{},"始":{"docs":{},"）":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}},"辅":{"docs":{},"助":{"docs":{},"栈":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"压":{"docs":{},"入":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{},"和":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"a":{"docs":{},"[":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"]":{"docs":{},"进":{"docs":{},"行":{"docs":{},"比":{"docs":{},"较":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"检":{"docs":{},"查":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"空":{"docs":{},"。":{"docs":{"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"在":{"docs":{},"前":{"docs":{},"，":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"在":{"docs":{},"后":{"docs":{},"。":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}},"例":{"docs":{},"子":{"docs":{},"[":{"3":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},",":{"1":{"docs":{},",":{"2":{"docs":{},",":{"1":{"0":{"docs":{},",":{"4":{"docs":{},",":{"1":{"0":{"0":{"docs":{},",":{"2":{"0":{"docs":{},",":{"3":{"0":{"docs":{},",":{"5":{"docs":{},",":{"5":{"docs":{},",":{"6":{"docs":{},"]":{"docs":{},",":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}},"如":{"docs":{},"，":{"docs":{},"当":{"docs":{},"k":{"docs":{},"为":{"1":{"8":{"docs":{},"时":{"docs":{},"，":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"能":{"docs":{},"够":{"docs":{},"进":{"docs":{},"入":{"docs":{},"方":{"docs":{},"格":{"docs":{},"（":{"3":{"5":{"docs":{},",":{"3":{"7":{"docs":{},"）":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"3":{"docs":{},"+":{"5":{"docs":{},"+":{"3":{"docs":{},"+":{"7":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}},"docs":{}}},"docs":{}}},"docs":{}}},"docs":{}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}},"堆":{"docs":{},"顶":{"docs":{},"记":{"docs":{},"录":{"docs":{},"第":{"docs":{},"k":{"docs":{},"大":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{"alg/215_Kth_Largest_Element_in_an_Array.html":{"ref":"alg/215_Kth_Largest_Element_in_an_Array.html","tf":0.003355704697986577}}}}}}}}}}}},"^":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.013513513513513514},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.0425531914893617},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.017699115044247787},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.0425531914893617}},"=":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.00881057268722467},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516},"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.035398230088495575}}}},"三":{"docs":{},"级":{"docs":{},"可":{"docs":{},"以":{"docs":{},"由":{"docs":{},"二":{"docs":{},"级":{"docs":{},"，":{"docs":{},"一":{"docs":{},"级":{"docs":{},"台":{"docs":{},"阶":{"docs":{},"跳":{"docs":{},"上":{"docs":{},"来":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}}}}}}}}}}}},"数":{"docs":{},"取":{"docs":{},"中":{"docs":{},":":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}},"路":{"docs":{},"快":{"docs":{},"排":{"docs":{},":":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}},"公":{"docs":{},"式":{"docs":{},"：":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}},"又":{"docs":{},"因":{"docs":{},"为":{"docs":{},"f":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}},"docs":{}}}}}},"变":{"docs":{},"态":{"docs":{},"跳":{"docs":{},"台":{"docs":{},"阶":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}},"种":{"docs":{},"写":{"docs":{},"法":{"docs":{},".":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}}},"和":{"docs":{},"之":{"docs":{},"前":{"docs":{},"普":{"docs":{},"通":{"docs":{},"跳":{"docs":{},"台":{"docs":{},"阶":{"docs":{},"的":{"docs":{},"递":{"docs":{},"推":{"docs":{},"式":{"docs":{},"差":{"docs":{},"不":{"docs":{},"多":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"写":{"docs":{},"法":{"docs":{},"有":{"docs":{},"点":{"docs":{},"像":{"docs":{},"，":{"docs":{},"先":{"docs":{},"定":{"docs":{},"义":{"docs":{},"n":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"让":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"递":{"docs":{},"归":{"docs":{},"去":{"docs":{},"得":{"docs":{},"到":{"docs":{},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"让":{"docs":{},"n":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"=":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"连":{"docs":{},"接":{"docs":{},"整":{"docs":{},"理":{"docs":{},"好":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"过":{"docs":{},"程":{"docs":{},"见":{"docs":{},"图":{"docs":{},"。":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288}}}}}},"求":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"基":{"docs":{},"本":{"docs":{},"一":{"docs":{},"样":{"docs":{"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266}}}}}}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}}}},"四":{"docs":{},"级":{"docs":{},"台":{"docs":{},"阶":{"docs":{},"可":{"docs":{},"以":{"docs":{},"由":{"docs":{},"三":{"docs":{},"级":{"docs":{},"，":{"docs":{},"二":{"docs":{},"级":{"docs":{},"，":{"docs":{},"一":{"docs":{},"级":{"docs":{},"台":{"docs":{},"阶":{"docs":{},"跳":{"docs":{},"上":{"docs":{},"来":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}},"步":{"docs":{},"见":{"docs":{},"图":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176}}}}}},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"2":{"docs":{},"*":{"1":{"docs":{},"的":{"docs":{},"小":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"横":{"docs":{},"着":{"docs":{},"或":{"docs":{},"者":{"docs":{},"竖":{"docs":{},"着":{"docs":{},"去":{"docs":{},"覆":{"docs":{},"盖":{"docs":{},"更":{"docs":{},"大":{"docs":{},"的":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"。":{"docs":{},"请":{"docs":{},"问":{"docs":{},"用":{"docs":{},"n":{"docs":{},"个":{"2":{"docs":{},"*":{"1":{"docs":{},"的":{"docs":{},"小":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"无":{"docs":{},"重":{"docs":{},"叠":{"docs":{},"地":{"docs":{},"覆":{"docs":{},"盖":{"docs":{},"一":{"docs":{},"个":{"2":{"docs":{},"*":{"docs":{},"n":{"docs":{},"的":{"docs":{},"大":{"docs":{},"矩":{"docs":{},"形":{"docs":{},"，":{"docs":{},"总":{"docs":{},"共":{"docs":{},"有":{"docs":{},"多":{"docs":{},"少":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"？":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}},"所":{"docs":{},"以":{"docs":{},"f":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}},"这":{"docs":{},"个":{"docs":{},"思":{"docs":{},"路":{"docs":{},"是":{"docs":{},"s":{"1":{"docs":{},"正":{"docs":{},"常":{"docs":{},"的":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"和":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"，":{"docs":{},"s":{"2":{"docs":{},"记":{"docs":{},"录":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"序":{"docs":{},"列":{"docs":{},"，":{"docs":{},"另":{"docs":{},"外":{"docs":{},"设":{"docs":{},"定":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"和":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"，":{"docs":{},"和":{"docs":{},"s":{"1":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"元":{"docs":{},"素":{"docs":{},"一":{"docs":{},"样":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"。":{"docs":{"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}},"docs":{}}}}}}}},"有":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"x":{"docs":{},"o":{"docs":{},"r":{"docs":{},"之":{"docs":{},"后":{"docs":{},"的":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"结":{"docs":{},"果":{"docs":{},"至":{"docs":{},"少":{"docs":{},"会":{"docs":{},"有":{"docs":{},"一":{"docs":{},"位":{"docs":{},"被":{"docs":{},"置":{"1":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"找":{"docs":{},"到":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"中":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"位":{"docs":{},"被":{"docs":{},"置":{"1":{"docs":{},"的":{"docs":{},"位":{"docs":{},"作":{"docs":{},"为":{"docs":{},"m":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"使":{"docs":{},"用":{"docs":{},"这":{"docs":{},"个":{"docs":{},"m":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"整":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"，":{"docs":{},"计":{"docs":{},"算":{"docs":{},"r":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}},"斐":{"docs":{},"波":{"docs":{},"那":{"docs":{},"契":{"docs":{},"数":{"docs":{},"列":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}}}},"由":{"docs":{},"等":{"docs":{},"比":{"docs":{},"数":{"docs":{},"列":{"docs":{},"递":{"docs":{},"推":{"docs":{},"式":{"docs":{},"推":{"docs":{},"出":{"docs":{},"f":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}}}}}}}}}}},"于":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"可":{"docs":{},"能":{"docs":{},"因":{"docs":{},"为":{"docs":{},"不":{"docs":{},"等":{"docs":{},"长":{"docs":{},"找":{"docs":{},"不":{"docs":{},"到":{"docs":{},"交":{"docs":{},"点":{"docs":{},"，":{"docs":{},"在":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"完":{"docs":{},"之":{"docs":{},"后":{"docs":{},"需":{"docs":{},"要":{"docs":{},"让":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"尾":{"docs":{},"部":{"docs":{},"等":{"docs":{},"于":{"docs":{},"对":{"docs":{},"方":{"docs":{},"的":{"docs":{},"头":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"找":{"docs":{},"到":{"docs":{},"交":{"docs":{},"点":{"docs":{},"跳":{"docs":{},"出":{"docs":{},"循":{"docs":{},"环":{"docs":{},"。":{"docs":{"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"上":{"docs":{},"面":{"docs":{},"那":{"docs":{},"段":{"docs":{},"代":{"docs":{},"码":{"docs":{},"在":{"docs":{},"元":{"docs":{},"素":{"docs":{},"相":{"docs":{},"等":{"docs":{},"时":{"docs":{},"会":{"docs":{},"有":{"docs":{},"不":{"docs":{},"必":{"docs":{},"要":{"docs":{},"的":{"docs":{},"交":{"docs":{},"换":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"循":{"docs":{},"环":{"docs":{},"中":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"加":{"docs":{},"上":{"docs":{},"相":{"docs":{},"等":{"docs":{},"就":{"docs":{},"不":{"docs":{},"交":{"docs":{},"换":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"。":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"已":{"docs":{},"经":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"数":{"docs":{},"组":{"docs":{},"构":{"docs":{},"造":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"很":{"docs":{},"容":{"docs":{},"易":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"想":{"docs":{},"到":{"docs":{},"递":{"docs":{},"归":{"docs":{},"二":{"docs":{},"分":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"，":{"docs":{},"只":{"docs":{},"是":{"docs":{},"多":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"的":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"。":{"docs":{},"思":{"docs":{},"路":{"docs":{},"是":{"docs":{},"每":{"docs":{},"次":{"docs":{},"取":{"docs":{},"中":{"docs":{},"间":{"docs":{},"，":{"docs":{},"再":{"docs":{},"构":{"docs":{},"造":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"。":{"docs":{"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"矩":{"docs":{},"形":{"docs":{},"覆":{"docs":{},"盖":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}},"递":{"docs":{},"推":{"docs":{},"式":{"docs":{},":":{"docs":{},"f":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"alg/70_Climbing_Stairs.html":{"ref":"alg/70_Climbing_Stairs.html","tf":0.006756756756756757}}}}}}}}},"归":{"docs":{},"三":{"docs":{},"连":{"docs":{},"：":{"docs":{},"前":{"docs":{},"中":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"遍":{"docs":{},"历":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"理":{"docs":{},"解":{"docs":{},"：":{"docs":{},"先":{"docs":{},"写":{"docs":{},"出":{"docs":{},"三":{"docs":{},"个":{"docs":{},"点":{"docs":{},"的":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"发":{"docs":{},"现":{"docs":{},"后":{"docs":{},"面":{"docs":{},"两":{"docs":{},"个":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"i":{"docs":{},"f":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"复":{"docs":{},"用":{"docs":{},"。":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"同":{"docs":{},"样":{"docs":{},"先":{"docs":{},"写":{"docs":{},"出":{"docs":{},"三":{"docs":{},"个":{"docs":{},"点":{"docs":{},"的":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"发":{"docs":{},"现":{"docs":{},"迷":{"docs":{},"之":{"docs":{},"缩":{"docs":{},"进":{"docs":{},"里":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"i":{"docs":{},"f":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"复":{"docs":{},"用":{"docs":{},"。":{"docs":{"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"写":{"docs":{},"出":{"docs":{},"三":{"docs":{},"个":{"docs":{},"点":{"docs":{},"的":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"发":{"docs":{},"现":{"docs":{},"迷":{"docs":{},"之":{"docs":{},"缩":{"docs":{},"进":{"docs":{},"里":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"i":{"docs":{},"f":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"复":{"docs":{},"用":{"docs":{},"。":{"docs":{"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"，":{"docs":{},"每":{"docs":{},"层":{"docs":{},"路":{"docs":{},"径":{"docs":{},"加":{"docs":{},"一":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}}}}},"终":{"docs":{},"止":{"docs":{},"条":{"docs":{},"件":{"docs":{},"：":{"docs":{},"超":{"docs":{},"出":{"docs":{},"边":{"docs":{},"界":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}}}},"!":{"docs":{},"=":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.0449438202247191},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.015151515151515152},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.022727272727272728},"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.05714285714285714},"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.0425531914893617},"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.05263157894736842},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.04285714285714286},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.029850746268656716},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"ref":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","tf":0.03076923076923077},"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.021052631578947368},"alg/234_Palindrome_Linked_List.html":{"ref":"alg/234_Palindrome_Linked_List.html","tf":0.058823529411764705},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.03731343283582089},"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.047619047619047616},"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.03636363636363636},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.047058823529411764},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.05357142857142857},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"2_tree.html":{"ref":"2_tree.html","tf":0.02247191011235955},"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.028037383177570093},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.017543859649122806},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.024390243902439025},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549},"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.017094017094017096},"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.014563106796116505},"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.013333333333333334},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.02},"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"ref":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","tf":0.015384615384615385},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.03389830508474576},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.02459016393442623},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.04918032786885246},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.009174311926605505},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.00881057268722467},"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.0425531914893617},"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}},"!":{"docs":{},"!":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}},"|":{"docs":{},"|":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775},"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358},"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802},"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.01818181818181818},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358},"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179},"alg/148_Sort_List.html":{"ref":"alg/148_Sort_List.html","tf":0.011764705882352941},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315},"2_tree.html":{"ref":"2_tree.html","tf":0.0449438202247191},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186},"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728},"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.03937007874015748},"alg/101_Symmetric_Tree.html":{"ref":"alg/101_Symmetric_Tree.html","tf":0.01694915254237288},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.0379746835443038},"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.041237113402061855},"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.03389830508474576},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082},"alg/415_Add_Strings.html":{"ref":"alg/415_Add_Strings.html","tf":0.043478260869565216},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.01744186046511628},"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703},"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.043478260869565216},"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.02531645569620253},"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564},"alg/200_Number_of_Islands.html":{"ref":"alg/200_Number_of_Islands.html","tf":0.05504587155963303},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.05506607929515418},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085},"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}}},"打":{"docs":{},"印":{"docs":{},"最":{"docs":{},"上":{"docs":{},"行":{"docs":{},"：":{"docs":{},"行":{"docs":{},"不":{"docs":{},"变":{"docs":{},"列":{"docs":{},"变":{"docs":{},"，":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"：":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"，":{"docs":{},"列":{"docs":{},"的":{"docs":{},"取":{"docs":{},"值":{"docs":{},"范":{"docs":{},"围":{"docs":{},"：":{"docs":{},"[":{"docs":{},"i":{"docs":{},",":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"下":{"docs":{},"行":{"docs":{},"：":{"docs":{},"行":{"docs":{},"不":{"docs":{},"变":{"docs":{},"列":{"docs":{},"变":{"docs":{},"，":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"：":{"docs":{},"[":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}},"右":{"docs":{},"列":{"docs":{},"：":{"docs":{},"行":{"docs":{},"变":{"docs":{},"列":{"docs":{},"不":{"docs":{},"变":{"docs":{},"，":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"：":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"[":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}},"左":{"docs":{},"列":{"docs":{},"：":{"docs":{},"行":{"docs":{},"变":{"docs":{},"列":{"docs":{},"不":{"docs":{},"变":{"docs":{},"，":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"：":{"docs":{},"[":{"docs":{},"j":{"docs":{},"]":{"docs":{},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{},"，":{"docs":{},"行":{"docs":{},"的":{"docs":{},"取":{"docs":{},"值":{"docs":{},"范":{"docs":{},"围":{"docs":{},"：":{"docs":{},"[":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"顺":{"docs":{},"时":{"docs":{},"针":{"docs":{},"打":{"docs":{},"印":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"，":{"docs":{},"重":{"docs":{},"点":{"docs":{},"在":{"docs":{},"于":{"docs":{},"行":{"docs":{},"列":{"docs":{},"的":{"docs":{},"取":{"docs":{},"值":{"docs":{},"范":{"docs":{},"围":{"docs":{},"。":{"docs":{},"首":{"docs":{},"先":{"docs":{},"算":{"docs":{},"出":{"docs":{},"圈":{"docs":{},"数":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"（":{"docs":{},"行":{"docs":{},"列":{"docs":{},"的":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"一":{"docs":{},"半":{"docs":{},"的":{"docs":{},"上":{"docs":{},"界":{"docs":{},"，":{"docs":{},"画":{"docs":{},"一":{"docs":{},"下":{"docs":{},"图":{"docs":{},"就":{"docs":{},"知":{"docs":{},"道":{"docs":{},"了":{"docs":{},"）":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"取":{"docs":{},"变":{"docs":{},"量":{"docs":{},"i":{"docs":{},"在":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"中":{"docs":{},"进":{"docs":{},"行":{"docs":{},"循":{"docs":{},"环":{"docs":{},"打":{"docs":{},"印":{"docs":{},"。":{"docs":{"alg/54_Spiral_Matrix.html":{"ref":"alg/54_Spiral_Matrix.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"到":{"docs":{"alg/384_Shuffle_an_Array.html":{"ref":"alg/384_Shuffle_an_Array.html","tf":0.015625}}},"@":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105},"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.020202020202020204}}}}}}}}},"用":{"docs":{},"于":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{},"举":{"docs":{},"例":{"docs":{},"来":{"docs":{},"说":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"原":{"docs":{},"数":{"docs":{},"组":{"docs":{},"为":{"docs":{},"[":{"9":{"docs":{},",":{"5":{"docs":{},"]":{"docs":{},"，":{"docs":{},"有":{"docs":{},"两":{"docs":{},"种":{"docs":{},"排":{"docs":{},"序":{"docs":{},"的":{"docs":{},"可":{"docs":{},"能":{"docs":{},"性":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"为":{"9":{"5":{"docs":{},"和":{"5":{"9":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"2":{"docs":{},"小":{"docs":{},"于":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"1":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"返":{"docs":{},"回":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}}}}}},"docs":{}}}}}}},"docs":{}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}},"来":{"docs":{},"保":{"docs":{},"留":{"docs":{},"其":{"docs":{},"中":{"docs":{},"某":{"docs":{},"个":{"docs":{},"非":{"docs":{},"空":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"结":{"docs":{},"构":{"docs":{},"，":{"docs":{},"在":{"6":{"1":{"7":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}},"位":{"docs":{},"运":{"docs":{},"算":{"docs":{},"实":{"docs":{},"现":{"docs":{},"加":{"docs":{},"法":{"docs":{},"，":{"docs":{},"^":{"docs":{},"求":{"docs":{},"和":{"docs":{},"，":{"docs":{},"&":{"docs":{},"左":{"docs":{},"移":{"docs":{},"求":{"docs":{},"进":{"docs":{},"位":{"docs":{},"，":{"docs":{},"进":{"docs":{},"位":{"docs":{},"为":{"0":{"docs":{},"时":{"docs":{},"返":{"docs":{},"回":{"docs":{},"答":{"docs":{},"案":{"docs":{"alg/371_Sum_of_Two_Integers.html":{"ref":"alg/371_Sum_of_Two_Integers.html","tf":0.02127659574468085}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"重":{"docs":{},"点":{"docs":{},"在":{"docs":{},"于":{"docs":{},"新":{"docs":{},"建":{"docs":{},"一":{"docs":{},"个":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"，":{"docs":{"alg/179_Largest_Number.html":{"ref":"alg/179_Largest_Number.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"这":{"docs":{},"个":{"docs":{},"公":{"docs":{},"式":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"d":{"docs":{},"i":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}},"%":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282},"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909},"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.019801980198019802},"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.04918032786885246},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541},"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.01744186046511628},"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676},"alg/705_Design_HashSet.html":{"ref":"alg/705_Design_HashSet.html","tf":0.01020408163265306}}},"注":{"docs":{},"意":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"为":{"docs":{},"空":{"docs":{},"或":{"docs":{},"者":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"为":{"0":{"docs":{},"返":{"docs":{},"回":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}}}}},"docs":{}}}}}}}}}}}}}},"不":{"docs":{},"要":{"docs":{},"用":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"。":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"栈":{"docs":{},"实":{"docs":{},"现":{"docs":{},"中":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"有":{"docs":{},"时":{"docs":{},"候":{"docs":{},"栈":{"docs":{},"空":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"指":{"docs":{},"针":{"docs":{},"还":{"docs":{},"指":{"docs":{},"着":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"点":{"docs":{},"，":{"docs":{},"如":{"docs":{},"[":{"1":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"]":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"判":{"docs":{},"断":{"docs":{},"条":{"docs":{},"件":{"docs":{},"为":{"docs":{},"是":{"docs":{},"栈":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"或":{"docs":{},"者":{"docs":{},"指":{"docs":{},"针":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"。":{"docs":{"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"么":{"docs":{},"写":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"计":{"docs":{},"算":{"docs":{},"i":{"docs":{},"f":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"会":{"docs":{},"抛":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"要":{"docs":{},"对":{"docs":{},"数":{"docs":{},"组":{"docs":{},"进":{"docs":{},"行":{"docs":{},"排":{"docs":{},"序":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"要":{"docs":{},"比":{"docs":{},"较":{"docs":{},"大":{"docs":{},"小":{"docs":{},"决":{"docs":{},"定":{"docs":{},"指":{"docs":{},"针":{"docs":{},"移":{"docs":{},"动":{"docs":{},"方":{"docs":{},"向":{"docs":{},"，":{"docs":{},"没":{"docs":{},"有":{"docs":{},"排":{"docs":{},"序":{"docs":{},"会":{"docs":{},"跳":{"docs":{},"过":{"docs":{},"某":{"docs":{},"些":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"求":{"docs":{},"模":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}},"包":{"docs":{},"装":{"docs":{},"类":{"docs":{},"的":{"docs":{},"转":{"docs":{},"换":{"docs":{},"。":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{},"e":{"docs":{},"函":{"docs":{},"数":{"docs":{},"的":{"docs":{},"写":{"docs":{},"法":{"docs":{"alg/37_Sudoku_Solver.html":{"ref":"alg/37_Sudoku_Solver.html","tf":0.05263157894736842}}}}}}}}}}}}}},"直":{"docs":{},"接":{"docs":{},"x":{"docs":{"alg/50_Pow.html":{"ref":"alg/50_Pow.html","tf":0.01282051282051282}}},"在":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"中":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"括":{"docs":{},"号":{"docs":{},"的":{"docs":{},"话":{"docs":{},"不":{"docs":{},"可":{"docs":{},"以":{"docs":{},"分":{"docs":{},"辨":{"docs":{},"留":{"docs":{},"在":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"的":{"docs":{},"括":{"docs":{},"号":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"每":{"docs":{},"个":{"docs":{},"符":{"docs":{},"号":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"。":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"的":{"docs":{},"扩":{"docs":{},"展":{"docs":{},"，":{"docs":{},"条":{"docs":{},"件":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"平":{"docs":{},"方":{"docs":{},"大":{"docs":{},"于":{"docs":{},"x":{"docs":{},"。":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"乘":{"docs":{},"法":{"docs":{},"或":{"docs":{},"者":{"docs":{},"除":{"docs":{},"法":{"docs":{},"进":{"docs":{},"行":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"除":{"docs":{},"法":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"l":{"docs":{},"=":{"1":{"docs":{},"，":{"docs":{},"不":{"docs":{},"然":{"docs":{},"的":{"docs":{},"话":{"docs":{},"m":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"等":{"docs":{},"于":{"docs":{},"零":{"docs":{},"出":{"docs":{},"错":{"docs":{},"。":{"docs":{},"加":{"docs":{},"上":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"最":{"docs":{},"基":{"docs":{},"本":{"docs":{},"的":{"docs":{},"两":{"docs":{},"种":{"docs":{},"写":{"docs":{},"法":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"可":{"docs":{},"以":{"docs":{},"有":{"docs":{},"四":{"docs":{},"种":{"docs":{},"写":{"docs":{},"法":{"docs":{},"。":{"docs":{},"返":{"docs":{},"回":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"alg/69_Sqrtx.html":{"ref":"alg/69_Sqrtx.html","tf":0.0056179775280898875}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"边":{"docs":{},"界":{"docs":{},"问":{"docs":{},"题":{"docs":{},"还":{"docs":{},"是":{"docs":{},"有":{"docs":{},"一":{"docs":{},"点":{"docs":{},"点":{"docs":{},"搞":{"docs":{},"的":{"docs":{},"，":{"docs":{},"特":{"docs":{},"别":{"docs":{},"是":{"docs":{},"题":{"docs":{},"目":{"docs":{},"变":{"docs":{},"形":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"会":{"docs":{},"发":{"docs":{},"现":{"docs":{},"其":{"docs":{},"实":{"docs":{},"是":{"docs":{},"在":{"docs":{},"猜":{"docs":{},"边":{"docs":{},"界":{"docs":{},"写":{"docs":{},"题":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"这":{"docs":{},"样":{"docs":{},"其":{"docs":{},"实":{"docs":{},"很":{"docs":{},"不":{"docs":{},"好":{"docs":{},"，":{"docs":{},"我":{"docs":{},"觉":{"docs":{},"得":{"docs":{},"这":{"docs":{},"个":{"docs":{},"边":{"docs":{},"界":{"docs":{},"问":{"docs":{},"题":{"docs":{},"其":{"docs":{},"实":{"docs":{},"就":{"docs":{},"是":{"docs":{},"除":{"docs":{},"法":{"docs":{},"取":{"docs":{},"下":{"docs":{},"界":{"docs":{},"的":{"docs":{},"锅":{"docs":{},"。":{"docs":{},"给":{"docs":{},"出":{"docs":{},"两":{"docs":{},"种":{"docs":{},"错":{"docs":{},"掉":{"docs":{},"的":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"写":{"docs":{},"法":{"docs":{},"：":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"的":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"定":{"docs":{},"义":{"docs":{},"一":{"docs":{},"个":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},".":{"docs":{},"p":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"永":{"docs":{},"远":{"docs":{},"指":{"docs":{},"向":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"思":{"docs":{},"路":{"docs":{},"是":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"全":{"docs":{},"部":{"docs":{},"一":{"docs":{},"次":{"docs":{},"性":{"docs":{},"进":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"完":{"docs":{},"成":{"docs":{},"后":{"docs":{},"，":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"最":{"docs":{},"上":{"docs":{},"面":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"a":{"docs":{},"，":{"docs":{},"检":{"docs":{},"查":{"docs":{},"它":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"右":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"的":{"docs":{},"话":{"docs":{},"就":{"docs":{},"作":{"docs":{},"为":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"根":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"此":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"大":{"docs":{},"于":{"docs":{},"a":{"docs":{},"小":{"docs":{},"于":{"docs":{},"a":{"docs":{},"的":{"docs":{},"父":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"a":{"docs":{},"没":{"docs":{},"有":{"docs":{},"右":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"没":{"docs":{},"有":{"docs":{},"值":{"docs":{},"在":{"docs":{},"a":{"docs":{},"和":{"docs":{},"a":{"docs":{},"的":{"docs":{},"父":{"docs":{},"节":{"docs":{},"点":{"docs":{},"之":{"docs":{},"间":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"直":{"docs":{},"接":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"a":{"docs":{},"的":{"docs":{},"父":{"docs":{},"节":{"docs":{},"点":{"docs":{},"作":{"docs":{},"为":{"docs":{},"答":{"docs":{},"案":{"docs":{},"。":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}},"。":{"docs":{},"基":{"docs":{},"础":{"docs":{},"递":{"docs":{},"归":{"docs":{},"，":{"docs":{},"有":{"docs":{},"点":{"docs":{},"像":{"docs":{},"简":{"docs":{},"单":{"docs":{},"版":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"。":{"docs":{},"分":{"docs":{},"成":{"docs":{},"两":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"或":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"。":{"docs":{"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.013333333333333334}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"树":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549}},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{},":":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}},"进":{"docs":{},"制":{"docs":{},"位":{"docs":{},"数":{"docs":{},"：":{"1":{"6":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.037037037037037035}}},"docs":{}},"3":{"2":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.037037037037037035}}},"docs":{}},"6":{"4":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.037037037037037035}}},"docs":{}},"8":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}},"docs":{}}}}}}},".":{"docs":{},".":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.02857142857142857}},".":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.016},"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.0625}}}}},"y":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.008928571428571428},"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.0425531914893617}},";":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},"的":{"docs":{},"g":{"docs":{},"c":{"docs":{},"d":{"docs":{},"来":{"docs":{},"同":{"docs":{},"时":{"docs":{},"缩":{"docs":{},"小":{"docs":{},"x":{"docs":{},"，":{"docs":{},"y":{"docs":{},"的":{"docs":{},"范":{"docs":{},"围":{"docs":{},"避":{"docs":{},"免":{"docs":{},"浮":{"docs":{},"点":{"docs":{},"数":{"docs":{},"的":{"docs":{},"精":{"docs":{},"度":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085}},";":{"docs":{"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085}}}}},"思":{"docs":{},"路":{"docs":{},"是":{"docs":{},"两":{"docs":{},"个":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"需":{"docs":{},"要":{"docs":{},"比":{"docs":{},"较":{"docs":{},"(":{"docs":{},"n":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}},"：":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}},"第":{"docs":{},"二":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"使":{"docs":{},"用":{"docs":{},"求":{"docs":{},"x":{"docs":{},",":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}},"：":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}},"把":{"docs":{},"所":{"docs":{},"有":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"写":{"docs":{},"在":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"中":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"在":{"docs":{},"求":{"docs":{},"高":{"docs":{},"度":{"docs":{},"的":{"docs":{},"同":{"docs":{},"时":{"docs":{},"进":{"docs":{},"行":{"docs":{},"判":{"docs":{},"断":{"docs":{},"层":{"docs":{},"数":{"docs":{},"是":{"docs":{},"否":{"docs":{},"大":{"docs":{},"于":{"1":{"docs":{},"，":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"对":{"docs":{},"节":{"docs":{},"点":{"docs":{},"进":{"docs":{},"行":{"docs":{},"一":{"docs":{},"次":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"边":{"docs":{},"界":{"docs":{},"姿":{"docs":{},"势":{"docs":{},"，":{"docs":{},"同":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"两":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"构":{"docs":{},"造":{"docs":{},"出":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"可":{"docs":{},"能":{"docs":{},"是":{"docs":{},"不":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"，":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"数":{"docs":{},"组":{"docs":{},"只":{"docs":{},"是":{"docs":{},"代":{"docs":{},"表":{"docs":{},"了":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"，":{"docs":{},"不":{"docs":{},"能":{"docs":{},"确":{"docs":{},"定":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"的":{"docs":{},"树":{"docs":{},"。":{"docs":{"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"ref":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","tf":0.008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"种":{"docs":{},"递":{"docs":{},"归":{"docs":{},"：":{"docs":{},"在":{"docs":{},"i":{"docs":{},"s":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"中":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"一":{"docs":{},"个":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"用":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"递":{"docs":{},"归":{"docs":{},"求":{"docs":{},"出":{"docs":{},"它":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"，":{"docs":{},"再":{"docs":{},"在":{"docs":{},"i":{"docs":{},"s":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{},"函":{"docs":{},"数":{"docs":{},"中":{"docs":{},"进":{"docs":{},"行":{"docs":{},"递":{"docs":{},"归":{"docs":{},"。":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"计":{"docs":{},"算":{"docs":{},"一":{"docs":{},"个":{"docs":{},"列":{"docs":{},"表":{"docs":{},"中":{"docs":{},"最":{"docs":{},"多":{"docs":{},"能":{"docs":{},"有":{"docs":{},"几":{"docs":{},"个":{"docs":{},"点":{"docs":{},"在":{"docs":{},"一":{"docs":{},"条":{"docs":{},"线":{"docs":{},"上":{"docs":{},"。":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}},"串":{"docs":{},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"中":{"1":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}},"docs":{}}}}}}},"每":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},",":{"docs":{"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564}}}}}}}}}}}}},"运":{"docs":{},"行":{"docs":{},"例":{"docs":{},"子":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}},"返":{"docs":{},"回":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"3":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}},"docs":{}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}},"还":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"比":{"docs":{},"较":{"docs":{},"快":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"没":{"docs":{},"有":{"docs":{},"看":{"docs":{},"，":{"docs":{},"好":{"docs":{},"像":{"docs":{},"是":{"docs":{},"直":{"docs":{},"接":{"docs":{},"比":{"docs":{},"较":{"docs":{},"乘":{"docs":{},"法":{"docs":{},"。":{"docs":{"alg/149_Max_Points_on_a_Line.html":{"ref":"alg/149_Max_Points_on_a_Line.html","tf":0.004464285714285714}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"输":{"docs":{},"入":{"docs":{},"最":{"docs":{},"大":{"docs":{},"(":{"docs":{},"最":{"docs":{},"小":{"docs":{},")":{"docs":{},"整":{"docs":{},"数":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"可":{"docs":{},"能":{"docs":{},"会":{"docs":{},"溢":{"docs":{},"出":{"docs":{},"，":{"docs":{},"不":{"docs":{},"如":{"docs":{},"直":{"docs":{},"接":{"docs":{},"判":{"docs":{},"断":{"docs":{},"中":{"docs":{},"间":{"docs":{},"值":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"区":{"docs":{},"间":{"docs":{},"反":{"docs":{},"转":{"docs":{},"记":{"docs":{},"得":{"docs":{},"看":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}}}}}}},";":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.013544018058690745},"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285}}},"?":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576},"alg/160_Intersection_of_Two_Linked_Lists.html":{"ref":"alg/160_Intersection_of_Two_Linked_Lists.html","tf":0.03636363636363636},"alg/203_Remove_Linked_List_Elements.html":{"ref":"alg/203_Remove_Linked_List_Elements.html","tf":0.007142857142857143},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358},"alg/21_Merge_Two_Sorted_Lists.html":{"ref":"alg/21_Merge_Two_Sorted_Lists.html","tf":0.017857142857142856},"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444},"2_tree.html":{"ref":"2_tree.html","tf":0.02247191011235955},"alg/617_Merge_Two_Binary_Trees.html":{"ref":"alg/617_Merge_Two_Binary_Trees.html","tf":0.022727272727272728},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288},"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.01639344262295082},"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}},"大":{"docs":{},"概":{"docs":{},"是":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"?":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}}}}}}}},"粉":{"docs":{},"色":{"docs":{},"格":{"docs":{},"子":{"docs":{},"为":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"=":{"0":{"docs":{},"时":{"docs":{},"换":{"docs":{},"主":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"绿":{"docs":{},"色":{"docs":{},"格":{"docs":{},"子":{"docs":{"alg/169_Majority_Element.html":{"ref":"alg/169_Majority_Element.html","tf":0.007575757575757576}}}}}}}}}}}}},"docs":{}}}}}}}}}}}},"_":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"_":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.005050505050505051},"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.009554140127388535},"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}},")":{"docs":{},":":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"alg/173_Binary_Search_Tree_Iterator.html":{"ref":"alg/173_Binary_Search_Tree_Iterator.html","tf":0.010101010101010102},"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"alg/11_Container_With_Most_Water.html":{"ref":"alg/11_Container_With_Most_Water.html","tf":3.3678160919540225},"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":2.5294117647058822}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":2.5126582278481013}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":3.3399412628487517}},")":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.00881057268722467}}},"[":{"docs":{},"k":{"docs":{},"]":{"docs":{},")":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}},"已":{"docs":{},"知":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}},"经":{"docs":{},"访":{"docs":{},"问":{"docs":{},"过":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}},"是":{"docs":{},"说":{"docs":{},"左":{"docs":{},"边":{"docs":{},"指":{"docs":{},"针":{"docs":{},"会":{"docs":{},"多":{"docs":{},"走":{"docs":{},"一":{"docs":{},"步":{"docs":{},"到":{"docs":{},"达":{"docs":{},"上":{"docs":{},"界":{"docs":{},"。":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"很":{"docs":{},"迷":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"，":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}}}}}},"正":{"docs":{},"确":{"docs":{},"写":{"docs":{},"法":{"docs":{},"一":{"docs":{},"：":{"docs":{},"小":{"docs":{},"于":{"docs":{},"判":{"docs":{},"断":{"docs":{},"加":{"docs":{},"检":{"docs":{},"查":{"docs":{},"边":{"docs":{},"界":{"docs":{},"后":{"docs":{},"返":{"docs":{},"回":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"：":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"加":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}}}}}}}}}}}},"求":{"docs":{},"下":{"docs":{},"界":{"docs":{},"中":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{},"a":{"docs":{},"[":{"docs":{},"m":{"docs":{},"]":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}}},"区":{"docs":{},"间":{"docs":{},"中":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"上":{"docs":{},"下":{"docs":{},"界":{"docs":{},"长":{"docs":{},"度":{"docs":{},"：":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}},"出":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"连":{"docs":{},"续":{"docs":{},"子":{"docs":{},"序":{"docs":{},"列":{"docs":{},"之":{"docs":{},"和":{"docs":{},"，":{"docs":{},"设":{"docs":{},"定":{"docs":{},"变":{"docs":{},"量":{"docs":{},"f":{"docs":{},"用":{"docs":{},"来":{"docs":{},"记":{"docs":{},"录":{"docs":{},"当":{"docs":{},"前":{"docs":{},"的":{"docs":{},"最":{"docs":{},"大":{"docs":{},"和":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"取":{"docs":{},"出":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},"i":{"docs":{"alg/53_Maximum_Subarray.html":{"ref":"alg/53_Maximum_Subarray.html","tf":0.034482758620689655}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"交":{"docs":{},"集":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}},"集":{"docs":{},"合":{"docs":{},"交":{"docs":{},"集":{"docs":{},"，":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"慢":{"docs":{},"慢":{"docs":{"alg/349_Intersection_of_Two_Arrays.html":{"ref":"alg/349_Intersection_of_Two_Arrays.html","tf":0.009433962264150943}}}}}}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"节":{"docs":{},"点":{"docs":{},"最":{"docs":{},"远":{"docs":{},"距":{"docs":{},"离":{"docs":{},":":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.011235955056179775}}}}}}}}},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"路":{"docs":{},"径":{"docs":{},"，":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"为":{"docs":{},"空":{"docs":{},"。":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"为":{"docs":{},"空":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"基":{"docs":{},"本":{"docs":{},"都":{"docs":{},"是":{"docs":{},"修":{"docs":{},"改":{"docs":{},"引":{"docs":{},"用":{"docs":{},"（":{"docs":{},"比":{"docs":{},"如":{"docs":{},"说":{"docs":{},"结":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"）":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"需":{"docs":{},"要":{"docs":{},"声":{"docs":{},"明":{"docs":{},"一":{"docs":{},"个":{"docs":{},"结":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"之":{"docs":{},"后":{"docs":{},"另":{"docs":{},"外":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"。":{"docs":{},"然":{"docs":{},"后":{"docs":{},"分":{"docs":{},"情":{"docs":{},"况":{"docs":{},"讨":{"docs":{},"论":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/257_Binary_Tree_Paths.html":{"ref":"alg/257_Binary_Tree_Paths.html","tf":0.015151515151515152}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"2":{"docs":{},",":{"docs":{"alg/231_Power_of_Two.html":{"ref":"alg/231_Power_of_Two.html","tf":0.03125}}}},"docs":{}}}}}}}}},"流":{"docs":{},"中":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"，":{"docs":{},"用":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"必":{"docs":{},"须":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"为":{"docs":{},"\"":{"docs":{},"\"":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"如":{"docs":{},"果":{"docs":{},"一":{"docs":{},"个":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"指":{"docs":{},"向":{"docs":{},"没":{"docs":{},"有":{"docs":{},"分":{"docs":{},"配":{"docs":{},"内":{"docs":{},"存":{"docs":{},"空":{"docs":{},"间":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"会":{"docs":{},"打":{"docs":{},"印":{"docs":{},"出":{"docs":{},"\"":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"\"":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"溢":{"docs":{},"出":{"docs":{},"：":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}},"的":{"docs":{},"意":{"docs":{},"思":{"docs":{},"是":{"docs":{},"说":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"如":{"docs":{},"果":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"等":{"docs":{},"于":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"指":{"docs":{},"针":{"docs":{},"会":{"docs":{},"多":{"docs":{},"走":{"docs":{},"一":{"docs":{},"步":{"docs":{},"到":{"docs":{},"达":{"docs":{},"下":{"docs":{},"界":{"docs":{},"。":{"docs":{},"同":{"docs":{},"样":{"docs":{},"在":{"docs":{},"求":{"docs":{},"上":{"docs":{},"界":{"docs":{},"中":{"docs":{},"，":{"docs":{},"a":{"docs":{},"[":{"docs":{},"m":{"docs":{},"]":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"里":{"docs":{},"是":{"docs":{},"l":{"docs":{},"=":{"docs":{},"m":{"docs":{},"+":{"1":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"l":{"docs":{},"=":{"docs":{},"m":{"docs":{},"：":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{},"除":{"docs":{},"法":{"docs":{},"取":{"docs":{},"下":{"docs":{},"界":{"docs":{},"会":{"docs":{},"造":{"docs":{},"成":{"docs":{},"l":{"docs":{},"边":{"docs":{},"界":{"docs":{},"不":{"docs":{},"会":{"docs":{},"改":{"docs":{},"变":{"docs":{},"，":{"docs":{},"从":{"docs":{},"而":{"docs":{},"形":{"docs":{},"成":{"docs":{},"死":{"docs":{},"循":{"docs":{},"环":{"docs":{},"。":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"的":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"和":{"docs":{},"o":{"docs":{},"d":{"docs":{},"d":{"docs":{},"指":{"docs":{},"的":{"docs":{},"是":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"。":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"位":{"docs":{},"的":{"docs":{},"连":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"位":{"docs":{},"的":{"docs":{},"连":{"docs":{},"成":{"docs":{},"一":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"连":{"docs":{},"一":{"docs":{},"连":{"docs":{},"。":{"docs":{"alg/328_Odd_Even_Linked_List.html":{"ref":"alg/328_Odd_Even_Linked_List.html","tf":0.01818181818181818}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{},"是":{"docs":{},"用":{"docs":{},"来":{"docs":{},"判":{"docs":{},"断":{"docs":{},"如":{"docs":{},"果":{"docs":{},"返":{"docs":{},"回":{"docs":{},"的":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"中":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"若":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"为":{"docs":{"alg/110_Balanced_Binary_Tree.html":{"ref":"alg/110_Balanced_Binary_Tree.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"种":{"docs":{},"解":{"docs":{},"法":{"docs":{},"限":{"docs":{},"制":{"docs":{},"很":{"docs":{},"大":{"docs":{},"，":{"docs":{},"必":{"docs":{},"须":{"docs":{},"同":{"docs":{},"时":{"docs":{},"满":{"docs":{},"足":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"[":{"1":{"docs":{},",":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863}}}},"docs":{}}}}}},"docs":{}}}}}}}}}}}}}}}}},"题":{"docs":{},"是":{"docs":{},"前":{"docs":{},"序":{"docs":{},"和":{"docs":{},"中":{"docs":{},"序":{"docs":{},"确":{"docs":{},"定":{"docs":{},"一":{"docs":{},"个":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"主":{"docs":{},"体":{"docs":{},"框":{"docs":{},"架":{"docs":{},"还":{"docs":{},"是":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"对":{"docs":{},"数":{"docs":{},"组":{"docs":{},"重":{"docs":{},"复":{"docs":{},"，":{"docs":{},"如":{"docs":{},"{":{"1":{"0":{"docs":{},",":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}},"docs":{}},"docs":{}}}}}}}}}}}}},"三":{"docs":{},"句":{"docs":{},"是":{"docs":{},"防":{"docs":{},"止":{"docs":{},"i":{"docs":{},",":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}}}}}},"个":{"docs":{},"题":{"docs":{},"一":{"docs":{},"开":{"docs":{},"始":{"docs":{},"还":{"docs":{},"是":{"docs":{},"有":{"docs":{},"点":{"docs":{},"迷":{"docs":{},"的":{"docs":{},"，":{"docs":{},"后":{"docs":{},"来":{"docs":{},"想":{"docs":{},"清":{"docs":{},"楚":{"docs":{},"了":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"它":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"会":{"docs":{},"把":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"不":{"docs":{},"管":{"docs":{},"大":{"docs":{},"小":{"docs":{},"都":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"出":{"docs":{},"去":{"docs":{},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"[":{"docs":{"alg/155_Min_Stack.html":{"ref":"alg/155_Min_Stack.html","tf":0.030303030303030304}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"错":{"docs":{},"误":{"docs":{},"写":{"docs":{},"法":{"docs":{},"一":{"docs":{},":":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}},"二":{"docs":{},":":{"docs":{"alg/704_Binary_Search.html":{"ref":"alg/704_Binary_Search.html","tf":0.0034965034965034965}}}}}}}},"升":{"docs":{},"级":{"docs":{},"版":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"边":{"docs":{},"界":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"。":{"docs":{},"特":{"docs":{},"别":{"docs":{},"是":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"所":{"docs":{},"在":{"docs":{},"的":{"docs":{},"范":{"docs":{},"围":{"docs":{},"，":{"docs":{},"是":{"docs":{},"一":{"docs":{},"块":{"docs":{},"连":{"docs":{},"续":{"docs":{},"的":{"docs":{},"区":{"docs":{},"域":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"就":{"docs":{},"把":{"docs":{},"左":{"docs":{},"边":{"docs":{},"界":{"docs":{},"自":{"docs":{},"增":{"1":{"docs":{},"，":{"docs":{},"指":{"docs":{},"向":{"docs":{},"下":{"docs":{},"一":{"docs":{},"个":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"ref":"alg/81_Search_in_Rotated_Sorted_Array_II.html","tf":0.023255813953488372}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"因":{"docs":{},"为":{"docs":{},"并":{"docs":{},"成":{"docs":{},"一":{"docs":{},"整":{"docs":{},"行":{"docs":{},"之":{"docs":{},"后":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"刚":{"docs":{},"好":{"docs":{},"也":{"docs":{},"是":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"可":{"docs":{},"以":{"docs":{},"把":{"docs":{},"整":{"docs":{},"个":{"docs":{},"矩":{"docs":{},"阵":{"docs":{},"看":{"docs":{},"成":{"docs":{},"一":{"docs":{},"行":{"docs":{},"进":{"docs":{},"行":{"docs":{},"排":{"docs":{},"列":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"每":{"docs":{},"一":{"docs":{},"行":{"docs":{},"进":{"docs":{},"行":{"docs":{},"一":{"docs":{},"次":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{"alg/74_Search_a_2D_Matrix.html":{"ref":"alg/74_Search_a_2D_Matrix.html","tf":0.00909090909090909}}}}}}}}}}}}},"以":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}},"第":{"docs":{},"一":{"docs":{},"行":{"docs":{},"最":{"docs":{},"右":{"docs":{},"边":{"docs":{},"元":{"docs":{},"素":{"docs":{},"（":{"docs":{},"刚":{"docs":{},"好":{"docs":{},"是":{"docs":{},"第":{"docs":{},"一":{"docs":{},"行":{"docs":{},"和":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"列":{"docs":{},"的":{"docs":{},"中":{"docs":{},"间":{"docs":{},"值":{"docs":{},"）":{"docs":{},"作":{"docs":{},"为":{"docs":{},"开":{"docs":{},"始":{"docs":{},"点":{"docs":{},"，":{"docs":{},"小":{"docs":{},"于":{"docs":{},"它":{"docs":{},"减":{"docs":{},"去":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"，":{"docs":{},"大":{"docs":{},"于":{"docs":{},"加":{"docs":{},"上":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"，":{"docs":{},"新":{"docs":{},"的":{"docs":{},"点":{"docs":{},"成":{"docs":{},"为":{"docs":{},"新":{"docs":{},"的":{"docs":{},"基":{"docs":{},"准":{"docs":{},"点":{"docs":{},"，":{"docs":{},"再":{"docs":{},"向":{"docs":{},"下":{"docs":{},"或":{"docs":{},"者":{"docs":{},"向":{"docs":{},"左":{"docs":{},"走":{"docs":{},"。":{"docs":{},"注":{"docs":{},"意":{"docs":{},"边":{"docs":{},"界":{"docs":{},"！":{"docs":{},"！":{"docs":{},"！":{"docs":{},"！":{"docs":{"alg/240_Search_a_2D_Matrix_II.html":{"ref":"alg/240_Search_a_2D_Matrix_II.html","tf":0.014925373134328358}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"个":{"docs":{},"数":{"docs":{},"举":{"docs":{},"例":{"docs":{},"，":{"docs":{},"当":{"docs":{},"层":{"docs":{},"数":{"docs":{},"等":{"docs":{},"于":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"个":{"docs":{},"数":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"当":{"docs":{},"前":{"docs":{},"的":{"docs":{},"值":{"docs":{},"会":{"docs":{},"被":{"docs":{},"加":{"docs":{},"入":{"docs":{},"结":{"docs":{},"果":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{},"递":{"docs":{},"归":{"docs":{},"时":{"docs":{},"会":{"docs":{},"先":{"docs":{},"加":{"docs":{},"入":{"docs":{},"[":{"1":{"docs":{},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"递":{"docs":{},"归":{"docs":{},"到":{"5":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"发":{"docs":{},"现":{"docs":{},"当":{"docs":{},"前":{"docs":{},"的":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"h":{"docs":{},"和":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"的":{"docs":{},"大":{"docs":{},"小":{"docs":{},"不":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"不":{"docs":{},"加":{"docs":{},"入":{"docs":{},"。":{"docs":{"alg/199_Binary_Tree_Right_Side_View.html":{"ref":"alg/199_Binary_Tree_Right_Side_View.html","tf":0.019230769230769232}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"寻":{"docs":{},"找":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{},"n":{"docs":{},"+":{"1":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"只":{"docs":{},"重":{"docs":{},"复":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"数":{"docs":{},"组":{"docs":{},"范":{"docs":{},"围":{"docs":{},"在":{"docs":{},"[":{"1":{"docs":{},",":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"的":{"docs":{},"开":{"docs":{},"始":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"相":{"docs":{},"比":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"另":{"docs":{},"外":{"docs":{},"多":{"docs":{},"加":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"y":{"docs":{},"，":{"docs":{},"用":{"docs":{},"来":{"docs":{},"从":{"docs":{},"头":{"docs":{},"寻":{"docs":{},"找":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"入":{"docs":{},"口":{"docs":{"alg/142_Linked_List_Cycle_II.html":{"ref":"alg/142_Linked_List_Cycle_II.html","tf":0.017543859649122806}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"同":{"docs":{},"链":{"docs":{},"表":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"检":{"docs":{},"测":{"docs":{},"#":{"1":{"4":{"2":{"docs":{},"，":{"docs":{},"找":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}},"当":{"docs":{},"快":{"docs":{},"指":{"docs":{},"针":{"docs":{},"和":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{},"重":{"docs":{},"叠":{"docs":{},"时":{"docs":{},"说":{"docs":{},"明":{"docs":{},"有":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"，":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"条":{"docs":{},"件":{"docs":{},"是":{"docs":{},"为":{"docs":{},"了":{"docs":{},"没":{"docs":{},"有":{"docs":{},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"跳":{"docs":{},"出":{"docs":{},"循":{"docs":{},"环":{"docs":{},"。":{"docs":{"alg/141_Linked_List_Cycle.html":{"ref":"alg/141_Linked_List_Cycle.html","tf":0.02127659574468085}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"求":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"间":{"docs":{},"值":{"docs":{},"，":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"时":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"，":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"时":{"docs":{},"f":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"=":{"docs":{},"=":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"alg/876_Middle_of_the_Linked_List.html":{"ref":"alg/876_Middle_of_the_Linked_List.html","tf":0.02857142857142857}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"排":{"docs":{},"主":{"docs":{},"要":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"：":{"docs":{},"将":{"docs":{},"数":{"docs":{},"组":{"docs":{},"用":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"函":{"docs":{},"数":{"docs":{},"分":{"docs":{},"为":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"分":{"docs":{},"别":{"docs":{},"进":{"docs":{},"行":{"docs":{},"排":{"docs":{},"序":{"docs":{},"。":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"最":{"docs":{},"坏":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"^":{"2":{"docs":{},")":{"docs":{},"出":{"docs":{},"现":{"docs":{},"在":{"docs":{},"递":{"docs":{},"归":{"docs":{},"次":{"docs":{},"数":{"docs":{},"接":{"docs":{},"近":{"docs":{},"数":{"docs":{},"组":{"docs":{},"长":{"docs":{},"度":{"docs":{},"/":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"极":{"docs":{},"度":{"docs":{},"不":{"docs":{},"均":{"docs":{},"匀":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"（":{"docs":{},"本":{"docs":{},"来":{"docs":{},"的":{"docs":{},"o":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"变":{"docs":{},"成":{"docs":{},"了":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"）":{"docs":{},"，":{"docs":{},"如":{"docs":{},"数":{"docs":{},"组":{"docs":{},"有":{"docs":{},"序":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"。":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}},"鸽":{"docs":{},"巢":{"docs":{},"原":{"docs":{},"理":{"docs":{},"/":{"docs":{},"抽":{"docs":{},"屉":{"docs":{},"原":{"docs":{},"理":{"docs":{},"+":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"，":{"docs":{},"算":{"docs":{},"出":{"docs":{},"中":{"docs":{},"位":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"：":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"，":{"docs":{},"对":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"与":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"进":{"docs":{},"行":{"docs":{},"统":{"docs":{},"计":{"docs":{},"，":{"docs":{},"若":{"docs":{},"大":{"docs":{},"于":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"左":{"docs":{},"边":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"（":{"docs":{},"可":{"docs":{},"以":{"docs":{},"想":{"docs":{},"成":{"docs":{},"原":{"docs":{},"来":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"docs":{},"相":{"docs":{},"等":{"docs":{},"的":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"所":{"docs":{},"以":{"docs":{},"超":{"docs":{},"过":{"docs":{},"了":{"docs":{},"限":{"docs":{},"制":{"docs":{},"）":{"docs":{},"，":{"docs":{},"则":{"docs":{},"移":{"docs":{},"动":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"为":{"docs":{},"r":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"空":{"docs":{},"间":{"docs":{},"o":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"alg/287_Find_the_Duplicate_Number.html":{"ref":"alg/287_Find_the_Duplicate_Number.html","tf":0.0136986301369863}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"去":{"docs":{},"掉":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"空":{"docs":{},"格":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"中":{"docs":{},"间":{"docs":{},"不":{"docs":{},"用":{"docs":{},"去":{"docs":{},"掉":{"docs":{},"，":{"docs":{},"如":{"docs":{},"+":{"0":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}},"docs":{}}}}}}}}}}}}}}}}}}}},"换":{"docs":{},"成":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}},"检":{"docs":{},"查":{"docs":{},"空":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}},"边":{"docs":{},"界":{"docs":{},"检":{"docs":{},"查":{"docs":{},"后":{"docs":{},"，":{"docs":{},"检":{"docs":{},"查":{"docs":{},"空":{"docs":{},"格":{"docs":{},"之":{"docs":{},"后":{"docs":{},"的":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"符":{"docs":{},"号":{"docs":{},"位":{"docs":{},"（":{"docs":{},"如":{"docs":{},"果":{"docs":{},"存":{"docs":{},"在":{"docs":{},"）":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}}}}}},"如":{"docs":{},"图":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"写":{"docs":{},"成":{"docs":{},"两":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}}}}}}}}}}}},"进":{"docs":{},"入":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"数":{"docs":{},"字":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"溢":{"docs":{},"出":{"docs":{"alg/8_String_to_Integer.html":{"ref":"alg/8_String_to_Integer.html","tf":0.009900990099009901}}}}}}}}}}}}}}}}}}}}},"什":{"docs":{},"么":{"docs":{},"地":{"docs":{},"方":{"docs":{},"学":{"docs":{},"到":{"docs":{},"过":{"docs":{},"链":{"docs":{},"表":{"docs":{},"？":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}}}}}}}},"操":{"docs":{},"作":{"docs":{},"：":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}},"（":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"或":{"docs":{},"者":{"docs":{},"队":{"docs":{},"列":{"docs":{},"）":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"。":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"比":{"docs":{},"较":{"docs":{},"快":{"docs":{},"，":{"docs":{},"递":{"docs":{},"归":{"docs":{},"代":{"docs":{},"码":{"docs":{},"少":{"docs":{},"。":{"docs":{},"有":{"docs":{},"些":{"docs":{},"写":{"docs":{},"法":{"docs":{},"是":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"的":{"docs":{},"变":{"docs":{},"形":{"docs":{},"。":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"移":{"docs":{},"位":{"docs":{},"，":{"docs":{},"一":{"docs":{},"元":{"docs":{},"操":{"docs":{},"作":{"docs":{},"符":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}}}},":":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}},"比":{"1":{"1":{"docs":{},"题":{"docs":{},"更":{"docs":{},"加":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"，":{"docs":{},"多":{"docs":{},"了":{"docs":{},"两":{"docs":{},"个":{"docs":{},"变":{"docs":{},"量":{"docs":{},"l":{"docs":{},"m":{"docs":{},",":{"docs":{"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{},"如":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"中":{"docs":{},"的":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"b":{"docs":{},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"中":{"docs":{},"存":{"docs":{},"放":{"docs":{},"的":{"docs":{},"对":{"docs":{},"象":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"链":{"docs":{},"表":{"docs":{},"连":{"docs":{},"接":{"docs":{},"存":{"docs":{},"储":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"垃":{"docs":{},"圾":{"docs":{},"收":{"docs":{},"集":{"docs":{},"中":{"docs":{},"的":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"x":{"docs":{},"文":{"docs":{},"件":{"docs":{},"系":{"docs":{},"统":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"堆":{"docs":{},"上":{"docs":{},"对":{"docs":{},"象":{"docs":{},"的":{"docs":{},"创":{"docs":{},"建":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"p":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"是":{"docs":{},"不":{"docs":{},"啦":{"docs":{},")":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"图":{"docs":{},"，":{"docs":{},"还":{"docs":{},"有":{"docs":{},"比":{"docs":{},"如":{"docs":{},"某":{"docs":{},"次":{"docs":{},"作":{"docs":{},"业":{"docs":{},"存":{"docs":{},"放":{"docs":{},"j":{"docs":{},"o":{"docs":{},"b":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"组":{"docs":{},"合":{"docs":{},":":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}},"链":{"docs":{},"表":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549}},"：":{"docs":{},"长":{"docs":{},"度":{"docs":{},"不":{"docs":{},"确":{"docs":{},"定":{"docs":{},"，":{"docs":{},"边":{"docs":{},"界":{"docs":{},"增":{"docs":{},"删":{"docs":{},"频":{"docs":{},"繁":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}}}}}}}}}}},"+":{"docs":{},"字":{"docs":{},"典":{"docs":{},"实":{"docs":{},"现":{"docs":{},"，":{"docs":{},"所":{"docs":{},"有":{"docs":{},"用":{"docs":{},"过":{"docs":{},"或":{"docs":{},"者":{"docs":{},"新":{"docs":{},"插":{"docs":{},"入":{"docs":{},"的":{"docs":{},"点":{"docs":{},"会":{"docs":{},"插":{"docs":{},"入":{"docs":{},"链":{"docs":{},"表":{"docs":{},"末":{"docs":{},"尾":{"docs":{},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"之":{"docs":{},"前":{"docs":{},")":{"docs":{},"，":{"docs":{},"删":{"docs":{},"除":{"docs":{},"时":{"docs":{},"取":{"docs":{},"最":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"指":{"docs":{},"向":{"docs":{},")":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"删":{"docs":{},"除":{"docs":{},"：":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"难":{"docs":{},"点":{"docs":{},"：":{"docs":{},"边":{"docs":{},"界":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"指":{"docs":{},"针":{"docs":{},"指":{"docs":{},"向":{"docs":{"1_linkedlist.html":{"ref":"1_linkedlist.html","tf":0.023255813953488372}}}}}}}}}}},"写":{"docs":{},"递":{"docs":{},"归":{"docs":{},"，":{"docs":{},"有":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"，":{"docs":{},"没":{"docs":{},"有":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"，":{"docs":{},"作":{"docs":{},"为":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"函":{"docs":{},"数":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"等":{"docs":{},"等":{"docs":{},"。":{"docs":{},"用":{"docs":{},"迭":{"docs":{},"代":{"docs":{},"的":{"docs":{},"话":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"数":{"docs":{},"据":{"docs":{},"结":{"docs":{},"构":{"docs":{},"，":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"还":{"docs":{},"是":{"docs":{},"队":{"docs":{},"列":{"docs":{},"。":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"入":{"docs":{},"栈":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"条":{"docs":{},"件":{"docs":{},"的":{"docs":{},"判":{"docs":{},"断":{"docs":{},"。":{"docs":{"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703}}}}}}}}}}}},"二":{"docs":{},"进":{"docs":{},"制":{"docs":{},"运":{"docs":{},"算":{"docs":{},"的":{"docs":{},"意":{"docs":{},"义":{"docs":{},"，":{"docs":{},"数":{"docs":{},"字":{"docs":{},"的":{"docs":{},"范":{"docs":{},"围":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}},":":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}},"在":{"docs":{},"溢":{"docs":{},"出":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"是":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"的":{"docs":{},"话":{"docs":{},"还":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"符":{"docs":{},"号":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"p":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},"中":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"分":{"docs":{},"为":{"docs":{},"三":{"docs":{},"步":{"docs":{},"：":{"docs":{},"定":{"docs":{},"义":{"docs":{},"递":{"docs":{},"归":{"docs":{},"函":{"docs":{},"数":{"docs":{},"以":{"docs":{},"及":{"docs":{},"它":{"docs":{},"的":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"，":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"递":{"docs":{},"归":{"docs":{},"关":{"docs":{},"系":{"docs":{},"(":{"docs":{},"改":{"docs":{},"指":{"docs":{},"针":{"docs":{},")":{"docs":{},"，":{"docs":{},"设":{"docs":{},"定":{"docs":{},"返":{"docs":{},"回":{"docs":{},"条":{"docs":{},"件":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"返":{"docs":{},"回":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},")":{"docs":{"alg/206_Reverse_Linked_List.html":{"ref":"alg/206_Reverse_Linked_List.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"割":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179}}}}}},"，":{"docs":{},"反":{"docs":{},"转":{"docs":{},"，":{"docs":{},"合":{"docs":{},"并":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179}}}}}}}}},"情":{"docs":{},"况":{"docs":{},"讨":{"docs":{},"论":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"句":{"docs":{},"是":{"docs":{},"对":{"docs":{},"于":{"docs":{},"空":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"（":{"docs":{},"递":{"docs":{},"归":{"docs":{},"出":{"docs":{},"口":{"docs":{},"条":{"docs":{},"件":{"docs":{},"）":{"docs":{},"。":{"docs":{},"后":{"docs":{},"面":{"docs":{},"是":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"的":{"docs":{},"左":{"docs":{},"边":{"docs":{},"和":{"docs":{},"右":{"docs":{},"边":{"docs":{},"接":{"docs":{},"住":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"若":{"docs":{},"两":{"docs":{},"边":{"docs":{},"都":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"返":{"docs":{},"回":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"任":{"docs":{},"意":{"docs":{},"一":{"docs":{},"边":{"docs":{},"有":{"docs":{},"值":{"docs":{},"，":{"docs":{},"就":{"docs":{},"返":{"docs":{},"回":{"docs":{},"有":{"docs":{},"值":{"docs":{},"的":{"docs":{},"一":{"docs":{},"边":{"docs":{},"。":{"docs":{"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"ref":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","tf":0.01694915254237288}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"见":{"docs":{},"图":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"，":{"docs":{},"d":{"docs":{},"u":{"docs":{},"m":{"docs":{},"m":{"docs":{},"y":{"docs":{},"的":{"docs":{},"作":{"docs":{},"用":{"docs":{},"是":{"docs":{},"创":{"docs":{},"建":{"docs":{},"新":{"docs":{},"的":{"docs":{},"链":{"docs":{},"表":{"docs":{},"头":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"结":{"docs":{},"果":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"用":{"docs":{},"，":{"docs":{},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"是":{"docs":{},"取":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"基":{"docs":{},"础":{"docs":{},"。":{"docs":{"alg/24_Swap_Nodes_in_Pairs.html":{"ref":"alg/24_Swap_Nodes_in_Pairs.html","tf":0.011363636363636364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"删":{"docs":{},"除":{"docs":{},"链":{"docs":{},"表":{"docs":{},"中":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"（":{"docs":{},"除":{"docs":{},"了":{"docs":{},"尾":{"docs":{},"节":{"docs":{},"点":{"docs":{},"）":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"修":{"docs":{},"改":{"docs":{},"值":{"docs":{},"和":{"docs":{},"指":{"docs":{},"针":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"要":{"docs":{},"删":{"docs":{},"除":{"docs":{},"尾":{"docs":{},"节":{"docs":{},"点":{"docs":{},"还":{"docs":{},"必":{"docs":{},"须":{"docs":{},"知":{"docs":{},"道":{"docs":{},"被":{"docs":{},"删":{"docs":{},"除":{"docs":{},"链":{"docs":{},"表":{"docs":{},"的":{"docs":{},"指":{"docs":{},"针":{"docs":{},"。":{"docs":{"alg/237_Delete_Node_in_a_Linked_List.html":{"ref":"alg/237_Delete_Node_in_a_Linked_List.html","tf":0.05555555555555555}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"相":{"docs":{},"等":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"删":{"docs":{},"除":{"docs":{},"中":{"docs":{},"间":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"三":{"docs":{},"步":{"docs":{},"操":{"docs":{},"作":{"docs":{},"：":{"docs":{},"找":{"docs":{},"到":{"docs":{},"最":{"docs":{},"小":{"docs":{},"值":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"，":{"docs":{},"和":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"交":{"docs":{},"换":{"docs":{},"，":{"docs":{},"删":{"docs":{},"除":{"docs":{},"那":{"docs":{},"个":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"。":{"docs":{"alg/450_Delete_Node_in_a_BST.html":{"ref":"alg/450_Delete_Node_in_a_BST.html","tf":0.037037037037037035}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"看":{"docs":{},"答":{"docs":{},"案":{"docs":{},"还":{"docs":{},"是":{"docs":{},"写":{"docs":{},"不":{"docs":{},"出":{"docs":{},"啊":{"docs":{},"啊":{"docs":{},"啊":{"docs":{},"啊":{"docs":{},"啊":{"docs":{},"啊":{"docs":{},"啊":{"docs":{},"啊":{"docs":{},"啊":{"docs":{"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358}}}}}}}}}}}}}}}}}}},"加":{"docs":{},"新":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"用":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"，":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"就":{"docs":{},"像":{"docs":{},"一":{"docs":{},"条":{"docs":{},"蛇":{"docs":{},"游":{"docs":{},"走":{"docs":{},"在":{"docs":{},"l":{"docs":{},"和":{"docs":{},"r":{"docs":{},"之":{"docs":{},"间":{"docs":{},"什":{"docs":{},"么":{"docs":{},"鬼":{"docs":{},"啦":{"docs":{},"。":{"docs":{},"这":{"docs":{},"里":{"docs":{},"有":{"docs":{},"个":{"docs":{},"坑":{"docs":{},"点":{"docs":{},"就":{"docs":{},"是":{"docs":{},"必":{"docs":{},"须":{"docs":{},"加":{"docs":{},"上":{"docs":{},"r":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"过":{"docs":{},"照":{"docs":{},"这":{"docs":{},"么":{"docs":{},"写":{"docs":{},"真":{"docs":{},"的":{"docs":{},"很":{"docs":{},"慢":{"docs":{},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{},"每":{"docs":{},"次":{"docs":{},"递":{"docs":{},"归":{"docs":{},"都":{"docs":{},"会":{"docs":{},"生":{"docs":{},"成":{"docs":{},"两":{"docs":{},"个":{"docs":{},"新":{"docs":{},"的":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"。":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"交":{"docs":{},"换":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"会":{"docs":{},"赋":{"docs":{},"值":{"docs":{},"很":{"docs":{},"多":{"docs":{},"次":{"docs":{},"的":{"docs":{},"解":{"docs":{},"法":{"docs":{},"，":{"docs":{},"[":{"0":{"docs":{},",":{"docs":{},"i":{"docs":{},")":{"docs":{},"区":{"docs":{},"间":{"docs":{},"为":{"0":{"docs":{},"，":{"docs":{},"[":{"docs":{},"i":{"docs":{},",":{"docs":{},"j":{"docs":{},")":{"docs":{},"区":{"docs":{},"间":{"docs":{},"为":{"1":{"docs":{},"，":{"docs":{},"[":{"docs":{},"j":{"docs":{},",":{"docs":{},"n":{"docs":{},")":{"docs":{},"区":{"docs":{},"间":{"docs":{},"为":{"2":{"docs":{},"。":{"docs":{"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.02631578947368421}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}}}}},"docs":{}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}},"你":{"docs":{},"�":{"docs":{},"�":{"docs":{"alg/83_Remove_Duplicates_from_Sorted_List.html":{"ref":"alg/83_Remove_Duplicates_from_Sorted_List.html","tf":0.014925373134328358}}}}},"新":{"docs":{},"建":{"docs":{},"两":{"docs":{},"个":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"，":{"docs":{},"小":{"docs":{},"于":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"去":{"docs":{},"左":{"docs":{},"边":{"docs":{},"，":{"docs":{},"大":{"docs":{},"于":{"docs":{},"去":{"docs":{},"右":{"docs":{},"边":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"拼":{"docs":{},"一":{"docs":{},"拼":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"无":{"docs":{},"脑":{"docs":{},"新":{"docs":{},"添":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"法":{"docs":{"alg/86_Partition_List.html":{"ref":"alg/86_Partition_List.html","tf":0.010526315789473684}}}}}}}}}}},"偶":{"docs":{},"数":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"会":{"docs":{},"被":{"docs":{},"分":{"docs":{},"为":{"1":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179}}},"docs":{}}}}}}}}}}},"奇":{"docs":{},"数":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"会":{"docs":{},"被":{"docs":{},"分":{"docs":{},"为":{"1":{"docs":{"alg/143_Reorder_List.html":{"ref":"alg/143_Reorder_List.html","tf":0.007462686567164179}}},"docs":{}}}}}}}}}}},"过":{"docs":{},"程":{"docs":{},"见":{"docs":{},"图":{"docs":{"alg/147_Insertion_Sort_List.html":{"ref":"alg/147_Insertion_Sort_List.html","tf":0.023809523809523808}}}}}},"优":{"docs":{},"先":{"docs":{},"队":{"docs":{},"列":{"docs":{},"重":{"docs":{},"写":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"的":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"从":{"docs":{},"小":{"docs":{},"到":{"docs":{},"大":{"docs":{},"取":{"docs":{},"点":{"docs":{},"。":{"docs":{"alg/23_Merge_k_Sorted_Lists.html":{"ref":"alg/23_Merge_k_Sorted_Lists.html","tf":0.006944444444444444}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"化":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}},"u":{"docs":{},"p":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.006369426751592357}}}}}},"s":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":2.008},"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":2.0217391304347827}}},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":2.0095238095238095}}}}}}},"主":{"docs":{},"要":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"：":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}},"作":{"docs":{},"用":{"docs":{},"：":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"时":{"docs":{},"间":{"docs":{},"和":{"docs":{},"空":{"docs":{},"间":{"docs":{},"的":{"docs":{},"开":{"docs":{},"销":{"docs":{},"。":{"docs":{},"高":{"docs":{},"的":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"alg/146_LRU_Cache.html":{"ref":"alg/146_LRU_Cache.html","tf":0.0031847133757961785}}}}}}}}}}}}}}}}}}}}}},"基":{"docs":{},"本":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"函":{"docs":{},"数":{"docs":{},"的":{"docs":{},"复":{"docs":{},"用":{"docs":{},"，":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"和":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"来":{"docs":{},"写":{"docs":{"alg/707_Design_Linked_List.html":{"ref":"alg/707_Design_Linked_List.html","tf":0.004291845493562232}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"类":{"docs":{},"型":{"docs":{},"：":{"docs":{},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}}}},"础":{"docs":{},"递":{"docs":{},"归":{"docs":{"alg/100_Same_Tree.html":{"ref":"alg/100_Same_Tree.html","tf":0.022727272727272728}},"，":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"左":{"docs":{},"边":{"docs":{},"右":{"docs":{},"边":{"docs":{},"要":{"docs":{},"接":{"docs":{},"住":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"。":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}},"快":{"docs":{},"排":{"docs":{},":":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}}}},"倒":{"docs":{},"数":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"走":{"docs":{},"到":{"docs":{},"倒":{"docs":{},"数":{"docs":{},"前":{"docs":{},"面":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"高":{"docs":{},"票":{"docs":{},"答":{"docs":{},"案":{"docs":{},"改":{"docs":{},"写":{"docs":{},"：":{"docs":{},"快":{"docs":{},"慢":{"docs":{},"指":{"docs":{},"针":{"docs":{"alg/19_Remove_Nth_Node_From_End_of_List.html":{"ref":"alg/19_Remove_Nth_Node_From_End_of_List.html","tf":0.00684931506849315}}}}}}}}}}}}},"另":{"docs":{},"外":{"docs":{},"在":{"2":{"3":{"7":{"docs":{},"(":{"docs":{},"l":{"docs":{},"c":{"docs":{},"a":{"docs":{},")":{"docs":{},"中":{"docs":{},"不":{"docs":{},"用":{"docs":{},"加":{"docs":{},"判":{"docs":{},"断":{"docs":{},"条":{"docs":{},"件":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{},"它":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}},"一":{"docs":{},"种":{"docs":{},"交":{"docs":{},"换":{"docs":{},"法":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}},"构":{"docs":{},"建":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},":":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}},"造":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"值":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"先":{"docs":{},"找":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"，":{"docs":{},"再":{"docs":{},"构":{"docs":{},"造":{"docs":{},"左":{"docs":{},"右":{"docs":{},"两":{"docs":{},"边":{"docs":{},"的":{"docs":{},"子":{"docs":{},"树":{"docs":{},"。":{"docs":{},"和":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"二":{"docs":{},"分":{"docs":{},"法":{"docs":{},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"只":{"docs":{},"是":{"docs":{},"把":{"docs":{},"求":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"换":{"docs":{},"成":{"docs":{},"了":{"docs":{},"找":{"docs":{},"最":{"docs":{},"大":{"docs":{},"值":{"docs":{},"的":{"docs":{},"函":{"docs":{},"数":{"docs":{},"。":{"docs":{"alg/654_Maximum_Binary_Tree.html":{"ref":"alg/654_Maximum_Binary_Tree.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"树":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}},"有":{"docs":{},"什":{"docs":{},"么":{"docs":{},"用":{"docs":{},"：":{"docs":{},"把":{"docs":{},"目":{"docs":{},"录":{"docs":{},"代":{"docs":{},"到":{"docs":{},"以":{"docs":{},"上":{"docs":{},"所":{"docs":{},"有":{"docs":{},"的":{"docs":{},"算":{"docs":{},"法":{"docs":{},"中":{"docs":{},"看":{"docs":{},"有":{"docs":{},"什":{"docs":{},"么":{"docs":{},"用":{"docs":{},"。":{"docs":{},"如":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"2_tree.html":{"ref":"2_tree.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"坑":{"docs":{},"：":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"坑":{"docs":{},"：":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364},"alg/94_Binary_Tree_Inorder_Traversal.html":{"ref":"alg/94_Binary_Tree_Inorder_Traversal.html","tf":0.008771929824561403},"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}},"右":{"docs":{},"交":{"docs":{},"换":{"docs":{"alg/344_Reverse_String.html":{"ref":"alg/344_Reverse_String.html","tf":0.01694915254237288}}}}}},"栈":{"docs":{},"：":{"docs":{},"先":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"右":{"docs":{},"边":{"docs":{},"再":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"左":{"docs":{},"边":{"docs":{},"，":{"docs":{},"保":{"docs":{},"持":{"docs":{},"左":{"docs":{},"边":{"docs":{},"元":{"docs":{},"素":{"docs":{},"永":{"docs":{},"远":{"docs":{},"在":{"docs":{},"栈":{"docs":{},"顶":{"docs":{},"（":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"）":{"docs":{},"，":{"docs":{},"或":{"docs":{},"者":{"docs":{},"还":{"docs":{},"有":{"docs":{},"一":{"docs":{},"种":{"docs":{},"操":{"docs":{},"作":{"docs":{},"是":{"docs":{},"当":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"入":{"docs":{},"栈":{"docs":{},"时":{"docs":{},"先":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"点":{"docs":{"alg/144_Binary_Tree_Preorder_Traversal.html":{"ref":"alg/144_Binary_Tree_Preorder_Traversal.html","tf":0.009345794392523364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"。":{"docs":{},"注":{"docs":{},"意":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"的":{"docs":{},"用":{"docs":{},"法":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"有":{"docs":{},"时":{"docs":{},"候":{"docs":{},"用":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"，":{"docs":{},"有":{"docs":{},"时":{"docs":{},"候":{"docs":{},"用":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"。":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"一":{"docs":{},"般":{"docs":{},"用":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"容":{"docs":{},"量":{"docs":{},"满":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"不":{"docs":{},"会":{"docs":{},"抛":{"docs":{},"出":{"docs":{},"异":{"docs":{},"常":{"docs":{},"而":{"docs":{},"是":{"docs":{},"返":{"docs":{},"回":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"。":{"docs":{"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"中":{"docs":{},"需":{"docs":{},"要":{"docs":{},"留":{"docs":{},"一":{"docs":{},"个":{"docs":{"alg/32_Longest_Valid_Parentheses.html":{"ref":"alg/32_Longest_Valid_Parentheses.html","tf":0.018867924528301886}}}}}}}}},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"的":{"docs":{},"栈":{"docs":{},"：":{"docs":{},"和":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"是":{"docs":{},"，":{"docs":{},"虽":{"docs":{},"然":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"也":{"docs":{},"有":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"它":{"docs":{},"和":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"样":{"docs":{},"是":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"节":{"docs":{},"点":{"docs":{},"在":{"docs":{},"栈":{"docs":{},"底":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"一":{"docs":{},"旦":{"docs":{},"进":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"中":{"docs":{},"间":{"docs":{},"过":{"docs":{},"程":{"docs":{},"就":{"docs":{},"不":{"docs":{},"可":{"docs":{},"能":{"docs":{},"是":{"docs":{},"空":{"docs":{},"。":{"docs":{"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"面":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"交":{"docs":{},"换":{"docs":{},"过":{"docs":{},"来":{"docs":{},"之":{"docs":{},"后":{"docs":{},"还":{"docs":{},"要":{"docs":{},"再":{"docs":{},"比":{"docs":{},"一":{"docs":{},"次":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}},"当":{"docs":{},"然":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"和":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"一":{"docs":{},"样":{"docs":{},"加":{"docs":{},"在":{"docs":{},"判":{"docs":{},"断":{"docs":{},"条":{"docs":{},"件":{"docs":{},"上":{"docs":{"alg/145_Binary_Tree_Postorder_Traversal.html":{"ref":"alg/145_Binary_Tree_Postorder_Traversal.html","tf":0.006097560975609756}}}}}}}}}}}}}}}}}}}}},"记":{"docs":{},"得":{"docs":{},"去":{"docs":{},"看":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"递":{"docs":{},"归":{"docs":{},"解":{"docs":{},"法":{"docs":{},"。":{"docs":{"alg/102_Binary_Tree_Level_Order_Traversal.html":{"ref":"alg/102_Binary_Tree_Level_Order_Traversal.html","tf":0.023255813953488372}}}}}}}}}}}},"加":{"docs":{},"上":{"docs":{},"=":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"每":{"docs":{},"次":{"docs":{},"相":{"docs":{},"等":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"都":{"docs":{},"要":{"docs":{},"再":{"docs":{},"进":{"docs":{},"行":{"docs":{},"一":{"docs":{},"次":{"docs":{},"没":{"docs":{},"必":{"docs":{},"要":{"docs":{},"的":{"docs":{},"递":{"docs":{},"归":{"docs":{},"。":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"录":{"docs":{},"每":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"之":{"docs":{},"前":{"docs":{},"的":{"docs":{},"符":{"docs":{},"号":{"docs":{},"位":{"docs":{},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"，":{"docs":{},"根":{"docs":{},"据":{"docs":{},"符":{"docs":{},"号":{"docs":{},"位":{"docs":{},"的":{"docs":{},"不":{"docs":{},"同":{"docs":{},"采":{"docs":{},"用":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{},"需":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"也":{"docs":{},"需":{"docs":{},"要":{"docs":{},"之":{"docs":{},"前":{"docs":{},"记":{"docs":{},"录":{"docs":{},"的":{"docs":{},"符":{"docs":{},"号":{"docs":{},"位":{"docs":{},"对":{"docs":{},"其":{"docs":{},"进":{"docs":{},"行":{"docs":{},"计":{"docs":{},"算":{"docs":{"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"z":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}},"i":{"docs":{},"g":{"docs":{},"z":{"docs":{},"a":{"docs":{},"g":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":1.4389880952380951}},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{},",":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}},"原":{"docs":{},"来":{"docs":{},"的":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"最":{"docs":{},"好":{"docs":{},"用":{"docs":{},"d":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"+":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}},"改":{"docs":{},"进":{"docs":{},"版":{"docs":{},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{},"，":{"docs":{},"在":{"docs":{},"添":{"docs":{},"加":{"docs":{},"元":{"docs":{},"素":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"加":{"docs":{},"在":{"docs":{},"前":{"docs":{},"面":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"用":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"整":{"docs":{},"个":{"docs":{},"数":{"docs":{},"组":{"docs":{},"。":{"docs":{"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"ref":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"ref":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","tf":0.0196078431372549}}}},"和":{"docs":{},"后":{"docs":{},"序":{"docs":{},"不":{"docs":{},"能":{"docs":{},"确":{"docs":{},"定":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"因":{"docs":{},"为":{"docs":{},"：":{"docs":{},"前":{"docs":{},"序":{"docs":{},"根":{"docs":{},"左":{"docs":{},"右":{"docs":{},"，":{"docs":{},"中":{"docs":{},"序":{"docs":{},"左":{"docs":{},"根":{"docs":{},"右":{"docs":{},"，":{"docs":{},"后":{"docs":{},"序":{"docs":{},"左":{"docs":{},"右":{"docs":{},"根":{"docs":{},"。":{"docs":{},"前":{"docs":{},"序":{"docs":{},"和":{"docs":{},"后":{"docs":{},"序":{"docs":{},"代":{"docs":{},"表":{"docs":{},"的":{"docs":{},"都":{"docs":{},"是":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"上":{"docs":{},"下":{"docs":{},"关":{"docs":{},"系":{"docs":{},"，":{"docs":{},"只":{"docs":{},"有":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"代":{"docs":{},"表":{"docs":{},"了":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"关":{"docs":{},"系":{"docs":{},"。":{"docs":{},"只":{"docs":{},"有":{"docs":{},"同":{"docs":{},"时":{"docs":{},"知":{"docs":{},"道":{"docs":{},"了":{"docs":{},"左":{"docs":{},"右":{"docs":{},"和":{"docs":{},"上":{"docs":{},"下":{"docs":{},"的":{"docs":{},"关":{"docs":{},"系":{"docs":{},"才":{"docs":{},"能":{"docs":{},"确":{"docs":{},"定":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"。":{"docs":{"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"ref":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"提":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"ref":"alg/26_Remove_Duplicates_from_Sorted_Array.html","tf":0.047619047619047616}}}}}}}}}}},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"升":{"docs":{},"级":{"docs":{},"版":{"docs":{},"，":{"docs":{},"向":{"docs":{},"右":{"docs":{},"压":{"docs":{},"扁":{"docs":{},"一":{"docs":{},"个":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"，":{"docs":{},"写":{"docs":{},"不":{"docs":{},"出":{"docs":{},"的":{"docs":{},"。":{"docs":{},"思":{"docs":{},"路":{"docs":{},"是":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"加":{"docs":{},"上":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},"，":{"docs":{},"加":{"docs":{},"上":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"中":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"设":{"docs":{},"置":{"docs":{},"计":{"docs":{},"数":{"docs":{},"器":{"docs":{"alg/230_Kth_Smallest_Element_in_a_BST.html":{"ref":"alg/230_Kth_Smallest_Element_in_a_BST.html","tf":0.02127659574468085}}}}}}}}}},"，":{"docs":{},"当":{"docs":{},"l":{"docs":{},"m":{"docs":{"alg/42_Trapping_Rain_Water.html":{"ref":"alg/42_Trapping_Rain_Water.html","tf":0.029411764705882353}}}}}},"间":{"docs":{},"和":{"docs":{},"旧":{"docs":{},"值":{"docs":{},"进":{"docs":{},"行":{"docs":{},"比":{"docs":{},"较":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}}}}}}}}}},"就":{"docs":{},"像":{"docs":{},"这":{"docs":{},"样":{"docs":{},"：":{"docs":{},"r":{"docs":{},"e":{"docs":{"alg/897_Increasing_Order_Search_Tree.html":{"ref":"alg/897_Increasing_Order_Search_Tree.html","tf":0.02040816326530612}}}}}}}}},"区":{"docs":{},"别":{"docs":{},"点":{"docs":{},"在":{"docs":{},"s":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"函":{"docs":{},"数":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}}}}}}}}}}}}}}}},"完":{"docs":{},"全":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"子":{"docs":{},"树":{"docs":{},"结":{"docs":{},"构":{"docs":{},"：":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}}}}}}}}}}}},"部":{"docs":{},"分":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"子":{"docs":{},"树":{"docs":{},"结":{"docs":{},"构":{"docs":{},",":{"docs":{"alg/572_Subtree_of_Another_Tree.html":{"ref":"alg/572_Subtree_of_Another_Tree.html","tf":0.007874015748031496}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"，":{"docs":{},"先":{"docs":{},"交":{"docs":{},"换":{"docs":{},"后":{"docs":{},"递":{"docs":{},"归":{"docs":{"alg/226_Invert_Binary_Tree.html":{"ref":"alg/226_Invert_Binary_Tree.html","tf":0.008547008547008548}}}}}}}}}}}},"越":{"docs":{},"界":{"docs":{},"且":{"docs":{},"它":{"docs":{},"的":{"docs":{},"前":{"docs":{},"面":{"docs":{},"是":{"docs":{},"偶":{"docs":{},"数":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285}}}}}}}}}}}}}},"\\":{"docs":{"alg/104_Maximum_Depth_of_Binary_Tree.html":{"ref":"alg/104_Maximum_Depth_of_Binary_Tree.html","tf":0.033707865168539325}}},"保":{"docs":{},"证":{"docs":{},"树":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"任":{"docs":{},"意":{"docs":{},"一":{"docs":{},"边":{"docs":{},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"有":{"docs":{},"高":{"docs":{},"度":{"docs":{},"的":{"docs":{},"一":{"docs":{},"边":{"docs":{"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"持":{"docs":{},"奇":{"docs":{},"偶":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"，":{"docs":{},"用":{"docs":{},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285}}}}}}}}}}}}}}},"相":{"docs":{},"当":{"docs":{},"于":{"docs":{"alg/111_Minimum_Depth_of_Binary_Tree.html":{"ref":"alg/111_Minimum_Depth_of_Binary_Tree.html","tf":0.012658227848101266}}}}},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{},"完":{"docs":{},"全":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"深":{"docs":{},"度":{"docs":{},"为":{"docs":{},"⌊":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"⌋":{"docs":{},"+":{"1":{"docs":{},"。":{"docs":{},"如":{"4":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"树":{"docs":{},"有":{"docs":{},"⌊":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"4":{"docs":{},")":{"docs":{},"⌋":{"docs":{},"+":{"1":{"docs":{},"=":{"3":{"docs":{},"层":{"docs":{},"。":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}},"docs":{}}},"docs":{}}}}},"docs":{}}}}}}}}}}}}},"docs":{}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"则":{"docs":{},"n":{"0":{"docs":{},"＝":{"docs":{},"n":{"2":{"docs":{},"＋":{"1":{"docs":{},"。":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}},"docs":{}}},"docs":{}}}},"docs":{}}},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"法":{"docs":{},"求":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"不":{"docs":{},"能":{"docs":{},"判":{"docs":{},"断":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"，":{"docs":{},"且":{"docs":{},"为":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"直":{"docs":{},"接":{"docs":{},"在":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"常":{"docs":{},"见":{"docs":{},"包":{"docs":{},"装":{"docs":{},"类":{"docs":{},"中":{"docs":{},"调":{"docs":{},"用":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"和":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"进":{"docs":{},"行":{"docs":{},"查":{"docs":{},"看":{"docs":{},"。":{"docs":{},"但":{"docs":{},"是":{"docs":{},"常":{"docs":{},"识":{"docs":{},"还":{"docs":{},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"些":{"docs":{},"记":{"docs":{},"忆":{"docs":{},"。":{"docs":{},"溢":{"docs":{},"出":{"docs":{},"之":{"docs":{},"后":{"docs":{},"会":{"docs":{},"在":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"和":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"值":{"docs":{},"中":{"docs":{},"相":{"docs":{},"互":{"docs":{},"转":{"docs":{},"换":{"docs":{},"。":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"度":{"docs":{},"为":{"2":{"docs":{},"的":{"docs":{},"结":{"docs":{},"点":{"docs":{},"数":{"docs":{},"为":{"docs":{},"n":{"2":{"docs":{},",":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}},"docs":{}}}}}}}},"docs":{}}},"补":{"docs":{},"一":{"docs":{},"下":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"性":{"docs":{},"质":{"docs":{},"：":{"docs":{"alg/222_Count_Complete_Tree_Nodes.html":{"ref":"alg/222_Count_Complete_Tree_Nodes.html","tf":0.010869565217391304}}}}}}}}}}}},"路":{"docs":{},"径":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"d":{"docs":{},"f":{"docs":{},"s":{"docs":{},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"为":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"。":{"docs":{},"分":{"docs":{},"情":{"docs":{},"况":{"docs":{},"讨":{"docs":{},"论":{"docs":{},"，":{"docs":{},"空":{"docs":{},"节":{"docs":{},"点":{"docs":{},"时":{"docs":{},"说":{"docs":{},"明":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"为":{"docs":{},"空":{"docs":{},"。":{"docs":{},"比":{"docs":{},"如":{"docs":{},"[":{"1":{"docs":{},",":{"2":{"docs":{},",":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"]":{"docs":{},"这":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"返":{"docs":{},"回":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"算":{"docs":{},"的":{"docs":{},"是":{"docs":{},"到":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"和":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"判":{"docs":{},"断":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"alg/112_Path_Sum.html":{"ref":"alg/112_Path_Sum.html","tf":0.02631578947368421}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"然":{"docs":{},"后":{"docs":{},"就":{"docs":{},"有":{"docs":{},"了":{"docs":{},"这":{"docs":{},"种":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"相":{"docs":{},"当":{"docs":{},"于":{"docs":{},"一":{"docs":{},"个":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"酱":{"docs":{},"紫":{"docs":{},"就":{"docs":{},"减":{"docs":{},"少":{"docs":{},"了":{"docs":{},"创":{"docs":{},"建":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"的":{"docs":{},"次":{"docs":{},"数":{"docs":{},"。":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"根":{"docs":{},"据":{"docs":{},"题":{"docs":{},"意":{"docs":{},"在":{"docs":{},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"加":{"docs":{},"入":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"条":{"docs":{},"件":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"以":{"docs":{},"及":{"docs":{},"i":{"docs":{},"f":{"docs":{"alg/113_Path_Sum_II.html":{"ref":"alg/113_Path_Sum_II.html","tf":0.0048543689320388345}}}}}}}}}}}}}}}}}}}}}}}}}},"依":{"docs":{},"然":{"docs":{},"是":{"docs":{},"指":{"docs":{},"针":{"docs":{},"法":{"docs":{},"，":{"docs":{},"从":{"2":{"docs":{},"开":{"docs":{},"始":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{},"i":{"docs":{},"作":{"docs":{},"为":{"docs":{},"一":{"docs":{},"个":{"docs":{},"试":{"docs":{},"探":{"docs":{},"指":{"docs":{},"针":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"i":{"docs":{},"和":{"docs":{},"k":{"docs":{"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"ref":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","tf":0.0625}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}},"有":{"docs":{},"些":{"docs":{},"答":{"docs":{},"案":{"docs":{},"里":{"docs":{},"是":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"为":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"直":{"docs":{},"接":{"docs":{},"判":{"docs":{},"断":{"docs":{},"。":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}}}}},"循":{"docs":{},"环":{"docs":{},"写":{"docs":{},"法":{"docs":{},"会":{"docs":{},"比":{"docs":{},"较":{"docs":{},"快":{"docs":{},"。":{"docs":{"alg/700_Search_in_a_Binary_Search_Tree.html":{"ref":"alg/700_Search_in_a_Binary_Search_Tree.html","tf":0.013333333333333334}}}}}}}}},"中":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"依":{"docs":{},"次":{"docs":{},"和":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"小":{"docs":{},"于":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"，":{"docs":{},"就":{"docs":{},"和":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"中":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"进":{"docs":{},"行":{"docs":{},"交":{"docs":{},"换":{"docs":{},"，":{"docs":{},"保":{"docs":{},"证":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"前":{"docs":{},"面":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"都":{"docs":{},"是":{"docs":{},"小":{"docs":{},"于":{"docs":{},"等":{"docs":{},"于":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"的":{"docs":{},"。":{"docs":{},"最":{"docs":{},"后":{"docs":{},"将":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"中":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"和":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"交":{"docs":{},"换":{"docs":{},"。":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"等":{"docs":{},"价":{"docs":{},"的":{"docs":{},"写":{"docs":{},"法":{"docs":{},"：":{"docs":{},"把":{"docs":{},"i":{"docs":{},"f":{"docs":{"alg/701_Insert_into_a_Binary_Search_Tree.html":{"ref":"alg/701_Insert_into_a_Binary_Search_Tree.html","tf":0.006666666666666667}}}}}}}}}}},"每":{"docs":{},"段":{"docs":{},"都":{"docs":{},"需":{"docs":{},"要":{"docs":{},"满":{"docs":{},"足":{"docs":{},"区":{"docs":{},"间":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"否":{"docs":{},"则":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}}}}}}}}}}}}}}}}}}}}},"验":{"docs":{},"证":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{"alg/98_Validate_Binary_Search_Tree.html":{"ref":"alg/98_Validate_Binary_Search_Tree.html","tf":0.011764705882352941}}}}}}}}}},"多":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"组":{"docs":{},"或":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"某":{"docs":{},"些":{"docs":{},"操":{"docs":{},"作":{"docs":{},"达":{"docs":{},"到":{"docs":{},"线":{"docs":{},"性":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"。":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"找":{"docs":{},"到":{"docs":{},"指":{"docs":{},"针":{"docs":{},"移":{"docs":{},"动":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"，":{"docs":{},"贪":{"docs":{},"心":{"docs":{},"比":{"docs":{},"什":{"docs":{},"么":{"docs":{},"，":{"docs":{},"边":{"docs":{},"界":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}}}}}}}}}}}}}}}}}}},"出":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"中":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"没":{"docs":{},"有":{"docs":{},"重":{"docs":{},"复":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"。":{"docs":{},"建":{"docs":{},"立":{"docs":{},"一":{"docs":{},"个":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"字":{"docs":{},"母":{"docs":{},"哈":{"docs":{},"希":{"docs":{},"表":{"docs":{},"，":{"docs":{},"进":{"docs":{},"行":{"docs":{},"计":{"docs":{},"数":{"docs":{},"和":{"docs":{},"检":{"docs":{},"查":{"docs":{},"。":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"移":{"docs":{},"除":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},":":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}}}}}}},"位":{"docs":{},"法":{"docs":{},"，":{"docs":{},"根":{"docs":{},"据":{"docs":{},"最":{"docs":{},"右":{"docs":{},"边":{"docs":{},"一":{"docs":{},"位":{"docs":{},"是":{"1":{"docs":{},"的":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"n":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}}}},"docs":{}}}}}}}}},"用":{"1":{"docs":{},"作":{"docs":{},"为":{"docs":{},"m":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"后":{"docs":{},"异":{"docs":{},"或":{"docs":{},"算":{"docs":{},"出":{"docs":{},"个":{"docs":{},"数":{"docs":{},"。":{"docs":{"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085}}}}}}}}}}}}}}}}},"docs":{}}}}}},"贪":{"docs":{},"心":{"docs":{},":":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}},"通":{"docs":{},"常":{"docs":{},"时":{"docs":{},"左":{"docs":{},"右":{"docs":{},"指":{"docs":{},"针":{"docs":{},"从":{"docs":{},"两":{"docs":{},"边":{"docs":{},"走":{"docs":{},"(":{"docs":{},"或":{"docs":{},"单":{"docs":{},"边":{"docs":{},")":{"docs":{},"，":{"docs":{},"有":{"docs":{},"时":{"docs":{},"候":{"docs":{},"会":{"docs":{},"有":{"docs":{},"第":{"docs":{},"三":{"docs":{},"个":{"docs":{},"指":{"docs":{},"针":{"docs":{},"。":{"docs":{"3_partition.html":{"ref":"3_partition.html","tf":0.043478260869565216}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"再":{"docs":{},"次":{"docs":{},"递":{"docs":{},"归":{"docs":{},"l":{"docs":{},"t":{"docs":{},"左":{"docs":{},"边":{"docs":{},"和":{"docs":{},"g":{"docs":{},"t":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"部":{"docs":{},"分":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}}},"填":{"docs":{},"坑":{"docs":{},"法":{"docs":{},"过":{"docs":{},"程":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}},"小":{"docs":{},"数":{"docs":{},"组":{"docs":{},"选":{"docs":{},"用":{"docs":{},"插":{"docs":{},"入":{"docs":{},"排":{"docs":{},"序":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}},"随":{"docs":{},"机":{"docs":{},"化":{"docs":{},":":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}},"选":{"docs":{},"择":{"docs":{},"一":{"docs":{},"个":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"和":{"docs":{},"最":{"docs":{},"左":{"docs":{},"边":{"docs":{},"数":{"docs":{},"字":{"docs":{},"交":{"docs":{},"换":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":0.002257336343115124}}}}}}}}}}}}}}}}}}}}}},"�":{"docs":{},"�":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"alg/Quick_Sort.html":{"ref":"alg/Quick_Sort.html","tf":5}}}}}}}}},"荷":{"docs":{},"兰":{"docs":{},"国":{"docs":{},"旗":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"同":{"docs":{},"快":{"docs":{},"排":{"docs":{},"三":{"docs":{},"路":{"docs":{},"解":{"docs":{},"法":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"l":{"docs":{},"t":{"docs":{},"是":{"docs":{},"从":{"0":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"p":{"docs":{},"i":{"docs":{},"v":{"docs":{},"o":{"docs":{},"t":{"docs":{},"不":{"docs":{},"是":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"时":{"docs":{},"间":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"度":{"docs":{},"o":{"docs":{},"(":{"docs":{},"n":{"docs":{},")":{"docs":{"alg/75_Sort_Colors.html":{"ref":"alg/75_Sort_Colors.html","tf":0.02631578947368421}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"条":{"docs":{},"件":{"docs":{},"需":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"是":{"docs":{},"h":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}}}}}}}}},"条":{"docs":{},"件":{"docs":{},"不":{"docs":{},"能":{"docs":{},"颠":{"docs":{},"倒":{"docs":{},"。":{"docs":{},"k":{"docs":{},"指":{"docs":{},"针":{"docs":{},"指":{"docs":{},"向":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"必":{"docs":{},"须":{"docs":{},"小":{"docs":{},"于":{"docs":{},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"才":{"docs":{},"能":{"docs":{},"和":{"docs":{},"h":{"docs":{},"a":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"中":{"docs":{},"的":{"docs":{},"j":{"docs":{},"指":{"docs":{},"针":{"docs":{},"比":{"docs":{},"较":{"docs":{},"，":{"docs":{},"防":{"docs":{},"止":{"docs":{},"循":{"docs":{},"环":{"docs":{},"内":{"docs":{},"部":{"docs":{},"的":{"docs":{},"指":{"docs":{},"针":{"docs":{},"改":{"docs":{},"变":{"docs":{},"使":{"docs":{},"得":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"条":{"docs":{},"件":{"docs":{},"语":{"docs":{},"句":{"docs":{},"溢":{"docs":{},"出":{"docs":{},"，":{"docs":{},"如":{"docs":{},"[":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"alg/28_Implement_strStr.html":{"ref":"alg/28_Implement_strStr.html","tf":0.015625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"紫":{"docs":{},"色":{"docs":{},"是":{"docs":{},"i":{"docs":{},"经":{"docs":{},"过":{"docs":{},"的":{"docs":{},"区":{"docs":{},"域":{"docs":{},"，":{"docs":{},"绿":{"docs":{},"色":{"docs":{},"是":{"docs":{},"l":{"docs":{},",":{"docs":{"alg/15_3Sum.html":{"ref":"alg/15_3Sum.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}},"外":{"docs":{},"部":{"docs":{},"增":{"docs":{},"加":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"重":{"docs":{},"复":{"docs":{},"，":{"docs":{},"内":{"docs":{},"部":{"docs":{},"修":{"docs":{},"改":{"docs":{},"起":{"docs":{},"始":{"docs":{},"值":{"docs":{},"。":{"docs":{"alg/18_4Sum.html":{"ref":"alg/18_4Sum.html","tf":0.013157894736842105}}}}}}}}}}}}}}}}}}}}}},"写":{"docs":{},"成":{"docs":{},"单":{"docs":{},"独":{"docs":{},"的":{"docs":{},"函":{"docs":{},"数":{"docs":{},"：":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285}}}}}}}}}},"首":{"docs":{},"先":{"docs":{},"使":{"docs":{},"用":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"找":{"docs":{},"到":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"奇":{"docs":{},"数":{"docs":{},"和":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"偶":{"docs":{},"数":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"位":{"docs":{},"置":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"进":{"docs":{},"行":{"docs":{},"交":{"docs":{},"换":{"docs":{},"。":{"docs":{"alg/905_Sort_Array_By_Parity.html":{"ref":"alg/905_Sort_Array_By_Parity.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"预":{"docs":{},"先":{"docs":{},"计":{"docs":{},"算":{"docs":{"alg/7_Reverse_Integer.html":{"ref":"alg/7_Reverse_Integer.html","tf":0.00819672131147541}}}}}},"两":{"docs":{},"个":{"docs":{},"链":{"docs":{},"表":{"docs":{},"相":{"docs":{},"加":{"docs":{},"：":{"docs":{},"可":{"docs":{},"以":{"docs":{},"分":{"docs":{},"为":{"docs":{},"指":{"docs":{},"针":{"docs":{},"操":{"docs":{},"作":{"docs":{},"和":{"docs":{},"值":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"指":{"docs":{},"针":{"docs":{},"有":{"docs":{},"d":{"docs":{},"u":{"docs":{},"m":{"docs":{},"m":{"docs":{},"y":{"docs":{},",":{"docs":{"alg/2_Add_Two_Numbers.html":{"ref":"alg/2_Add_Two_Numbers.html","tf":0.00819672131147541}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"栈":{"docs":{},"做":{"docs":{},"法":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"p":{"docs":{},"e":{"docs":{},"e":{"docs":{},"k":{"docs":{},"和":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"方":{"docs":{},"法":{"docs":{},"。":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"两":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"，":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}}}}}}}}}}}}}}}}}}},"倍":{"docs":{},"的":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"和":{"docs":{},"减":{"docs":{},"去":{"docs":{},"原":{"docs":{},"数":{"docs":{},"组":{"docs":{},"和":{"docs":{},",":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}}}}}}}}}}}}}}},"向":{"docs":{},"右":{"docs":{},"旋":{"docs":{},"转":{"docs":{},"：":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}}}},"左":{"docs":{},"旋":{"docs":{},"转":{"docs":{"alg/189_Rotate_Array.html":{"ref":"alg/189_Rotate_Array.html","tf":0.005813953488372093}}}}}},"给":{"docs":{},"出":{"docs":{},"栈":{"docs":{},"的":{"docs":{},"压":{"docs":{},"入":{"docs":{},"序":{"docs":{},"列":{"1":{"2":{"3":{"4":{"5":{"docs":{},"，":{"docs":{},"判":{"docs":{},"断":{"docs":{},"弹":{"docs":{},"出":{"docs":{},"序":{"docs":{},"列":{"4":{"5":{"2":{"3":{"1":{"docs":{},"是":{"docs":{},"否":{"docs":{},"正":{"docs":{},"确":{"docs":{},":":{"docs":{"4_stack.html":{"ref":"4_stack.html","tf":0.02702702702702703}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"根":{"docs":{},"据":{"docs":{},"情":{"docs":{},"况":{"docs":{},"一":{"docs":{},"可":{"docs":{},"以":{"docs":{},"写":{"docs":{},"出":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"s":{"1":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}},"docs":{}}}}}}}}}}}}}}},"二":{"docs":{},"给":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"循":{"docs":{},"环":{"docs":{},"加":{"docs":{},"上":{"docs":{},"限":{"docs":{},"制":{"docs":{},"条":{"docs":{},"件":{"docs":{},",":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}}}}}}}}}}}},"条":{"docs":{},"件":{"docs":{},"判":{"docs":{},"断":{"docs":{},"，":{"docs":{},"在":{"docs":{},"不":{"docs":{},"为":{"docs":{},"空":{"docs":{},"的":{"docs":{},"格":{"docs":{},"子":{"docs":{},"中":{"docs":{},"，":{"docs":{},"同":{"docs":{},"一":{"docs":{},"列":{"docs":{},"没":{"docs":{},"有":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"同":{"docs":{},"一":{"docs":{},"行":{"docs":{},"没":{"docs":{},"有":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"没":{"docs":{},"有":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{},"特":{"docs":{},"别":{"docs":{},"注":{"docs":{},"意":{"docs":{},"边":{"docs":{},"界":{"docs":{},"的":{"docs":{},"取":{"docs":{},"值":{"docs":{},"范":{"docs":{},"围":{"docs":{},"。":{"docs":{"alg/36_Valid_Sudoku.html":{"ref":"alg/36_Valid_Sudoku.html","tf":0.08333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"要":{"docs":{},"把":{"docs":{},"s":{"1":{"docs":{},"中":{"docs":{},"的":{"docs":{},"元":{"docs":{},"素":{"docs":{},"转":{"docs":{},"移":{"docs":{},"到":{"docs":{},"s":{"2":{"docs":{},"中":{"docs":{},"去":{"docs":{},"。":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}},"docs":{}}}}}}}}}},"docs":{}}}},"：":{"docs":{},"一":{"docs":{},"次":{"docs":{},"性":{"docs":{},"在":{"docs":{},"s":{"1":{"docs":{},"中":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},"，":{"docs":{},"再":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"alg/232_Implement_Queue_using_Stacks.html":{"ref":"alg/232_Implement_Queue_using_Stacks.html","tf":0.008}}}}}}}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}}}},"docs":{}}}}}}},"单":{"docs":{},"个":{"docs":{},"队":{"docs":{},"列":{"docs":{},"可":{"docs":{},"以":{"docs":{},"完":{"docs":{},"成":{"docs":{},"，":{"docs":{},"重":{"docs":{},"点":{"docs":{},"在":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"后":{"docs":{},"计":{"docs":{},"算":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"中":{"docs":{},"的":{"docs":{},"长":{"docs":{},"度":{"docs":{},"，":{"docs":{},"循":{"docs":{},"环":{"docs":{},"n":{"docs":{"alg/225_Implement_Stack_using_Queues.html":{"ref":"alg/225_Implement_Stack_using_Queues.html","tf":0.021739130434782608}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"强":{"docs":{},"行":{"docs":{},"换":{"docs":{},"成":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"alg/150_Evaluate_Reverse_Polish_Notation.html":{"ref":"alg/150_Evaluate_Reverse_Polish_Notation.html","tf":0.007246376811594203}}}}}}}}}}}},"双":{"docs":{},"向":{"docs":{},"队":{"docs":{},"列":{"docs":{"alg/239_Sliding_Window_Maximum.html":{"ref":"alg/239_Sliding_Window_Maximum.html","tf":0.012658227848101266}}}}}},"放":{"docs":{},"入":{"docs":{},"操":{"docs":{},"作":{"docs":{},"数":{"docs":{},"栈":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"中":{"docs":{"alg/227_Basic_Calculator_II.html":{"ref":"alg/227_Basic_Calculator_II.html","tf":0.02564102564102564}}}}}}}}}}}}}},"地":{"docs":{},"上":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"m":{"docs":{},"行":{"docs":{},"和":{"docs":{},"n":{"docs":{},"列":{"docs":{},"的":{"docs":{},"方":{"docs":{},"格":{"docs":{},"。":{"docs":{},"一":{"docs":{},"个":{"docs":{},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"从":{"docs":{},"坐":{"docs":{},"标":{"0":{"docs":{},",":{"0":{"docs":{},"的":{"docs":{},"格":{"docs":{},"子":{"docs":{},"开":{"docs":{},"始":{"docs":{},"移":{"docs":{},"动":{"docs":{},"，":{"docs":{},"每":{"docs":{},"一":{"docs":{},"次":{"docs":{},"只":{"docs":{},"能":{"docs":{},"向":{"docs":{},"左":{"docs":{},"，":{"docs":{},"右":{"docs":{},"，":{"docs":{},"上":{"docs":{},"，":{"docs":{},"下":{"docs":{},"四":{"docs":{},"个":{"docs":{},"方":{"docs":{},"向":{"docs":{},"移":{"docs":{},"动":{"docs":{},"一":{"docs":{},"格":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"不":{"docs":{},"能":{"docs":{},"进":{"docs":{},"入":{"docs":{},"行":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"和":{"docs":{},"列":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"的":{"docs":{},"数":{"docs":{},"位":{"docs":{},"之":{"docs":{},"和":{"docs":{},"大":{"docs":{},"于":{"docs":{},"k":{"docs":{},"的":{"docs":{},"格":{"docs":{},"子":{"docs":{},"。":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"机":{"docs":{},"器":{"docs":{},"人":{"docs":{},"的":{"docs":{},"运":{"docs":{},"动":{"docs":{},"范":{"docs":{},"围":{"docs":{},"：":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}}}}},"标":{"docs":{},"记":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}},"超":{"docs":{},"出":{"docs":{},"坐":{"docs":{},"标":{"docs":{},"阈":{"docs":{},"值":{"docs":{"alg/79_Word_Search.html":{"ref":"alg/79_Word_Search.html","tf":0.0022026431718061676}}}}}}}},"包":{"docs":{},"装":{"docs":{},"类":{"docs":{},"：":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},".":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"5_bitmanipulation.html":{"ref":"5_bitmanipulation.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}}}}}},"调":{"docs":{},"库":{"docs":{"alg/461_Hamming_Distance.html":{"ref":"alg/461_Hamming_Distance.html","tf":0.02127659574468085}},"法":{"docs":{"alg/191_Number_of_1_Bits.html":{"ref":"alg/191_Number_of_1_Bits.html","tf":0.008}}}}},"异":{"docs":{},"或":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}}},"熟":{"docs":{},"悉":{"docs":{},"下":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"alg/136_Single_Number.html":{"ref":"alg/136_Single_Number.html","tf":0.016129032258064516}}}}}}}},"在":{"docs":{},"一":{"docs":{},"堆":{"docs":{},"出":{"docs":{},"现":{"docs":{},"二":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"中":{"docs":{},"返":{"docs":{},"回":{"docs":{},"两":{"docs":{},"个":{"docs":{},"只":{"docs":{},"出":{"docs":{},"现":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"数":{"docs":{},"字":{"docs":{},"。":{"docs":{"alg/260_Single_Number_III.html":{"ref":"alg/260_Single_Number_III.html","tf":0.008849557522123894}}}}}}}}}}}}}}}}}}}}}}}}},"必":{"docs":{},"须":{"docs":{},"初":{"docs":{},"始":{"docs":{},"化":{"docs":{},"。":{"docs":{},"。":{"docs":{},"否":{"docs":{},"则":{"docs":{},"是":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"alg/387_First_Unique_Character_in_a_String.html":{"ref":"alg/387_First_Unique_Character_in_a_String.html","tf":0.009523809523809525}}}}}}}}}}}}}}}}},"length":6077},"corpusTokens":["!!!","!=","\"","\"\"\"","\"\",","\"\";","\"\"]这个例子。","\")","\"))","\"*\":","\"+\":","\"/\":","\"0\";","\":","\"null\"","\"{}","#","######","#1","#2","#3","%","&","&&","'","'#';","'('","'(')","'+';","'0';","'1')","';","'a'","'a',","'a';","'b',","'c')","'infinity'dy前面加上decimal，因为浮点数精度可能出现问题导致不同的点算出相同的斜率。","'z'","(!(other","(!c.contains(it.next()))","(!contains(key))","(!q.isempty())","(!queue.isempty())","(!s.isempty())","(!s1.isempty())","(!stack.isempty()","(!stack.isempty())","(!this.s1.isempty())","((cmp","((head==","((i","((integer.max_valu","((left","((n","((num","((row","()","(...)","(1,","(1，1)中有两个点斜率相等","(2","(2+1)*2","(5","(a","(b","(board","(c.length","(col","(contains(key))","(count","(countnodes(root.left)","(countnodes(root.right)","(cur","(cur.left","(cur.next","(cur.right","(cur.val","(dfs(s,","(diff","(entri","(even","(fast","(getdepth(root)","(grid","(head","(head.next","(head.next)","(head.val","(heada","(headb","(i","(il","(index","(inorder[i]","(int","(int)","(integ","(integer.max_valu","(it.hasnext())","(j","(k","(l","(l.val","(l1","(l1.val","(l2","(left","(left.val","(leftdepth","(lists.length","(lt","(major","(map.containskey(n))","(map.get(n)","(map.getordefault(num,","(math.abs(l","(math.pow(m,","(matrix","(matrix.length","(matrix[i][mid]","(mid_valu","(n","(n>=0)","(newlist.size()","(node","(node.left","(node.next","(node.right","(num","(nums.length","(nums1[i]","(nums[l]","(nums[m]","(nums[mid]","(obj","(other","(p.val","(pl","(point)","(point.next","(pre","(pre.next","(pre.val","(pusha.length","(q.size()","(queue.size()","(r","(res.size()","(root","(root.left","(root.right","(root.val","(s","(s.charat(i)","(s.val","(s2.isempty())","(set.contains(num))","(set.contains(other))","(size","(stack.isempty()","(str","(string","(strs[0].equals(\"0\"))","(t","(t1","(target","(this.root","(this.s2.isempty())","(this.set[index]","(token)","(token.equals(\"","(token.equals(\"+\")","(token.equals(\"+\"))","(true)","(when","(x","(x(n)","(y",")",");","*","**","*/","+","+1","+=",",c",",peek(),","..","...","/","/**","//","//char[]","//insert","//int[]","//remov","//return","//s.append(ch);","//stringbuff","/=","0","0)","0),","0):","0);","0){","0,","0.0014090538024902344","0.5","0.75f,","0.75f是hashmap默认的load","000","001","010","011","011&","01111","0:","0;","0],","0x0f0f0f0f;","0x33333333)","0x33333333);","0x3f;","0x55555555);","0x7fffffff;","0x80000000;","0};","1","1)","1))","1),","1):","1);","1)=2个节点","1)||","1)个盘移动到b","1)个盘移动到c","1)个节点。如第二层有2^(2","1)是o(n)的复杂度","1)，随机数random的位置：i后面的所有index，然后交换i和random的位置。","1,","1.","1.0","1.0)","1.00000","1.00001","1.boyer","1.recursion:","1.recustion:","1.临时变量","1.使用总容量为k+1的优先队列维护值最大的k个点，一旦总数量y超过k，移除y中值最小的点。堆中插入和删除的最差时间为o(log(k),log(k)为堆的高度，又因为遍历整个数组，所以时间复杂度为n*log(k)，不会修改输入数组。","1.填坑法","1.第i层有2^(i","1.选择合适的pivot","1/2","10","10)","10))","10);","10,","10.0","10.0000000001","10.0000528956","10.032578511","10.840434673","100,","100.","10000","10000)","100^","101","101,","101.","102,","102.","103.","104(二叉树最大深度和最远距离),","104.","105,","105.","106","106.","1073741824","108(sorted数组),","108.","10;","10}没什么改进。","11,","11.","110(判断平衡二叉树),","110.","111","111.","11111111","11111111会变成2^31也就是2147483647，通过循环，最终可以到达0","11111111如果选择有符号右移，那么移来移去还是它本来的数字","112,","112.","113,","113.","114","114.","12,","120","123","123456","123456，所以对输入n减半处理，并进行奇偶判断。比如16=4*4，只要对4进行相乘即可求出结果。","123，不是整数","12608718","128","129,","129.","13,","134217728","136.","137.","14,","141,","141.","142","142.","143.","143（这两题前两步一样，都是先分割再反转，再比较或合并）,","144.","144，94，145,","145.","146(lru)","146.","147","147.","148","148.","149.","15","15(3sum),","15,","15.","15.02553012","150.","15432","155.","15],","16","16);","16,","160","160.","16777216","169.","17","17,","173.","179.","18(4sum)","18.","189.","18。但是，它不能进入方格（35,38），因为3+5+3+8","19","19.","191.","1929","199.","19],","19。请问该机器人能够达到多少个格子？","1:","1;","1=7个节点","1]","1])","1]))","1],","1]:","1];","1][j]);","1][j]，列的取值范围：[col","1]，行的取值范围：[i","1e","1|","1})","1};","1。另一个是while","1一直在栈中所以需要stack.size()","1个节点。如三层的树最多有2^3","1前面的已经累加的和,i的数值)，而res是用来记录整个遍历过程中最大的f。","1改成len(nums)免去检查","1来计算都是完整括号的状况，因为","1来说11111111","1次把当前头部的元素转移至尾部。两头操作用arraydequ","1的二进制刚好错开。n大于0","1的二进制是11111111","1的关系，如果mid","1的和，最后算出来的就是1的个数。","1的性质，每次把n右移一位，累加n","1（防止重复打印同一列）","1（防止重复打印同一行）","1，举例来说:","1，也就是两个字串需要比较的长度，如果该值小于0，直接返回","1，也就是它不是平衡二叉树，那么root也返回","1，否则会溢出。","1，整个树都不是平衡二叉树。","1，最大的index为length","1，相当于原数组中的两个数字不需要调换顺序。","1，结果永远不是0，就会产生死循环。负数的二进制是补码..","1，继续在左边寻找。时间o(n)，会修改输入数组。注意边界。。。。。。。。。。。。。。。。。","1，说明左边的长度较长，缩小右边界长度，使r","2","2)","2));","2):","2)的意思举例来说，当n","2+2+1)","2,","2.","2.iteration:","2.交换法","2.字典","2.异或修改","2.深度为k的二叉树最多有2^k","2.考虑数组大小","20","20,","200.","203,","203.","206,","206.","20],","21,","21.","2147483648","2147483648为例子，输出结果为","215(k大)","215.","222,","222.","225.","226,","226.","227.","22],","23(一开始的impl很慢)","23,","23.","230.","231.","232.","234,","234.","235,","235.","236","236.","237,","237.","239.","24,","24.","240.","241","24],","256;","257","257.","26,","26,27,80","26.","26.2400990099","260.","268435456","27.","28","28.","287.","2;","2]","2],[getmin(),pop(),getmin()]的答案是[","2];","2]]","2d","2n+10","2sum","2t(n","2|","2})","2};","2中的数字不相等，那么ik会同时前进，一旦i和k","2中的数字相等，说明i前面已经有两个相等的数字，k就停在第三个数字上等待i找到新的不同的数字。","2，所以栈中只有0,","3","3)","3,","3,0,","3.4368447520767935","3.pindex法(在某些地方也叫普通快排):","3.处理重复元素","3.对任何一棵二叉树t,","3.排序+返回中间值","30","30,","30864","30]","32.","324","32768","328","328.","33554432","34,","342","344(reverse),","344.","349.","350.","36.","37.","371.","384.","3858","387.","3;","3]","3]，第二次的结果是","3sum","3sum.","3sum偷懒法..","3是因为pop出了栈顶元素","3来说，分割完之后lh.next=1","3比较大小。","4","4)","4))","4,","4.具有","415","415.","42","42.","45","450","450(delete)出现过，另外在merge链表里也出现过。","450.","461.","465","482","4sum","4};","4时，f(4)","5","5,","50.","50.5","50]","53.","536870912","54.","572.","58","5]","5n","6","6,","60","617,","617.","61728","637.","637题求均值，注意list这个interface是没有offer方法的，只有queue和deque有。","654(root最大),","654.","669","67108864","69.","6]","6]，前面一种解法可以有0，set解法都适用。","7","7,","7.","70.","700,","700.","701,","701.","703.","704.","705.","707,","707.","74.","75(荷兰国旗),","75.","7716","79.","7],","8","8);","8,","8.","80.","807.","81.","817","817.","82,","82.","83,","83.","84","846","8463","84638","846384","8463847","84638474","86,","86.","872","872.","876,","876.","897(inorder变形),","897.","8）","9","9)","9,","905(奇偶交换),","905.","9223372036854775808","94.","964","98","98.","9:",":",":rtype:",":type",";","=","==","=row",">",">\"",">\";",">\"，对于最后一个节点，不需要加箭头，并且将每条路径的字符串加入结果。对于空节点，直接返回（不执行)。",">2",">2,",">2,而rh=4",">2....的无限循环，所以需要删除rh最后这个2。（为什么会有这个2呢是因为在最后一次加node的时候没有新的值了，so这个2没有被覆盖。",">2。rh最后这个2和lh最后这个2是一样的node，所以在运行l.next",">3",">4",">4;",">5",">6",">7",">=",">>",">>>",">>>=",">>>是无符号右移，左边补0，对于",">>出错",">>是带着符号的右移，左边由于移位空缺出来的数字会由这个数字的符号位补全（正数补0负数补1），所以负数最终会变成",">s2时，s2必须为空。",">s2转移元素。","?","@overrid","@return","[","[0,","[1,","[1,2,1,3,2,5]","[1,2,3,4,5,6,7,8,null,null,null,null,9]","[1,2,3,4,5,6,7]","[1,2,null,3,4,5,null,null,6]","[1,2]","[10,","[18,","[2,","[23,","[3,","[3,3]","[3,5]","[3,9,20,null,null,15,7]","[30,","[3]","[4,","[4,4]","[4,6]","[5,6,7,1,2,3,4]","[6,","[6,7,1,2,3,4,5]","[7,1,2,3,4,5,6]","[8,8,7,9,2,null,null,null,null,4,7]","[8,9,2]","[[0,","[]","[],","[]args){","[c","[l,","[max_depth,","[root.val],","[root]","\\","]","];","^","^=","_","__init__(self):","__init__(self,","_add(self,","_remove(self,","a)","a);","a,","a.length","a.length;","a;","a[m]","abcxyzdef","abs(x","abs(x**2","access","add","add(int","add(num);","addathead(self,","addatindex(self,","addattail(self,","addstrings(str","addtwonumbers(listnod","algorithm","algorithm)","ancestor","anoth","appear","append","args)","arr","arr)","arr,","arr[0]","arr[1]","array","array.","array.length","array[j","array[j]","arraydeque<>();","arrayindexoutofboundsexception();","arraylist","arraylist<>(),","arraylist<>();","arraylist<>(arrays.aslist(lists));","arraylist<>(path));","arraylist<>(path),","arrays.copyof(res,","arrays.copyof(this.nums,","arrays.sort(arr);","arrays.sort(nums);","arrays.sort(strs,","array，指针k指向当前位置的唯一值，遍历数组，指针i一旦发现有和nums[k]不相等的数字，k指向下一个位置，将nums[i]赋值给位置k，最后返回元素个数index","ascend","assert","assign","averag","averageoflevels(treenod","b","b)","b):","b,","b.length;","b:","b;","b=","back","balanc","basic","befor","bf","bfs:","bigger","bin(n)[2:]].count('1')","binari","binarytreepaths(treenod","bit","bitcount(int","board)","board,","board.length","board[0].length","board[i][j]","board[i][j];","board为二维数组的情况：","bool","boolean","boolean[]","boolean[][]","boolean[matrix.length];","boolean[rows][cols];","boundari","bound。","break;","bs(a,","bs(nums,","bs1(a,","bst","bstiter","bstiterator(object):","bstiterator(treenod","bubblesort(nums):","buildtree(inorder,","buildtree(int[]","c","c)","c):","c);","c,","cach","calcul","calculate(str","capac","capacity)","capacity):","capacity:","capacity;","carri","carry;","case","ch)","ch;","char","char[256];","char[]","charact","check","class","climb","climbstairs(int","climbstairsii(int","cloest","closest，改改条件","cmp","cmp;","col","col;","col=mid%col","col];","col][mid","collect","collection.reverseorder());","color","cols)","cols,","cols,i","cols,i,","common","compar","comparator()","compare(listnod","compare(str","complet","compon","comput","computehash(int","computehash(key);","concat","concis","configur","construct","constructmaximumbinarytree(int[]","contain","contains(int","continue;","convert","copi","count","count++;","count;","countnodes(root.left)","countnodes(root.right);","countnodes(treenod","cur","cur)","cur.left","cur.left;","cur.left;}","cur.next","cur.next.v","cur.next;","cur.right","cur.right;","cur.val)","cur;","cur;}","curr","curr.next","curr.next.next","curr.val","current","cycl","cycle:","c时间复杂度为o(2^n)，如前面的汉诺塔","c的时间复杂度为o(logn),","d","d)","data","decimal(di","def","del","delet","delete:","deleteatindex(self,","deleteduplicates(head.next);","deleteduplicates(listnod","deletenode(listnod","deletenode(root.left,","deletenode(treenod","deletion:","depth","depth)","depth:","dequ","design","detectcycle(listnod","df","dfs()","dfs(board,","dfs(char[]","dfs(cur,","dfs(int","dfs(int[]","dfs(left.left,","dfs(left.right,","dfs(listnod","dfs(matrix,","dfs(matrix,rows,","dfs(null,","dfs(nums,","dfs(preorder(range),","dfs(root,","dfs(root.left,","dfs(root.right,","dfs(s,","dfs(s.left,","dfs(s.right,","dfs(self,","dfs(threshold,","dfs(treenod","dfs，时间复杂度o(m","dict","diff","diff);","differ","digit","distanc","doubl","dummi","dummy,","dummy.next","dummy.next;","dummy;","duplic","dx","dy","eldest","eldest)","element","element.","else:","empti","empty()","empty.","end","entri","entry.next;","entry;","equal","equals(object","evalrpn(string[]","evalu","even","even.next","even.next.next;","even.next;","even;","evenhead","evenhead;","exceeded，如测试用例1.00001","exceeded，所以对输入n进行减半+奇偶判断。","exist(char[][]","explanation:","f","f(1)","f(2)","f(2)代表从三级台阶可以跳一级到达四级，也可以从二级台阶跳两级跳到四级，所以结果为两数之和。","f(3)","f(4)","f(n","fac(int","fac(n","factor","factor,","factor会减少空间开销，但是会增加collision，从而增加了get和put的时间开销。","factor，用于hashmap的自动扩容。比如说hashmap有16个buckets，当12(16*0.75)个buckets装满后，hashmap会自动增加到32个buckets。","fals","false;","fast","fast,","fast.next","fast.next.next;","fast.next:","fast:","figur","fill","find","findduplicate(int[]","findkthlargest(int[]","findleaf(root.left,","findleaf(root.right,","findleaf(root1,","findleaf(root2,","findleaf(treenod","first","firstappearingonce()","firstuniqchar(str","flag","flag)","flag);","flag)||","flag:","flag[index]","flag[index])","flatten","flatten(left);","flatten(right);","flatten(treenod","follow","forward","foursum(int[]","front","g)","gcd","gcd(a,","gcd2(a,","get(int","get(self,","getdepth(root.left);","getdepth(root.right);","getdepth(treenod","getintersectionnode(listnod","getsum(i)","getsum(int","getsum(j)","greater","grid)","grid.length","grid.length;","grid[0].length","grid[0].length;","grid[newx][newy]","gt","gt)","gt);","gt)，不再对这些元素进行递归操作。","h","h+l>x，由其中的h和","ham","hammingdistance(int","hammingweight(int","hanoi(1,","hanoi(3,","hanoi(n","hanoi(n,","hascycle(listnod","hash","hash[ch]++;","hashcod","hashcode()","hashmap<>();","hashset","hashset();","hashset<>();","hasnext()","hasnext(self):","haspath(char[]","haspathsum(root.left,","haspathsum(root.right,","haspathsum(treenod","hassubtree(s.left,","hassubtree(s.right,","hassubtree(treenod","haystack,","haystack.length(),","haystack:","hd,","head","head)","head):","head);","head,","head.next","head.next,","head.next.next;","head.next.val)","head.next;","head.val","head.val)","head:","head;","heada","heada,","heada.next;","heada;","headb","headb)","headb.next;","headb;","heap","height)","height.length","height[i]，右边相反。","height[j])当前计算的面积，全局变量result存放最大面积。i前进的条件是height[i]","height[j]。在大循环i","helper(int[]","helper(preorder,","here.","hole","http://keithschwarz.com/interesting/code/?dir=find","https://doc.lagout.org/security/hackers%20delight.pdf","https://en.wikipedia.org/wiki/boyer%e2%80%93moore_majority_vote_algorithm","https://gregable.com/2013/10/major","https://leetcode.com/problems/max","https://www.geeksforgeeks.org/kmp","i)","i):","i);","i)，并且当前列不可等于最后一列i","i++;","i,","i;","i]，并且当前行不可以等于最后一行：i","if(pre.next","if(root","if(s2.isempty()","if(token.equals(\"*\"))","ii","iii","il","il,","il;","implement","import","in.nextline();","increas","increasingbst(treenod","increment","index","index)","index):","index,","index:","index是从0开始，也就是k","init","initi","inord","inorder(range))","inorder)","inorder,","inorder.length","inordertraversal(self,","inordertraversal(treenod","inorder的递归写法，思路就是按照左中右的处理顺序(左边处理完了，将左边的节点放入结果，上述图例中按照1111231...的顺序执行)","inplace合并两个数组","input","input:","inrootpo","inrootpos)","insert","insert(char","insert,","inserted.","insertintobst(root.left,","insertintobst(root.right,","insertintobst(treenod","insertion,","insertion:","insertionsort(nums):","insertionsortlist(listnod","instanceof","int","int[2];","int[]","int[lena","int[length];","int[n","int[n];","int[set1.size()];","int[size];","integ","integer.bitcount(n);","integer.bitcount(x","integer.max_valu","integer.min_valu","integer[1000000];","integer[]","intern","intersect","intersect(int[]","intersection(int[]","intersection:","invalid,","invert","inverttree(root.right);","inverttree(self,","inverttree(tmp);","inverttree(treenod","ir","ir)","ir,","ir;","isbalanced(treenod","iseven(array[j","iseven(int","island","ispalindrome(listnod","ispoporder(int","ispoweroftwo(int","issametree(left.left,","issametree(left.right,","issametree(treenod","issorted(int[]","issubtree(s.left,","issubtree(s.right,","issubtree(treenod","issymmetric(treenod","isvalidbst(self,","isvalidbst(treenod","isvalidsudoku(char[][]","it.","it.remove();","iter","iteration:","iteration，相当于插入链表，快但代码多且乱。","iterator();","j","j,","java","java用linkedlist做，注意判空不要直接像python一样和null比较。。","josephus(k,","k","k)","k);","k,","k;","k=4","key","key)","key):","key);","key,","key:","key;","kmp","kth","kthlargest","kthlargest(int","kthsmallest(treenod","k停在坑里，i向前试探不等于val的值。","k重复的判断，i,","l","l)","l)/2不会溢出。","l);","l++;","l,","l1","l1,","l1.next","l1.next;","l1.val","l2","l2)","l2);","l2.next;","l2.val","l2;","l2，分别代表结果，l1，l2链表，值操作包括余数和进位问题，一个是%10，一个是/10，边界条件包括三个，进位为1的时候还要加一次carry。","l;","l_depth,","l_di","larger","largest","largestnumber(int[]","last","last_nod","last_node.next","lca:","leaf","leafsimilar(treenod","left","left,","left.val","left;","leftdepth","leftdepth));","leftrotatestring(str","len","len(a)","len(haystack),","len(needle)","len(nums)","len(nums)):","len(points)","lena","lenb","lenb];","length","length)","length++;","length,","length;","level","levelnum","levelorder(treenod","lh","line","line/discuss/47113/a","line/discuss/47268/two","link","linkedhashmap<>(capacity,","linkedhashmap直接实现，注意参数和removeeldestentry的返回值，这个配置在tij中也提到过，没有被访问过的元素会在列表的最前面。","linkedlist","linkedlist<>();","list","list(set(nums1)","list);","list,","list.","list>","list[list[int]]","list[point]","listnod","listnode(0)","listnode(0),","listnode(0);","listnode(valu","listpath,","listres)","lists)","lists,","lists.length","lists[l];","list升级版","ll","lm","long","longest","longestvalidparentheses(str","loop","lower_bound(a,","lowest","lowestcommonancestor(root.left,","lowestcommonancestor(root.right,","lowestcommonancestor(treenod","lp","lr","lr)","lru","lrucache(object):","lrucache2","lrucache2(int","lrucache:","lt","lt++;","lt,","lt;","l不会溢出，又因为l，所以l+(h","l不能和它前面的数字相等，l不和它后面的数字相等。题目要求不能有重复的结果。","l和r=m同时写会造成死循环，例如bs([3,4,7,9,10,11],6)，所以要在l=r的时候跳出循环进行边界检查。这个程序会错的原因是返回时没有进行检查。","l得h","l没有对边界进行检查。如bs1([3,4,7,9,10,11],11)返回","l，所以h","m","m)","m);","m,","m;","main(str","main(string[]","major","majority.html","majorityelement(int[]","majorityelement3(int[]","manipul","map","map(value,","map.get(j)","map.get(n)","map.get(num)","map.getordefault(key,","map.getordefault(num,","map.put(key,","map.put(n,","map.put(num,","map;","mask","mask)","math.abs(l","math.max(ll,","math.max(maxdepth(root.left),","math.max(res,","math.min(left,","math.min(nums1.length,","math.pow(2,","matrix","matrix)","matrix,","matrix.length","matrix.length,","matrix.length;","matrix[0].length","matrix[0].length;","matrix[i][mid])","matrix[index]","matrix[index];","matrix[mid","matrix为一维数组，直接在matrix数组上进行修改，用临时变量保存或者异或256，做完一次dfs之后将matrix中的字母复原。","matrix注意判空，防止列数为0","max","max(double[]","max(int[]","max(l_depth","max(l_depth,","max(l_dis,","max(nums,","max)","max;","max_depth","max_di","max_dis]","maxarea(int[]","maxdepth(root.right));","maxdepth(treenod","maxdis(self,","maximum","maxinwindows(int","maxpoints(point[]","maxpoints(self,","maxpoints2(self,","maxslidingwindow(int[]","maxsubarray(int[]","merg","merge(int[]","merge(l,","merge(l1,","merge(listnod","merge2list(newlist.get(newlist.size()","merge:","mergeklists(listnode[]","mergeklists2(listnode[]","mergetrees(t1.left,","mergetrees(t1.right,","mergetrees(treenod","mergetwolists(listnod","method)：原理是取一条曲线f(x)点x0处的切线，得到和x轴相交后新点x1，再取f(x)点x1处的切线....以此类推，得到递推公式","method.","mid","mid);","mid,","mid:","mid_valu","mid_value:","mid_value的坐标计算：row=mid/col,","middl","middle,","middlenode(listnod","middleofthree(int[]","middleofthree(nums,","min","min(height[i],","mindepth(root.left);","mindepth(root.right);","mindepth(treenod","minimum","mirror(root.left);","mirror(root.right);","mirror(treenod","modifi","modified;","moor","movingcount(int","myatoi(str","myatoi3(str","myhashset","myhashset()","mylinkedlist(object):","mypow(doubl","myqueu","myqueue()","mysqrt(int","mysqrt3(int","mystack","mystack()","n","n)","n):","n)，数据过大栈有限制。","n,","n.next","n/2","n/2次，用字典记录下各个斜率（或者点）出现的次数。最后返回结果为一次迭代中最多的点+重复的点+本身","n1","n:","n;","n>=n0>=1，使得f(n)=n0","n]","n]的大小范围（不能是0），否则出界，如测试用例[0,","naiv","naive方法:","naive方法设置dummi","naive方法，先移除头部，再移除中间。","naive方法，要算两次，正数=总数(length)+1","naive比较方法，o(kn)","naive比较法，效率比较低，还有一种同时比较的方法，记得去看。","naive级别递归三连其一：前序遍历。","naive级别递归三连其三：后序遍历。","naive级别递归三连其二：中序遍历。","naive迭代","naive递归","nanosecond:","nb，所以时间复杂度为o(n)","needle)","needle):","needle.length();","needle:","new","new_nod","newi","newlist","newlist.add(0,","newlist.get(0);","newlist.get(newlist.size()","newlist.remove(newlist.size()","newy);","next","next()","next(self):","next_nod","next_node);","next_node.prev","next_node.right","next_node.v","nextnod","nextnode.right;","nextnode.val;","node","node(0,","node(key,","node(object):","node(val)","node)","node):","node.left","node.left:","node.left;","node.next","node.next.next;","node.next.v","node.next.val;","node.next;","node.prev","node.right","node.right:","node.right;","node.v","node.valu","node:","node;","node_remov","nodea","nodeb","nodes:","node再比较大小。","node方法","node法跳过重复nod","none","none:","notat","note","nth","null","null)","null);","null,","null;","null;。比如拿例题head","null已经排除了另外一种状况。","num","num)","num):","num,","num/xn)","num1,","num1.length()","num2)","num2.length()","num;","num[k];","number","numbers的字符串操作，不一样的地方在于循环。","numcomponents(listnod","numislands(char[][]","nums)","nums,","nums.length","nums.length);","nums.length;","nums.length==","nums1)","nums1,","nums1.length,","nums1[i","nums1[k","nums2)","nums2,","nums2.length);","nums2.length;","nums2[j","nums2[j])","nums;","nums[0]","nums[0],","nums[0];","nums[1]","nums[2];","nums[gt]","nums[i","nums[i]","nums[i];","nums[j","nums[j]","nums[j],","nums[j];","nums[l]","nums[l])","nums[l];","nums[max])","nums[mid]","nums[nums.length","nums[q.peek()];","nums[r]","nums[r])","nums[r];","num，当res分别为0和其他数的时候，就可以把这两个数字筛选出来。","n修改指针指向。","o","o(1)","o(n)","o(n)衡量了算法的增长曲线，也就是程序运行时间和输入大小的关系。","o(nlogn)","o.x","o.y;","obj)","obj.tostring();","objects.requirenonnull(c);","odd","odd.next","odd.next.next;","odd.next;","oddevenlist(listnod","on","onc","onto","op","order","ordereddict","ordereddict()","origin","other)","other;","other};","out","output:","overflow","overflow:","p","p,","p;","pair","palindrom","parenthes","pariti","partit","partition(int[]","partition(listnod","partition(listnode[]","partition(lists,","partition(nums,","partition1(int[]","partition2(int[]","partition2_1(int[]","partition3(int[]","partition:","partition做法，在数组中随机取一个数字pivot=num[l]作为基准将其partition成左右两部分，左边比num[l]小，右边比num[l]大，分割完后计算左边数字的长度，也就是比较返回值mid(注意mid是数组下标)和k","partition函数的逻辑是选定一个pivot作为基准，比它小的元素放在左边，大的放在右边。partition可以有多种方法","path","path(dfs):","path,","path.add(root.val);","path.append(root.val)","path.remove(path.size()","pathsum(self,","pathsum(treenod","paths那道题差不多，第一步可以先写出一个返回所有路径的列表的递归函数，返回值为空。也是分三种情况讨论，空节点，最后一个节点和中间节点。注意python求中间结果的时候的不要指向同一个list。在空节点的情况中其实if","pattern","peek()","peek();","peek()：如果peek转移了，那么s2中情况为3,1,2，第二次调用peek就会得到3，所以调用peek时必须满足s2为空的条件。","pindex","pindex法:","pivot","pivot)","pivot;","pl","pl)","pl,","point","point(int","point))","point,","point.next","point.next.next","point.next.next;","point.next;","pointers，注意排序，处理重复，数组越界问题。","points)","points):","points.length;","points:","polish","pop","pop()","pop:","popa)","popa.length","popindex","postord","postorder)","postorder,","postorder.length","postordertraversal(treenod","pow","pow(x,","pow:直接x","power","pre","pre,","pre.next","pre.next.v","pre.next;","pre;","preorder","preorder,","preorder.length","preordertraversal(treenod","prev_nod","prev_node.next","print","priorityqueu","priorityqueue<>();","priorityqueue<>(k);","priorityqueue<>(lists.length,","priorityqueue<>(nums.length,","privat","protect","public","push","push(1),","push(2)","push(2),","push(3),","push(int","pusha,int","put(int","put(self,","python","python字符串","q","q)","q);","q.offer(node.left);","q.offer(node.right);","q.offer(num);","q.offer(root);","q.peek();","q.poll();","q.size();","q.val","q;","queue","queue.","queue.append(node.left)","queue.append(node.right)","queue.offer(newx","queue.offer(root);","queue.pop(0)","queue.size();","queue:","queue;","quick","quicksort(int[]","quicksort(nums,","q的值比root都小就去左边找，反之。如果pq有一方的值等于root，或者pq分散在root的两边，直接一路返回root的值。","r","r)","r);","r,","r;","r]","r_depth)","r_depth,","r_di","r_dis))","r_dis))，是说最远距离=max(左边最大深度+右边最大深度,max(左边最大距离,右边最大距离))","rain","rand(int[]","rand(nums,","random","random();","random.nextint(r","random;","randomarray(int","randomindex","randomindex);","rang","range(0,","range(1,","range(i","range(index","range(index):","range(len(queue)):","range(n","range(n):","re","rectcover(int","recurs","recursion:","recus","ref","rel2","rel2;","remov","remove(int","removeduplicates(int[]","removeeldestentry(map.entri","removeelement(int[]","removeelements(head.next,","removeelements(listnod","removenthfromend(listnod","removenthfromend(self,","reorder","reorderlist(listnod","replac","res)","res):","res);","res,","res.add(matrix[j][i]);","res.add(matrix[row","res.add(new","res.add(node.val);","res.add(path","res.add(path);","res.add(root.left.val);","res.add(root.right.val);","res.add(root.val);","res.append(path)","res.append(root.val)","res.append(val)","res.push(node.val);","res1","res1);","res1.equals(res2);","res2","res2);","res;","res[0]","res[1]","res[i++]","res[resindex++]","reset","reset()","result","result:","result;","retainall(collect","retainall的实现方式，可以看到比contains多了些代码:","return","return;","return可以等价为","return这个条件。","revers","reverse(arr,","reverse(char[]","reverse(int","reverse(int[]","reverse(nums,","reverselist(listnod","reverselist(self,","reversestring(char[]","reversion:","rh","rh.next;的时候，其实会同时改变l和rh，结果就变成1","right","right)","right):","right);","right.left)","right.left);","right.right)","right.right);","right.val","right.val)","right.val))","right:","right;","rightdepth","rightdepth)","rightdepth));","rightsideview(treenod","rm","rm分别用来指代左边的最大高度和右边的最大高度，相当于11题的height[i],","root","root)","root):","root);","root,","root.left","root.left,","root.left:","root.left;","root.right","root.right);","root.right,","root.right:","root.right;","root.right，然后再看看递归函数，是不是写的很有道理","root.val","root.val)","root.val);","root.val,","root.val;","root.val且继续调用dfs函数","root.val中间节点减去sum后调用dfs。","root.val，中间节点计算r","root1,","root2)","root:","root;","rotat","rotate(int[]","row","rows,","run","r移动的区域。","s","s)","s);","s,","s,treenod","s.charat(i);","s.charat(stack.peek())","s.length","s.length()","s.pop();","s.push(node.left);","s.push(node.right);","s.push(root);","s1","s1);","s1,","s1.isempty()","s1.next","s1.push(x);","s1;","s2","s2)","s2.isempty();","s2.next","s2.next;","s2.push(elemnt","s2;","s:","s=new","s[l]","s[l];","s[r]","s[r];","same","sb","sb.append(max);","sb.append(s);","sb.tostring();","scanner","scanner(system.in);","search","search(int[]","search,","searchbst(root.left,","searchbst(root.right,","searchbst(treenod","searching/","searchmatrix(int[][]","second","selectionsort(nums):","self._add(new_node)","self._add(node)","self._remove(node)","self._remove(node_remove)","self.addatindex(0,","self.addatindex(self.size,","self.cap","self.capac","self.create_lps(needle)","self.d","self.d.pop(key)","self.d.popitem(last=false)","self.d:","self.d[key]","self.d[node_remove.key]","self.dfs(root)","self.dfs(root,","self.dfs(root.left)","self.dfs(root.left,","self.dfs(root.right)","self.dfs(root.right,","self.head","self.head,","self.head.next","self.inverttree(root.left)","self.inverttree(root.right)","self.key","self.next","self.p","self.p.left","self.p:","self.prev","self.siz","self.size:","self.stack","self.stack.append(self.p)","self.stack.pop()","self.tail","self.tail.prev","self.val","self.valu","set","set(nums2))","set.add(num);","set.iterator().next();","set.remove(num);","set1","set1)","set1.add(num);","set1.retainall(set2);","set2","set2.add(num);","set;","set，很乱，各种数据类型乱转。","shift","shuffl","shuffle()","shuffle数组","side","sign","similar","singl","singlenumber(int[]","size","size()","size)","size;","slide","slow","slow)","slow.next","slow.next.next","slow.next;","slow;","smallest","solut","solution(int[]","solution(str","solve(board);","solve(char[][]","solver","solvesudoku(char[][]","sort","sort(int[]","sort2(int[]","sort2(nums,","sort3(int[]","sort3(nums,","sort:","sort:适合链表","sortarraybyparity(int[]","sortcolors(int[]","sortedarraytobst(int[]","sortlist(head),","sortlist(listnod","sortlist(slow);","specifi","spiral","spiralorder(int[][]","split","sqrt(num):","sqrt(x)","sqrt2(x,","squar","stack","stack.","stack.peek());","stack.pop();","stack.push","stack.push(","stack.push(b","stack.push(i);","stack.push(integer.valueof(token));","stack.push(node);","stack.push(root);","stack.push(this.root);","stack;","stair","start","starttim","starttime;","static","step","sth..","store","str","str)","str,","str,int","str.isempty())","str.length","str.length()","str.length();","str.substring(s,","str.tochararray();","str.trim();","str1","str2","str2.compareto(str1);","str;","str=s.tostring().tochararray();","str[k]","str[k])","stream","string","string(arr);","string[]","string[nums.length];","stringbuff","stringbuffer();","stringbuild","stringbuilder();","stringstream","strs)","strstr","strstr(self,","strstr(string","structur","sub","subarray","subr","subtre","sudoku","sum","sum(nums)","sum(set(nums))","sum)","sum):","sum);","sum:","sum;","sumnumbers(treenod","sum的方法异或，慢慢","swap","swap(int[]","swap(nums,","swappairs(head.next.next);","swappairs(listnod","swap函数：","switch","symmetr","sys.maxsize)","sys.maxsize,","system.currenttimemillis()","system.currenttimemillis();","system.nanotime()","system.nanotime();","system.out.println(\"execut","system.out.println(sb.reverse().tostring());","t","t(0)","t(n","t(n)","t(n/2)","t)","t))","t);","t){","t.left)","t.right);","t.val)","t1,","t1.left","t1.right","t1.val","t1;","t2","t2)","t2.left);","t2.right);","t2.val;","tail)","tail);","tail;","tar","tar):","tar:","target","target)","target):","target);","target:","th","third","this)","this.capac","this.i","this.k","this.num","this.nums;","this.q","this.q.add(x);","this.q.size();","this.random","this.root","this.root.left;","this.s1","this.s1.push(x);","this.s2","this.s2.peek();","this.s2.pop();","this.s2.push(this.s1.pop());","this.set","this.set.length;","this.set[index]","this.siz","this.size);","this.x","threesum(int[]","threesumclosest(int[]","threshold)","threshold,","throw","time","timeelaps","timeelapsed);","timeelapsedsecond","timeit('x.append(1)','x=[]',","timeunit.milliseconds.toseconds(timeelapsed);","tmp","tmp;","token","token.equals(\"","token.equals(\"*\")","token.equals(\"/\"))","tokens)","total:","transfer","trap","trap(int[]","travers","traversal可以用来统计各级目录下的目录和文件。","tree","treenod","treenode(nums[max]);","treenode(nums[mid]);","treenode(preorder[pl]);","treenode(val)","treenode(val),","treenode(val);","treenode(val);替换成两句判断。","tree很像，把root弄成了两个点，并且左右子树相反。","trim:","true","true)","true;","two","twosum(int[]","two刚好进位，所以只有最高位是1，和它的n","uniqu","updat","us","v1","v2","val","val)","val):","val);","val.append(node.val)","val.reverse()","val:","valid","valid.","validate:","valu","value)","value):","value);","value:","valueof(object","verifi","view","visit","visited)","visited);","visited[i][j]","void","vote","water","whether","window","word","word)","word.tochararray();","words,","words[k])","x","x(n))","x)","x)，由于the","x,","x;","x=1.0","x>h>=0，","x>l>=0，","x^2","xn带入以上公式,","xyzdefabc","y","y)","y);","y;","y的gcd来同时缩小x，y的范围避免浮点数的精度问题。","z","zigzag","zigzaglevelorder(self,","zigzaglevelorder(treenod","{","{(0,","{(1,","{...}","{//","{0,","{1,","{1,2,3};","{3,","{3,2,1,5,6,4},","{4,","{4,5};","{num,","{}","{}\".format(a,","||","}","};","一个例子","一个例子：检查左边的none后pop(1),检查右边的none后pop(3)","一些基本的数组操作","一些递归","一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。","一开始的实现，拼一拼","一样的java递归写法:","三数取中:","三级可以由二级，一级台阶跳上来","三路快排:","下面是sqrt(100)的迭代过程,","下面这个代码某些地方也叫双路快排..","不交换，但是会赋值很多次的解法，[0,i)区间为0，[i,j)区间为1，[j,n)区间为2。","不加新node，直接用head，head就像一条蛇游走在l和r之间什么鬼啦。这里有个坑点就是必须加上r.next","不看答案还是写不出啊啊啊啊啊啊啊啊啊","不过照这么写真的很慢。因为每次递归都会生成两个新的list。","两个栈做法，注意peek和pop方法。考虑两种情况，","两个链表相加：可以分为指针操作和值操作，指针有dummy,","两倍的set和减去原数组和,","个结点的完全二叉树的深度为⌊log(n)⌋+1。如4个节点的树有⌊log(4)⌋+1=3层。","中序遍历升级版，向右压扁一个bst，写不出的。思路是左边的中序遍历加上root，加上右边的中序遍历。","中序遍历设置计数器","中间和旧值进行比较","中，当lm","主要逻辑：","也就是寻找开头最大的串串","二分法的扩展，条件是一个数的平方大于x。可以用乘法或者除法进行比较，除法的时候要注意l=1，不然的话m有可能等于零出错。加上二分法最基本的两种写法，那么可以有四种写法。返回lower","二分法的边界问题还是有一点点搞的，特别是题目变形的时候会发现其实是在猜边界写题....这样其实很不好，我觉得这个边界问题其实就是除法取下界的锅。给出两种错掉的迭代写法：","二叉搜索树:","二叉搜索树。基础递归，有点像简单版的递归二分法。分成两种情况，node为空，或不为空。","二叉搜索树的中序遍历，定义一个self.p指针，永远指向下一个节点。思路是左边的节点全部一次性进栈，完成后，pop最上面的节点a，检查它是否有右节点，如果有的话就作为下一个遍历的根节点，因为此节点的值大于a小于a的父节点。如果a没有右节点，说明没有值在a和a的父节点之间，那么直接popa的父节点作为答案。","二叉树","二叉树的性质:","二进制位数：16","二进制位数：32","二进制位数：64","二进制位数：8","什么地方学到过链表？","从前向后合并两个排序的数组:","从大到小排列","从末尾开始寻找一个小于pivot的元素赋值到l指针","代码片段","代码运行时间","以","以第一行最右边元素（刚好是第一行和最后一列的中间值）作为开始点，小于它减去col，大于加上row，新的点成为新的基准点，再向下或者向左走。注意边界！！！！","以这个数举例，当层数等于result个数的时候，当前的值会被加入结果数组。递归时会先加入[1,3,4]，然后递归到5的时候，发现当前的depth和result的大小不相等，所以不加入。","优先队列重写listnode的comparator从小到大取点。","优化","作用：平衡时间和空间的开销。高的load","你🐴","使一个数组偶数在前，奇数在后。","使用java重写python第二种方法的时候，逻辑上只要xy相等point就算相等，需要重写point中的equals和hashcode方法，hashcode方法在每次存储或者查找map的时候计算point存放的位置，equals用来比较两个点的x,y是否相等。","使用offer()或者add()方法时会进行排序，这里维护一个小堆。poll()方法移除优先级最高的点，这里是最小值","使用two","使用数组中左边，中间，右边的三个数字进行排序，选择其中的中位数（将中位数放在数组的最开始）","使用辅助栈stack压入pusha序列，stack栈顶元素和popa[popindex]进行比较。最后检查stack是否为空。","例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7","例子[3,2,3,1,2,10,4,100,20,30,5,5,6],","保持奇偶的顺序，用插入排序","保证树左右子树任意一边为null的时候，返回有高度的一边","倒数(n)，所以走到倒数前面一个节点也就是length","偶数list会被分为1","公式：","其他","其他:","其他的坑：小堆，大堆。。","其他简单推论：递归输入t(n)","其实就是求路径的变形。首先确定递归的函数dfs，返回值为int。然后分情况讨论，节点为空返回0，最后一个节点返回r","冒泡排序：i代表需要进行两两排序的数字(所以边界是数组长度减去一)，j代表剩下的需要排序的数字。","写成单独的函数：","分为三步：定义递归函数以及它的input，考虑递归关系(改指针)，设定返回条件(cur为null的时候返回pre)","分割的时候，","分割，反转，合并","分情况讨论，第一句是对于空节点的条件（递归出口条件）。后面是中间节点的情况，root的左边和右边接住返回值之后，判断是否为空，若两边都不为空，那么返回root。如果任意一边有值，就返回有值的一边。","则n0＝n2＋1。","初值点x不为负数","删除二叉树节点，注意相等的时候删除中间节点的三步操作：找到最小值node，和root交换，删除那个node。","删除链表中的一个节点（除了尾节点），就是修改值和指针。如果要删除尾节点还必须知道被删除链表的指针。","判断是否排序","判断链表中元素是否在set(g)中得到连通分量的个数（下一个节点为null或者不在set中）。","别背答案，别背答案，别背答案，重要的事说三遍","到","前序和后序不能确定唯一的二叉树因为：前序根左右，中序左根右，后序左右根。前序和后序代表的都是节点的上下关系，只有中序遍历代表了节点的左右关系。只有同时知道了左右和上下的关系才能确定唯一的二叉树。","前序遍历","前提是一个sort","包装类：java.lang.byt","包装类：java.lang.charact","包装类：java.lang.doubl","包装类：java.lang.float","包装类：java.lang.integ","包装类：java.lang.long","包装类：java.lang.short","区别点在sametree函数","升级版二分法，注意边界。。。。。。。。。。特别是target所在的范围，是一块连续的区域。如果有重复数字的话，就把左边界自增1，指向下一个数字。","单个队列可以完成，重点在push函数，每次push后计算queue中的长度，循环n","原来的impl，这里最好用deque+popleft","去掉前面的空格，注意中间不用去掉，如+0","又因为f(1)","双向队列","取二阶可导曲线f(x)","取初始值x0","取最右边的1出现的位置:diff","变态跳台阶","变种写法..len(nums)","另一种交换法","另外在237(lca)中不用加判断条件是因为它前面的条件root.left","只需要再次递归lt左边和gt右边的部分","可以用遍历法求，但是不能判断是不是complete，且为o(n)的时间复杂度","可直接在java常见包装类中调用min_value和max_value进行查看。但是常识还是需要一些记忆。溢出之后会在min和max值中相互转换。","右边的坑：dfs(root.right,","后序遍历的栈：和中序遍历不同的是，虽然后序遍历也有个指针，但是它和前序遍历一样是root节点在栈底，所以root一旦进栈，中间过程就不可能是空。","后面的数字交换过来之后还要再比一次","向右旋转：","向左旋转","和binari","和same","和中序遍历的递归写法有点像，先定义n，然后让head.next递归去得到结果，最后让n.next=head连接整理好的链表，过程见图。","和之前普通跳台阶的递推式差不多，比如","和求maxdepth基本一样","四步见图","四级台阶可以由三级，二级，一级台阶跳上来","因为并成一整行之后的数字刚好也是有序的，所以可以把整个矩阵看成一行进行排列","在一堆出现二的数字中返回两个只出现一次的数字。","地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。","基本操作，注意函数的复用，addathead和addattail可以用addatindex来写","基本类型：byte","基本类型：char","基本类型：doubl","基本类型：float","基本类型：int","基本类型：long","基本类型：short","基础快排:","基础递归","基础递归，root左边右边要接住递归的返回值。","堆顶记录第k大的元素","填坑法过程如下：","外部增加循环，判断重复，内部修改起始值。","多个指针操作数组或字符串，使得某些操作达到线性的时间复杂度。","大概是o(logn)?","奇数list会被分为1","如","如果n输入的是负数，需要注意下>>>和>>的区别:","如果p,","如果不考虑长度和范围，可以设置set并去重，时间空间均为o(n).","如果使用这种方法的话需要在slope","如果其叶结点数为n0,","如果存在一个**常数c**>0,","如果要找的倒数数字大于链表的总长度，返回空","字典序最大","字典法，将原字典key和value转换，遍历一次数组并返回第一个数字出现的index和当前数字的index。","字符串/数组交换:","字符串比较:","字符串的每一位有三种情况，数字，符号和空格。","完全相同的子树结构：","对每一行进行一次二分法","寻找cycle的开始节点。相比快慢指针另外多加了一个指针entry，用来从头寻找cycle入口","寻找长度为n+1数组中只重复出现一次的数字，数组范围在[1,","将list等分，merge函数和21题一样","将所有元素分为3个区域，将重复元素聚集到中间部分(lt,","将数组拆分成长度为3，和2的两个子数组，并求出各部分的和。","小数组选用插入排序","就像这样：re","左右交换","左边的坑：dfs(root.left,","已知","已经访问过","常见排序","度为2的结点数为n2,","异或","强行换成switch","当然也可以和中序遍历一样加在判断条件上","得到行或者列每位的和","得到迭代公式x(n+1)=(1/2)*(xn+","循环中的数字依次和pivot比较，如果小于pivot，就和pindex中的数字进行交换，保证pindex前面的数字都是小于等于pivot的。最后将pindex中的数字和pivot交换。","循环写法会比较快。","微秒","必须初始化。。否则是null","快慢指针求链表中间值，奇数时fast.next==null，偶数时fast==nul","快慢指针，同链表cycle检测#142，找entri","快慢指针，当快指针和慢指针重叠时说明有cycle，while条件是为了没有cycle的时候跳出循环。","快排主要逻辑：将数组用partition函数分为左右两部分，分别进行排序。","快排复杂度o(nlogn)，最坏复杂度o(n^2)出现在递归次数接近数组长度/partition极度不均匀的时候（本来的o(logn)变成了o(n)），如数组有序的情况下。","思路是两个for循环，需要比较(n","思路：","我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？","所以f(n)","所以这个思路是s1正常的push和pop，s2记录最小值序列，另外设定push和pop条件，小于等于peek最小值push，和s1栈顶元素一样pop。","所有的数字xor之后的二进制sum结果至少会有一位被置1，然后找到sum中最后一位被置1的位作为mask，然后使用这个mask遍历整个数组，计算r","打印最上行：行不变列变，坐标：[i][j]，列的取值范围：[i,","打印最下行：行不变列变，坐标：[row","打印最右列：行变列不变，坐标：[j][col","打印最左列：行变列不变，坐标：[j][i]，行的取值范围：[row","找出字符串中第一个没有重复的字符。建立一个简单的字母哈希表，进行计数和检查。","找到指针移动的条件，贪心比什么，边界问题。","把a中最下面的盘子移动到c","把a中的(n","把b中(n","拆分数组并求和","换成char","推出通项公式t(n)","插入排序：先从后面拎出一个元素和前面已经排好序的进行比较，如打牌的时候摸牌。","操作:","操作：移位，一元操作符","操作：迭代（用栈或者队列），递归。迭代比较快，递归代码少。有些写法是二分法的变形。","操作：迭代，递归","改进版flag，在添加元素的时候加在前面，而不是用reverse整个数组。","放入操作数栈stack中","数字的位数和范围","数字相加：2,","数组","数组b合并到a后面并返回新数组:","数组中超过一半的数字","数组合并","数组和链表：","数组最多允许重复两个数字，如果数组长度小于等于2，直接返回数组长度。","数组：长度确定，随机读写，容易实现","斐波那契数列","新建两个list，小于val去左边，大于去右边，最后拼一拼","无脑新添node法","时创建单个节点","时间复杂度o(n)","时间复杂度o(n^2)","时间复杂度o(n^2)(for里面套while)，空间复杂度o(1)","时间复杂度o(n^3)(for里面套for再while)，空间复杂度o(1)","时，i向左边移动去试探有没有更大的高度，同时水以左边墙壁的最大值为基准增加lm","是一个很迷的递归，","是说左边指针会多走一步到达上界。","最后将操作数栈中所有的结果相加","最大值：byte.max_value=127","最大值：character.max_value=65535","最大值：double.max_value=1.7976931348623157e308","最大值：float.max_value=3.4028235e38","最大值：integer.max_value=2147483647","最大值：long.max_value=9223372036854775807","最大值：short.max_value=32767","最大公约数和最小公倍数","最大堆可以用collection.reverseorder()这个comparator，别的自定义对象需要自己实现compar","最小值：byte.min_value=","最小值：character.min_value=0","最小值：double.min_value=4.9","最小值：float.min_value=1.4","最小值：integer.min_value=","最小值：long.min_value=","最小值：short.min_value=","最直观的，直接新建复制数组，i的取值范围：0","有两个条件需要注意，一个是h","机器人的运动范围：","条件不能颠倒。k指针指向的位置必须小于needle字符串的长度，才能和haystack中的j指针比较，防止循环内部的指针改变使得while条件语句溢出，如[\"a\",","构建二叉树:","构造root值最大的二叉树，先找最大值，再构造左右两边的子树。和前面的二分法一样，只是把求mid换成了找最大值的函数。","标记","栈。注意list的用法，比如有时候用deque，有时候用linkedlist。queue的时候一般用offer方法，因为容量满的时候不会抛出异常而是返回false。","栈中需要留一个","栈：先push右边再push左边，保持左边元素永远在栈顶（第一个出栈），或者还有一种操作是当右边的入栈时先pop左边的点","树","树有什么用：把目录代到以上所有的算法中看有什么用。如level","根据情况一可以写出while循环，s1","根据情况二给while循环加上限制条件,","根据条件判断，在不为空的格子中，同一列没有相同的元素，同一行没有相同的元素，同一个subgrid没有一样的元素。特别注意边界的取值范围。","桶排序：洗扑克牌，先按花色分成四堆，再排","检查空字符串","欧几里得算法(euclidean","正确写法一：小于判断加检查边界后返回(len(num);","正确写法二：小于等于加直接返回(len(num)","每段都需要满足区间条件，否则return","比11题更加复杂，多了两个变量lm,","比如hashmap中的每一个bucket中存放的对象可以用链表连接存储，比如垃圾收集中的freelist，比如linux文件系统的inode，比如堆上对象的创建，比如poll(是不啦)，比如图，还有比如某次作业存放job","求n是否为pow(2,","求下界中，这个条件a[m]","求两个数组的交集","求二叉树的所有路径，dfs返回值为空。dfs返回值为空的情况基本都是修改引用（比如说结果数组），因此需要声明一个结果数组之后另外写一个dfs。然后分情况讨论，对于中间节点path","求二叉树节点最远距离:","求出数组的连续子序列之和，设定变量f用来记录当前的最大和，也就是取出max(i","求区间中重复数字的上下界长度：","求流中第一个只出现一次的字符，用stringbuffer。如果是string必须初始化为\"\"，因为如果一个string指向没有分配内存空间的时候，会打印出\"null\"字符串","求集合交集，java慢慢","汉诺塔：可以对比二叉树的中序遍历，分为三步:","没有越界且它的前面是偶数","没有返回值，先交换后递归","注意head为空或者list为0返回nul","注意solve函数的写法","注意不要用stack。中序遍历的栈实现中有一个指针，有时候栈空的时候指针还指着下一个点，如[1,null,2,3]，所以判断条件为是栈不为空或者指针不为空。","注意不要这么写，因为计算if的时候会抛nullpointerexcept","注意优先级","注意包装类的转换。","注意求模","注意要对数组进行排序，因为要比较大小决定指针移动方向，没有排序会跳过某些数字。","测试：","测量时间","溢出：","然后依然是指针法，从2开始遍历。i作为一个试探指针，如果i和k","然后就有了这种操作。path相当于一个栈，酱紫就减少了创建list的次数。","然后有些答案里是res为long直接判断。","然后根据题意在递归的时候加入sum条件判断，以及if","熟悉下set","牛顿开方法(newton'","生成一串范围内的随机数组","用于数组的排序。举例来说，比如原数组为[9,5]，有两种排序的可能性，分别为95和59，因为str2小于str1，所以返回","用位运算实现加法，^求和，&左移求进位，进位为0时返回答案","用来保留其中某个非空子树的结构，在617(merge),","由一个已经排序的数组构造二叉树，很容易就可以想到递归二分搜索，只是多了一个treenode的返回值。思路是每次取中间，再构造左右两边。","由于上面那段代码在元素相等时会有不必要的交换，所以while循环中也可以加上相等就不交换的条件。","由于第一次遍历可能因为不等长找不到交点，在遍历完之后需要让链表的尾部等于对方的头节点，直到找到交点跳出循环。","由等比数列递推式推出f(n)","的意思是说数组中如果一个数等于target的时候，右边指针会多走一步到达下界。同样在求上界中，a[m]","直接x","直接在stack中push括号的话不可以分辨留在栈中的括号的index，所以push每个符号的index。","相当于","矩形覆盖","移位法，根据最右边一位是1的奇数n","移位法，用1作为mask后异或算出个数。","移除数组中的元素:","第一种递归：在isbalanced中，对于一个root节点，用getdepth递归求出它左右两边的高度，再在isbalanced函数中进行递归。","第二种方法使用求x,","第二种边界姿势，同二分法。但是这两种方法构造出的二叉树可能是不一样的，sorted数组只是代表了中序遍历，不能确定唯一的树。","第二种：","第二种：把所有逻辑写在getdepth中，也就是在求高度的同时进行判断层数是否大于1，只需要对节点进行一次遍历。","等价的写法：把if","简单程序分析：","简单递归程序分析：","简单递归，可以先考虑三个点的情况写出来。","算法笔记","粉色格子为count=0时换主，返回绿色格子","紫色是i经过的区域，绿色是l,","约瑟夫环：k:数到的人消失，n:总人数，求最后剩下的人的位置","纳秒","组合:","给出栈的压入序列12345，判断弹出序列45231是否正确:","能全部背下来可还行","荷兰国旗问题，同快排三路解法，不过lt是从0开始，因为pivot不是第一个元素。时间复杂度o(n)","补一下二叉树的性质：","要把s1中的元素转移到s2中去。","见图顺序，dummy的作用是创建新的链表头，返回结果的时候用，point是取节点的基础。","计算一个列表中最多能有几个点在一条线上。","计算一串二进制中1的个数","计算每个操作数num,","记录每个操作数之前的符号位sign，根据符号位的不同采用不同的操作。需要注意最后一个操作数也需要之前记录的符号位对其进行计算","记得加上=，否则每次相等的时候都要再进行一次没必要的递归。","记得去看dfs递归解法。","设f(n)和g(n)为两个函数，f(n)=o(g(n))成立的条件是：","设定精度范围","设置flag(visited)数组：","设置一个visited数组记录访问过的位置。","设置遍历指针index","证明2n+10的时间复杂度是o(n):","调库","调库法","贪心:","超出坐标阈值","越靠近答案计算次数越少，比如说100的话是10只用计算一次，但是有些点可能没有答案如极值点如0","路径问题，dfs返回值为boolean。分情况讨论，空节点时说明左右子树有一个为空。比如[1,2,null]这种情况，右边返回false，因为算的是到叶子节点的和。最后一个节点判断sum","边界如图，可以写成两种情况","边界检查后，检查空格之后的第一个符号位（如果存在）","过程见图","运行例子","返回sign","返回最大值3","还有一种可以输入最大(最小)整数，但是这样可能会溢出，不如直接判断中间值是否为null","还有一种比较快的方法没有看，好像是直接比较乘法。","还有区间反转记得看","这三句是防止i,","这两种方法对数组重复，如{10,","这个题一开始还是有点迷的，后来想清楚了，因为它是一个栈，所以pop的时候会把栈顶的元素不管大小都pop出去。比如[","这种解法限制很大，必须同时满足n+1长度，[1,","这里是l=m+1而不是l=m：是因为除法取下界会造成l边界不会改变，从而形成死循环。","这里的even和odd指的是index。奇数位的连成一个链表，偶数位的连成一个链表，最后这两个链表连一连。","这里这个条件是用来判断如果返回的root中左右两个节点的高度若有一个为","这题是前序和中序确定一个二叉树，递归主体框架还是","进入循环，判断是否为数字，判断是否溢出","迭代公式x(n+1)","迭代：","选择排序：从后面拎出一个最小值与前面元素交换。比如人眼排列有限数据（可以一眼看出最小值的话，如1,","递归三连：前中后序遍历，level遍历","递归时，每层路径加一","递归的理解：先写出三个点的前序遍历，然后发现后面两个左右子树的if可以用dfs复用。","递归的理解：写出三个点的后序遍历，然后发现迷之缩进里的两个左右子树的if可以用dfs复用。","递归的理解：同样先写出三个点的中序遍历，然后发现迷之缩进里的两个左右子树的if可以用dfs复用。","递归终止条件：超出边界","递推式:f(n)","通常时左右指针从两边走(或单边)，有时候会有第三个指针。","部分相同的子树结构,","重点在于新建一个comparator，","重点是这个公式max_di","链表","链表+字典实现，所有用过或者新插入的点会插入链表末尾(tail之前)，删除时取最前面的(head指向)的节点删除：","链表：长度不确定，边界增删频繁","错误写法一:","错误写法二:","长度为max(index)+1，个数为最右的index减去最左的加1","间隔为数组元素个数减去1","随机化:","随机化选择一个index和最左边数字交换","难点:","难点在溢出，如果是python的话还要考虑符号，因为python中","难点：二进制运算的意义，数字的范围","难点：入栈出栈条件的判断。","难点：写递归，有返回值的递归，没有返回值的递归，作为helper函数的递归等等。用迭代的话要注意数据结构，用栈还是队列。","难点：边界判断，指针指向","需要分清数组的index，长度（范围，个数），第k个数，间隔。","需要变量：i,j指针代表宽度，局部变量area","需要找出这几个值。","顺时针打印矩阵，重点在于行列的取值范围。首先算出圈数cycle（行列的最小值一半的上界，画一下图就知道了），然后取变量i在cycle中进行循环打印。","预先计算","首先使用while找到第一个奇数和第一个偶数出现的位置，然后进行交换。","验证是否为bst","高票答案改写：快慢指针","鸽巢原理/抽屉原理+二分法，算出中位index：mid，对小于等与mid的数字进行统计，若大于mid，说明左边有重复的数字（可以想成原来应该是相等的，但是有重复的数字所以超过了限制），则移动右指针为r。时间o(nlogn)，空间o(1)","🌝quick","🥰alg","，会发生maximum","，因为要向右边试探有没有更大的高度，然后消除当前的高度最小值，保留高度最大值。","：一次性在s1中push1,2,3，再pop(),"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"🥰Alg","keywords":"","body":"算法笔记\n别背答案，别背答案，别背答案，重要的事说三遍\n能全部背下来可还行\n"},"others.html":{"url":"others.html","title":"其他","keywords":"","body":"其他\n一些递归\n汉诺塔：可以对比二叉树的中序遍历，分为三步:\n\n把A中的(n-1)个盘移动到B\n把A中最下面的盘子移动到C\n把B中(n-1)个盘移动到C\n\ndef hanoi(n, a, b, c):\n    if n == 1:\n        print a, \"-->\" ,c\n    else:\n        hanoi(n - 1, a, c, b)\n        hanoi(1, a, b, c)\n        hanoi(n - 1, b, a, c)\n\nhanoi(3, 'A', 'B', 'C')\n\n\n欧几里得算法(Euclidean algorithm)\n最大公约数和最小公倍数\n# iteration\ndef gcd(a, b):\n    if a  0:\n        factor = a / b\n        c, d = b, a - factor * b\n        print \"{} / {} = {} x {} + {}\".format(a, b, factor, c, d)\n        a, b = c, d\n    return a\n\n# recursion\ndef gcd2(a, b):\n    if a \n牛顿开方法(Newton's method)：原理是取一条曲线f(x)点x0处的切线，得到和x轴相交后新点x1，再取f(x)点x1处的切线....以此类推，得到递推公式\n\n取二阶可导曲线f(x) = x^2 - num, x = xn带入以上公式, 得到迭代公式x(n+1)=(1/2)*(xn+ num/xn)\n# iteration\ndef sqrt(num):\n    x = 1.0  # 取初始值x0 = 1.0\n    while abs(x * x - num) > 1e-9:\n        x = 0.5 * (x + num / x) # 迭代公式x(n+1) = 1/2 * (x(n) + num / x(n))\n    return x\n\n# recursion\ndef sqrt2(x, num):\n    assert x > 0 # 初值点x不为负数\n    if abs(x**2 - num) \n下面是sqrt(100)的迭代过程, x=1.0\n50.5\n26.2400990099\n15.02553012\n10.840434673\n10.032578511\n10.0000528956\n10.0000000001\n10.0\n10.0\n\n越靠近答案计算次数越少，比如说100的话是10只用计算一次，但是有些点可能没有答案如极值点如0\nPow:直接x * pow(x, n - 1)是O(n)的复杂度 ，会发生maximum recursion depth exceeded，所以对输入n进行减半+奇偶判断。\npublic double myPow(double x, int n) {\n    if (n \n约瑟夫环：k:数到的人消失，n:总人数，求最后剩下的人的位置\nfrom collections import OrderedDict\n\ndef josephus(k, n):\n    if k \n时间复杂度O(n)\nO(n)衡量了算法的增长曲线，也就是程序运行时间和输入大小的关系。\n\n设f(n)和g(n)为两个函数，f(n)=O(g(n))成立的条件是：\n\n如果存在一个**常数c**>0, n>=n0>=1，使得f(n)=n0\n证明2n+10的时间复杂度是O(n): 2n+10 \n\n简单程序分析：\n\npublic static double max(double[] nums) {// array size = n\n    int size = nums.length;             // 2 ops\n    double max = nums[0];               // 2 ops\n    for (int i = 1; i  max) {            // 2 * (n - 1) ops\n            max = nums[i];              // 0 to (n - 1) ops\n        }\n    }\n    return max;                         // 1 op\n}                                       // total: 5n ---> runs in O(n)\n\n\n简单递归程序分析：\n\npublic int fac(int n) { // n >= 0\n    if (n == 0) return 1;\n    return n * fac(n - 1);\n}\n\nT(n) = T(n - 1) + b\nT(0) = c\n推出通项公式T(n) = c + nb，所以时间复杂度为O(n)\n其他简单推论：递归输入T(n) = T(n/2) + c的时间复杂度为O(logn), T(n) = 2T(n - 1) + c时间复杂度为O(2^n)，如前面的汉诺塔\n代码运行时间\n>>> timeit('x.append(1)','x=[]', number = 10000)\n0.0014090538024902344\n\n常见排序\n选择排序：从后面拎出一个最小值与前面元素交换。比如人眼排列有限数据（可以一眼看出最小值的话，如1, 10, 7, 8）\ndef selectionSort(nums):\n    for i in range(0, len(nums)):\n        min = i\n        for j in range(i + 1, len(nums)):\n            if nums[j] \n插入排序：先从后面拎出一个元素和前面已经排好序的进行比较，如打牌的时候摸牌。\ndef insertionSort(nums):\n    for i in range(1, len(nums)):\n        key = nums[i]  # hole\n        j = i\n        while j > 0 and nums[j] > key: # bigger number shift to right\n            nums[j] = nums[j - 1]\n            j -= 1\n        nums[j] = key\n\n冒泡排序：i代表需要进行两两排序的数字(所以边界是数组长度减去一)，j代表剩下的需要排序的数字。\ndef bubbleSort(nums):\n    for i in range(0, len(nums) - 1):\n        for j in range(0, len(nums) - 1 - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n\n桶排序：洗扑克牌，先按花色分成四堆，再排\nMerge Sort:适合链表\n"},"array.html":{"url":"array.html","title":"数组","keywords":"","body":"一些基本的数组操作\n需要分清数组的index，长度（范围，个数），第k个数，间隔。\n\nindex是从0开始，也就是k-1，最大的index为length-1\n长度为max(index)+1，个数为最右的index减去最左的加1\n间隔为数组元素个数减去1\n\n数组合并\n数组b合并到a后面并返回新数组:\npublic static void main(String []args){\n    int[] a = {1,2,3};\n    int[] b = {4,5};\n    int lenA = a.length;\n    int lenB = b.length;\n    int[] res = new int[lenA + lenB];\n    for (int i = 0; i \n从前向后合并两个排序的数组:\npublic static int[] merge(int[] nums1, int[] nums2) {\n    int lenA = nums1.length, lenB = nums2.length;\n    int i = 0, j = 0, k = 0;\n    int[] res = new int[lenA + lenB];\n    while (i \ninplace合并两个数组\npublic void merge(int[] nums1, int m, int[] nums2, int n) {\n    int i = m - 1;\n    int j = n - 1;\n    int k = m + n - 1;\n    while (i >= 0 && j >= 0) {\n        if (nums1[i] > nums2[j]) {\n            nums1[k--] = nums1[i--];\n        } else {\n            nums1[k--] = nums2[j--];\n        }\n    }\n    while (j >= 0) {\n        nums1[k--] = nums2[j--];\n    }\n    while (i >= 0) {\n        nums1[k--] = nums1[i--];\n    }\n}\n\n拆分数组并求和\n将数组拆分成长度为3，和2的两个子数组，并求出各部分的和。\nint[] len = {3, 2}; // sub-array length\nint[] arr = {4, 4, 5, 4, 4};\nint p = 0; // point to the current index\nfor (int i = 0; i \nshuffle数组\n生成一串范围内的随机数组\n// return an array with size n range in [l, r]\npublic int[] randomArray(int n, int l, int r) {\n    if (l >= r) {\n        throw new ArrayIndexOutOfBoundsException();\n    }\n    int[] arr = new int[n];\n    for (int i = 0; i \n判断是否排序\n// Ascending sort \npublic boolean isSorted(int[] arr) {\n    for (int i = 0; i \n测量时间\n纳秒\nlong startTime = System.nanoTime();\nArrays.sort(arr);\nlong timeElapsed = System.nanoTime() - startTime;\nSystem.out.println(\"Execution time in nanosecond: \" + timeElapsed);\n\n微秒\nlong startTime = System.currentTimeMillis();\nArrays.sort(arr);\nlong timeElapsed = System.currentTimeMillis() - startTime;\n// convert to seconds\n// long timeElapsedSecond = TimeUnit.MILLISECONDS.toSeconds(timeElapsed);\nSystem.out.println(\"Execution time in nanosecond: \" + timeElapsed);\n\n字典序最大\n也就是寻找开头最大的串串\npublic static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    String s = in.nextLine();\n    char max = 'a';\n    StringBuilder sb = new StringBuilder();\n    for (int i = s.length() - 1; i >= 0; i--) {\n        if (s.charAt(i) >= max) {\n            max = s.charAt(i);\n            sb.append(max);\n        }\n    }\n    System.out.println(sb.reverse().toString());\n}\n\npublic String solution(String s) {\n    int index = 0;\n    String res = \"\";\n    for (int j = 'z' - 'a' + 1; j >= 0; j--) {\n        for (int i = 0; i = index) {\n                res += s.charAt(i);\n                index = i;\n            }\n        }\n    }\n    return res;\n}\n\n"},"alg/215_Kth_Largest_Element_in_an_Array.html":{"url":"alg/215_Kth_Largest_Element_in_an_Array.html","title":"215. Kth Largest Element in an Array","keywords":"","body":"215. Kth Largest Element in an Array\n1.使用总容量为k+1的优先队列维护值最大的k个点，一旦总数量Y超过k，移除Y中值最小的点。堆中插入和删除的最差时间为O(log(k),log(k)为堆的高度，又因为遍历整个数组，所以时间复杂度为n*log(k)，不会修改输入数组。\npublic int findKthLargest(int[] nums, int k) {\n    PriorityQueue q = new PriorityQueue<>();\n    for (int num : nums) {\n        q.offer(num);\n        if (q.size() > k) {\n            q.poll();\n        }\n    }\n    return q.peek(); // 堆顶记录第k大的元素\n}\n\n\n使用offer()或者add()方法时会进行排序，这里维护一个小堆。poll()方法移除优先级最高的点，这里是最小值\n\n最大堆可以用Collection.reverseOrder()这个comparator，别的自定义对象需要自己实现comparator\n\n\nPriorityQueue q = new PriorityQueue<>(nums.length, Collection.reverseOrder());\n\n一个例子\ninput: {3,2,1,5,6,4}, 3\n\nBefor pop: [3]\nAfter pop: [3]\nBefor pop: [2, 3]\nAfter pop: [2, 3]\nBefor pop: [1, 3, 2]\nAfter pop: [1, 3, 2]\nBefor pop: [1, 3, 2, 5]\nAfter pop: [2, 3, 5]\nBefor pop: [2, 3, 5, 6]\nAfter pop: [3, 6, 5]\nBefor pop: [3, 4, 5, 6]\nAfter pop: [4, 6, 5]\nreturn 4\n\npartition做法，在数组中随机取一个数字pivot=num[l]作为基准将其partition成左右两部分，左边比num[l]小，右边比num[l]大，分割完后计算左边数字的长度，也就是比较返回值mid(注意mid是数组下标)和k-1的关系，如果mid > k - 1，说明左边的长度较长，缩小右边界长度，使r = mid - 1，继续在左边寻找。时间O(n)，会修改输入数组。注意边界。。。。。。。。。。。。。。。。。\npublic int findKthLargest(int[] nums, int k) {\n    int l = 0, r = nums.length - 1;\n    while (l  k - 1) r = mid - 1;\n        else l = mid + 1;\n    }\n    return -1;\n}\n\npublic int rand(int[] nums, int l, int r) {\n    Random random = new Random();\n    int randomIndex = random.nextInt(r - l + 1) + l;\n    swap(nums, l, randomIndex);\n    return nums[l];\n}\n\npublic int middleOfThree(int[] nums, int l, int r) {\n    int mid = (l + r) >>> 1;\n    if (nums[l]  r\n    if (nums[mid]  r\n    if (nums[mid]  l\n    return nums[l];\n}\n\npublic void swap(int[] nums, int l, int r) {\n    int tmp = nums[l];\n    nums[l] = nums[r];\n    nums[r] = tmp;\n}\n\n// 从大到小排列\npublic int partition(int[] nums, int l, int r) {\n    int pivot = middleOfThree(nums, l, r);\n    // int pivot = rand(nums, l, r);\n    while (l = pivot) l++;\n        nums[r] = nums[l];\n    }\n    nums[l] = pivot;\n    return l;\n}\n\n例子[3,2,3,1,2,10,4,100,20,30,5,5,6], k=4\n[6, 2, 3, 3, 2, 10, 4, 100, 20, 30, 5, 5, 1]\n[30, 20, 100, 10, 6, 2, 4, 3, 3, 2, 5, 5, 1]\n[30, 20, 100, 10, 6, 2, 4, 3, 3, 2, 5, 5, 1]\nout = 10\n\n其他的坑：小堆，大堆。。\n"},"alg/703_Kth_Largest_Element_in_a_Stream.html":{"url":"alg/703_Kth_Largest_Element_in_a_Stream.html","title":"703. Kth Largest Element in a Stream","keywords":"","body":"703. Kth Largest Element in a Stream\n\nclass KthLargest {\n\n    PriorityQueue queue;\n    int k;\n\n    public KthLargest(int k, int[] nums) {\n        queue = new PriorityQueue<>(k);\n        this.k = k;\n        for (int num : nums) \n            add(num);\n    }\n\n    public int add(int val) {\n        if (queue.size() \n"},"alg/70_Climbing_Stairs.html":{"url":"alg/70_Climbing_Stairs.html","title":"70. Climbing Stairs","keywords":"","body":"70. Climbing Stairs\n斐波那契数列\n\n公式：\n\npublic int climbStairs(int n) {\n    int a = 1, b = 1;\n    for (int i = 0; i \n\n\n迭代：\n\n递推式:f(n) = f(n - 1) + f(n - 2)的意思举例来说，当n = 4时，f(4) = f(3) + f(2)代表从三级台阶可以跳一级到达四级，也可以从二级台阶跳两级跳到四级，所以结果为两数之和。\npublic int climbStairs(int n) {\n    int[] arr = new int[n + 1];\n    arr[0] = arr[1] = 1;\n    for (int i = 2; i \n变态跳台阶\n一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\n和之前普通跳台阶的递推式差不多，比如\nf(4) = f(3) + f(2) + f(1) // 四级台阶可以由三级，二级，一级台阶跳上来\nf(3) = f(2) + f(1)        // 三级可以由二级，一级台阶跳上来\n--------------------------\nf(4) = 2 * f(3)\n\n由等比数列递推式推出f(n) = 2 ^ (n - 1) * f(1)\n又因为f(1) = 1\n\n所以f(n) = 2 ^ (n - 1)\n\npublic int climbStairsII(int target) {\n    return 1 \n矩形覆盖\n我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？\nn\n0 ---> 0\n1 ---> 1\n2 ---> 2\n3 ---> 3\n4 ---> 5\n\npublic int RectCover(int target) {\n    if (target == 0) return 0;\n    int a = 1, b = 1;\n    while (target-- > 0) {\n        a = (b += a) - a;\n    }\n    return a;\n}\n\n"},"alg/54_Spiral_Matrix.html":{"url":"alg/54_Spiral_Matrix.html","title":"54. Spiral Matrix","keywords":"","body":"54. Spiral Matrix\n顺时针打印矩阵，重点在于行列的取值范围。首先算出圈数cycle（行列的最小值一半的上界，画一下图就知道了），然后取变量i在cycle中进行循环打印。\n\n打印最上行：行不变列变，坐标：[i][j]，列的取值范围：[i, col - i)\n打印最右列：行变列不变，坐标：[j][col - i - 1]，行的取值范围：[i + 1, row - i)\n打印最下行：行不变列变，坐标：[row - i - 1][j]，列的取值范围：[col - i - 2, i]，并且当前行不可以等于最后一行：i != row - i - 1（防止重复打印同一行）\n打印最左列：行变列不变，坐标：[j][i]，行的取值范围：[row - i - 2, i)，并且当前列不可等于最后一列i != col - i - 1（防止重复打印同一列）\n\nmatrix注意判空，防止列数为0\npublic List spiralOrder(int[][] matrix) {\n    List res = new ArrayList<>();\n    if (matrix == null || matrix.length == 0) return res;\n    int row = matrix.length;\n    int col = matrix[0].length; \n    int cycle = ((row = i && i != row - i - 1; j--) {\n            res.add(matrix[row - i - 1][j]);\n        }\n        for (int j = row - i - 2; j > i && i != col - i - 1; j--) {\n            res.add(matrix[j][i]);\n        }\n    }\n    return res;\n}\n\n"},"alg/384_Shuffle_an_Array.html":{"url":"alg/384_Shuffle_an_Array.html","title":"384. Shuffle an Array","keywords":"","body":"384. Shuffle an Array\n最直观的，直接新建复制数组，i的取值范围：0 到 (size - 1)，随机数random的位置：i后面的所有index，然后交换i和random的位置。\nclass Solution {\n\n    int[] nums;\n    int size;\n    Random random;\n\n    public Solution(int[] nums) {\n        this.nums = nums;\n        this.size = nums.length;\n        this.random = new Random();\n    }\n\n    /** Resets the array to its original configuration and return it. */\n    public int[] reset() {\n        return this.nums;\n    }\n\n    /** Returns a random shuffling of the array. */\n    public int[] shuffle() {\n        int[] copy = Arrays.copyOf(this.nums, this.size);\n        for (int i = 0; i \n"},"alg/179_Largest_Number.html":{"url":"alg/179_Largest_Number.html","title":"179. Largest Number","keywords":"","body":"179. Largest Number\n重点在于新建一个Comparator， 用于数组的排序。举例来说，比如原数组为[9,5]，有两种排序的可能性，分别为95和59，因为str2小于str1，所以返回-1，相当于原数组中的两个数字不需要调换顺序。\npublic String largestNumber(int[] nums) {\n    if (nums == null || nums.length == 0) return \"\";\n\n    String[] strs = new String[nums.length];\n\n    for (int i = 0; i  c = new Comparator() {\n        @Override\n        public int compare(String s1, String s2) {\n            String str1 = s1 + s2;\n            String str2 = s2 + s1;\n            return str2.compareTo(str1);\n        }\n    };\n    Arrays.sort(strs, c);\n    if (strs[0].equals(\"0\")) return \"0\";\n\n    StringBuffer sb = new StringBuffer();\n    for (String s: strs) {\n        sb.append(s);\n    }\n    return sb.toString();\n}\n\n"},"alg/1_2Sum.html":{"url":"alg/1_2Sum.html","title":"1. 2Sum","keywords":"","body":"1. 2Sum\n字典法，将原字典key和value转换，遍历一次数组并返回第一个数字出现的index和当前数字的index。\npublic int[] twoSum(int[] nums, int target) {\n    Map map = new HashMap<>();\n    for (int i = 0; i  nums[i]; map.get(j)  i; map(value, index)\n        }\n    }\n    return null;\n}\n\n"},"alg/50_Pow.html":{"url":"alg/50_Pow.html","title":"50. Pow","keywords":"","body":"50. Pow\nrecursive squaring method. 直接x * pow(x, n - 1)是O(n)的复杂度 ，会发生maximum recursion depth exceeded，如测试用例1.00001 123456，所以对输入n减半处理，并进行奇偶判断。比如16=4*4，只要对4进行相乘即可求出结果。\npublic double myPow(double x, int n) {\n    if (n >> 1); // n/2\n    if ((n & 1) == 0) {  // n % 2 == 0 注意优先级 & \n一个例子\n1.00001 123456\n1.00001 61728\n1.00001 30864\n1.00001 15432\n1.00001 7716\n1.00001 3858\n1.00001 1929\n1.00001 964\n1.00001 482\n1.00001 241\n1.00001 120\n1.00001 60\n1.00001 30\n1.00001 15\n1.00001 7\n1.00001 3\n3.4368447520767935\n\n>>出错\n1.00000\n-2147483648\n"},"alg/69_Sqrtx.html":{"url":"alg/69_Sqrtx.html","title":"69. Sqrt(x)","keywords":"","body":"69. Sqrt(x)\n二分法的扩展，条件是一个数的平方大于x。可以用乘法或者除法进行比较，除法的时候要注意l=1，不然的话m有可能等于零出错。加上二分法最基本的两种写法，那么可以有四种写法。返回lower bound。\npublic int mySqrt(int x) {\n    if (x >> 1;\n        if (Math.pow(m, 2) == x) return m;\n        if (Math.pow(m, 2) >> 1;\n        if (x / m == m) return m;\n        if (x / m > m) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l - 1;\n}\n\npublic int mySqrt3(int x) {\n    if (x >> 1;\n        if (Math.pow(m, 2) == x) return m;\n        if (Math.pow(m, 2) >> 1;\n        if (x / m == m) return m;\n        if (x / m > m) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l - 1;\n}\n\n牛顿开方法(Newton's method)：原理是取一条曲线f(x)点x0处的切线，得到和x轴相交后新点x1，再取f(x)点x1处的切线....以此类推，得到递推公式\n\n取二阶可导曲线f(x) = x^2 - num, x = xn带入以上公式, 得到迭代公式x(n+1)=(1/2)*(xn+ num/xn)\n# iteration\ndef sqrt(num):\n    x = 1.0  # 取初始值x0 = 1.0\n    while abs(x * x - num) > 1e-9: # 设定精度范围\n        x = 0.5 * (x + num / x) # 迭代公式x(n+1) = 1/2 * (x(n) + num / x(n))\n    return x\n\n# recursion\ndef sqrt2(x, num):\n    assert x > 0 # 初值点x不为负数\n    if abs(x ** 2 - num) \n下面是sqrt(100)的迭代过程, x=1.0\n50.5\n26.2400990099\n15.02553012\n10.840434673\n10.032578511\n10.0000528956\n10.0000000001\n10.0\n10.0\n\n越靠近答案计算次数越少，比如说100的话是10只用计算一次，但是有些点可能没有答案如极值点如0\n"},"alg/149_Max_Points_on_a_Line.html":{"url":"alg/149_Max_Points_on_a_Line.html","title":"149. Max Points on a Line","keywords":"","body":"149. Max Points on a Line\n计算一个列表中最多能有几个点在一条线上。\n思路是两个for循环，需要比较(n - 1) + .. + 2 + 1 = (n - 1) * n/2次，用字典记录下各个斜率（或者点）出现的次数。最后返回结果为一次迭代中最多的点+重复的点+本身\nPython\n如果使用这种方法的话需要在slope = Decimal(dy * 1.0) / dx if dx != 0 else 'infinity'dy前面加上decimal，因为浮点数精度可能出现问题导致不同的点算出相同的斜率。\ndef maxPoints2(self, points):\n    \"\"\"\n    :type points: List[Point]\n    :rtype: int\n    \"\"\"\n    if len(points) \n第二种方法使用求x, y的GCD来同时缩小x，y的范围避免浮点数的精度问题。\ndef maxPoints(self, points):\n    \"\"\"\n    :type points: List[Point]\n    :rtype: int\n    \"\"\"\n    if len(points) \n运行例子\ninput = [[0, 0], [1, 0], [1, 1], [2, 2]]\n ^               \n2|     o   \n1|  o         \n o--o---------------->\n 0  1  2  3  4  5  6\n\n# first iteration\n{(1, 0): 1})\n{(1, 0): 1, (1, 1): 1})\n{(1, 0): 1, (1, 1): 2}) # (1，1)中有两个点斜率相等 返回最大值3\n# second iteration\n{(0, 1): 1})\n{(0, 1): 1, (1, 2): 1})\n# third iteration\n{(1, 1): 1})\n\nJava\n使用Java重写python第二种方法的时候，逻辑上只要xy相等point就算相等，需要重写Point中的equals和hashCode方法，hashcode方法在每次存储或者查找map的时候计算Point存放的位置，equals用来比较两个点的x,y是否相等。\n还有一种比较快的方法没有看，好像是直接比较乘法。\nclass Point {\n    int x;\n    int y;\n    Point(int a, int b) {\n        x = a;\n        y = b;\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (other == this) return true;\n        if (!(other instanceof Point)) return false;\n        Point o = (Point) other;\n        return this.x == o.x && this.y == o.y;\n    }\n    public int hashCode() {\n        return x * 4 + y * 3;\n    }\n}\n\nclass Solution {\n    public int maxPoints(Point[] points) {\n        int result = 0;\n        int size = points.length;\n        Map map = new HashMap<>();\n        for (int i = 0; i \nRef\nhttps://leetcode.com/problems/max-points-on-a-line/discuss/47113/A-java-solution-with-notes\nhttps://leetcode.com/problems/max-points-on-a-line/discuss/47268/Two-concise-python-solutions\ngcd\nhashcode\n"},"alg/169_Majority_Element.html":{"url":"alg/169_Majority_Element.html","title":"169. Majority Element","keywords":"","body":"169. Majority Element\n数组中超过一半的数字\n1.Boyer-Moore majority vote algorithm\nO(n) + O(1)\npublic static int majorityElement(int[] nums) {\n    int major = 0, count = 0;\n    for (int n: nums) {\n        if (count == 0) {\n            count++;\n            major = n;\n        } else if (major == n)  {\n            count++;\n        } else {\n            count--;\n        }\n    }\n\n    // verify\n    int c = 0;\n    for (int i = 0; i  array.length / 2) ? major : 0;\n}\n\n粉色格子为count=0时换主，返回绿色格子\n\n2.字典\nO(n) + O(n)\npublic int majorityElement3(int[] nums) {\n    Map map = new HashMap<>();\n    for (Integer n : nums) {\n        if (map.containsKey(n)) {\n            map.put(n, map.get(n) + 1);\n        } else {\n            map.put(n, 1);\n        }\n        if (map.get(n) > nums.length / 2) {\n            return n;\n        }\n    }\n    return 0;\n}\n\n3.排序+返回中间值 \nO(nlogn) + 大概是O(logn)?\npublic int majorityElement(int[] nums) {\n    Arrays.sort(nums);\n    return nums[nums.length / 2];\n}\n\nRef\nhttps://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\nhttps://gregable.com/2013/10/majority-vote-algorithm-find-majority.html\n"},"alg/173_Binary_Search_Tree_Iterator.html":{"url":"alg/173_Binary_Search_Tree_Iterator.html","title":"173. Binary Search Tree Iterator","keywords":"","body":"173. Binary Search Tree Iterator\n二叉搜索树的中序遍历，定义一个self.p指针，永远指向下一个节点。思路是左边的节点全部一次性进栈，完成后，pop最上面的节点A，检查它是否有右节点，如果有的话就作为下一个遍历的根节点，因为此节点的值大于A小于A的父节点。如果A没有右节点，说明没有值在A和A的父节点之间，那么直接popA的父节点作为答案。\nclass BSTIterator(object):\n\n    def __init__(self, root):\n        \"\"\"\n        :type root: TreeNode\n        \"\"\"\n        self.stack = []\n        self.p = root\n        while self.p:\n            self.stack.append(self.p)\n            self.p = self.p.left\n\n\n    def next(self):\n        \"\"\"\n        @return the next smallest number\n        :rtype: int\n        \"\"\"\n        if self.stack or self.p:\n            while self.p:\n                self.stack.append(self.p)\n                self.p = self.p.left\n            else:\n                next_node = self.stack.pop()\n                self.p = next_node.right\n                return next_node.val if next_node else None\n\n    def hasNext(self):\n        \"\"\"\n        @return whether we have a next smallest number\n        :rtype: bool\n        \"\"\"\n        if not self.stack and not self.p:\n            return False\n        return True\n\njava用linkedlist做，注意判空不要直接像python一样和null比较。。\nclass BSTIterator {\n    private LinkedList stack;\n    private TreeNode root;\n\n    public BSTIterator(TreeNode root) {\n        stack = new LinkedList<>();\n        this.root = root;\n        while (this.root != null) {\n            stack.push(this.root);\n            this.root = this.root.left;\n        }\n    }\n\n    /**\n     * @return the next smallest number\n     */\n    public int next() {\n        if (!stack.isEmpty() || root != null) {\n            while (root != null) {\n                stack.push(root);\n                root = root.left;\n            }\n            if (root == null) {\n                TreeNode nextNode = stack.pop();\n                root = nextNode.right;\n                return nextNode.val;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * @return whether we have a next smallest number\n     */\n    public boolean hasNext() {\n        if (stack.isEmpty() && root == null) {\n            return false;\n        }\n        return true;\n    }\n}\n\n一个例子：检查左边的None后pop(1),检查右边的None后pop(3)\n\ninorder的递归写法，思路就是按照左中右的处理顺序(左边处理完了，将左边的节点放入结果，上述图例中按照1111231...的顺序执行)\n    def inorderTraversal(self, root):\n        res = []\n        self.dfs(root, res)\n        return res\n\n    def dfs(self, root, res):\n        if not root:\n            return\n\n        self.dfs(root.left, res)  #1\n        res.append(root.val)      #2\n        self.dfs(root.right, res) #3\n\n"},"alg/704_Binary_Search.html":{"url":"alg/704_Binary_Search.html","title":"704. Binary Search","keywords":"","body":"704. Binary Search\n二分法的边界问题还是有一点点搞的，特别是题目变形的时候会发现其实是在猜边界写题....这样其实很不好，我觉得这个边界问题其实就是除法取下界的锅。给出两种错掉的迭代写法：\n\n错误写法一:\n\ndef bs(a, tar):\n    l, r = 0, len(a) - 1\n    # while l  tar: r = m \n        # if a[m]  tar: r = m - 1\n    return -1                       # \n\n这里是l=m+1而不是l=m：是因为除法取下界会造成l边界不会改变，从而形成死循环。\nwhile l和r=m同时写会造成死循环，例如bs([3,4,7,9,10,11],6)，所以要在l=r的时候跳出循环进行边界检查。这个程序会错的原因是返回时没有进行检查。\n\n错误写法二:\n\n\ndef bs1(a, tar):\n    l, r = 0, len(a) - 1\n    while l  tar: r = m - 1\n    return -1\n\n\nl没有对边界进行检查。如bs1([3,4,7,9,10,11],11)返回-1\n\n正确写法一：小于判断加检查边界后返回(len(num); l \ndef bs(nums, target):\n    l, r = 0, len(nums) - 1\n    while l  target: r = m \n    if nums[l] == target:  ###### check the boundary \n        return l\n    else:\n        return -1\n\n变种写法..len(nums) - 1改成len(nums)免去检查\ndef bs(nums, target):\n    l, r = 0, len(nums)\n    while l  target: r = m \n    return -1\n\n一样的java递归写法:\n    public int search(int[] nums, int target) {\n        int l = 0, r = nums.length;\n        return dfs(nums, l, r, target);\n    }\n\n    public int dfs(int[] nums, int l, int r, int target) {\n        if (l >= r) {\n            return -1;\n        }\n        int m = l + (r - l) / 2;\n        if (nums[m] == target) return m;\n        if (nums[m] > target) {\n            return dfs(nums, l, m, target);\n        } else {\n            return dfs(nums, m + 1, r, target);\n        }\n    }\n\n正确写法二：小于等于加直接返回(len(num) - 1; l \ndef bs(nums, target):\n    l, r = 0, len(nums) - 1\n    while l  target: r = m - 1\n    return -1\n\n一样的java递归写法:\n    public int search(int[] nums, int target) {\n        int l = 0, r = nums.length - 1;\n        return dfs(nums, l, r, target);\n    }\n\n    public int dfs(int[] nums, int l, int r, int target) {\n        if (l > r) {\n            return -1;\n        }\n        int m = l + (r - l) / 2;\n        if (nums[m] == target) return m;\n        if (nums[m] > target) {\n            return dfs(nums, l, m - 1, target);\n        } else {\n            return dfs(nums, m + 1, r, target);\n        }\n    }\n\n溢出：\n已知 x>l>=0， x>h>=0， h+l>x，由其中的h和-l得h-l，所以h-l不会溢出，又因为l，所以l+(h-l)/2不会溢出。\n求区间中重复数字的上下界长度：    \ndef lower_bound(a, tar): \n    l, r = 0, len(a)\n    while l \n求下界中，这个条件a[m] 的意思是说数组中如果一个数等于target的时候，右边指针会多走一步到达下界。同样在求上界中，a[m] 是说左边指针会多走一步到达上界。\n"},"alg/81_Search_in_Rotated_Sorted_Array_II.html":{"url":"alg/81_Search_in_Rotated_Sorted_Array_II.html","title":"81. Search in Rotated Sorted Array II","keywords":"","body":"81. Search in Rotated Sorted Array II\n升级版二分法，注意边界。。。。。。。。。。特别是target所在的范围，是一块连续的区域。如果有重复数字的话，就把左边界自增1，指向下一个数字。\npublic boolean search(int[] nums, int target) {\n    int l = 0,\n        r = nums.length;\n    while (l >> 1;\n        if (nums[mid] == target) return true;\n        if (nums[mid] > nums[l]) { // increment\n            if (target >= nums[l] && target  nums[mid] && target \n\n"},"alg/74_Search_a_2D_Matrix.html":{"url":"alg/74_Search_a_2D_Matrix.html","title":"74. Search a 2D Matrix","keywords":"","body":"74. Search a 2D Matrix\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\n\n对每一行进行一次二分法\npublic boolean searchMatrix(int[][] matrix, int target) {\n    for (int i = 0; i >> 1;\n            if (target == matrix[i][mid]) {\n                return true;\n            } else if (matrix[i][mid] \n因为并成一整行之后的数字刚好也是有序的，所以可以把整个矩阵看成一行进行排列\npublic boolean searchMatrix(int[][] matrix, int target) {\n    if (matrix.length == 0 || matrix[0].length == 0) return false;\n    int row = matrix.length, col = matrix[0].length;\n    int l = 0, r = row * col;\n    while (l > 1;\n        int mid_value = matrix[mid / col][mid % col];\n        if (mid_value == target) {\n            return true;\n        }\n        if (mid_value \nmid_value的坐标计算：row=mid/col, col=mid%col\nmid: 6 mid_value: 16\nmid: 3 mid_value: 7\nmid: 1 mid_value: 3\n\n"},"alg/240_Search_a_2D_Matrix_II.html":{"url":"alg/240_Search_a_2D_Matrix_II.html","title":"240. Search a 2D Matrix II","keywords":"","body":"240. Search a 2D Matrix II\nmatrix = [\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\ntarget = 6\n\n以第一行最右边元素（刚好是第一行和最后一列的中间值）作为开始点，小于它减去col，大于加上row，新的点成为新的基准点，再向下或者向左走。注意边界！！！！\npublic boolean searchMatrix(int[][] matrix, int target) {\n    if (matrix.length == 0 || matrix[0].length == 0) return false;\n\n    int row = 0, col = matrix[0].length - 1;\n\n    while (col >= 0 && row \n\n"},"alg/53_Maximum_Subarray.html":{"url":"alg/53_Maximum_Subarray.html","title":"53. Maximum Subarray","keywords":"","body":"53. Maximum Subarray\n求出数组的连续子序列之和，设定变量f用来记录当前的最大和，也就是取出max(i-1前面的已经累加的和,i的数值)，而res是用来记录整个遍历过程中最大的f。\npublic int maxSubArray(int[] nums) {\n    if (nums.length == 0 || nums == null) return 0;\n    int f = nums[0], result = nums[0];\n    for (int i = 1; i \n"},"alg/287_Find_the_Duplicate_Number.html":{"url":"alg/287_Find_the_Duplicate_Number.html","title":"287. Find the Duplicate Number","keywords":"","body":"287. Find the Duplicate Number\n寻找长度为n+1数组中只重复出现一次的数字，数组范围在[1, n]\n鸽巢原理/抽屉原理+二分法，算出中位index：mid，对小于等与mid的数字进行统计，若大于mid，说明左边有重复的数字（可以想成原来应该是相等的，但是有重复的数字所以超过了限制），则移动右指针为r。时间O(nlogn)，空间O(1)\npublic int findDuplicate(int[] nums) {\n    int l = 0,  r = nums.length;\n    while (l >> 1;\n        int count = 0;\n        for (int num : nums) {\n            if (num \n\n快慢指针，同链表cycle检测#142，找entry point, 这种解法限制很大，必须同时满足n+1长度，[1, n]的大小范围（不能是0），否则出界，如测试用例[0, 2, 2, 4, 5, 6]，前面一种解法可以有0，set解法都适用。\nhttp://keithschwarz.com/interesting/code/?dir=find-duplicate\npublic int findDuplicate(int[] nums) {\n    if (nums.length \n如果不考虑长度和范围，可以设置set并去重，时间空间均为O(n).\npublic int findDuplicate(int[] nums) {\n    HashSet set = new HashSet<>();\n    for (int num : nums) {\n        if (set.contains(num)) return num;\n        set.add(num);\n    }\n    return -1;\n}\n\n"},"alg/8_String_to_Integer.html":{"url":"alg/8_String_to_Integer.html","title":"8. String to Integer","keywords":"","body":"8. String to Integer\n\n检查空字符串\n设置遍历指针index\n去掉前面的空格，注意中间不用去掉，如+0 123，不是整数\n边界检查后，检查空格之后的第一个符号位（如果存在）\n进入循环，判断是否为数字，判断是否溢出\n返回sign * res\n\npublic static int myAtoi3(String str) {\n    // check null and empty\n    if (str == null || str.isEmpty()) return 0;\n\n    int index = 0, sign = 1, res = 0;\n    // this while loop can be replaced as str = str.trim();\n    while (index  9) break;\n\n        // check overflow\n        if (Integer.MAX_VALUE / 10 == res && Integer.MAX_VALUE % 10 \n换成char array\npublic static int myAtoi(String str) {\n    int index = 0;\n    char[] c = str.toCharArray();\n    if (c.length == 0) return 0;\n\n    while (index  9) break; // not a digit\n\n        // check overflow: && > ||\n        if ((Integer.MAX_VALUE / 10 == res && Integer.MAX_VALUE % 10 \n"},"alg/349_Intersection_of_Two_Arrays.html":{"url":"alg/349_Intersection_of_Two_Arrays.html","title":"349. Intersection of Two Arrays","keywords":"","body":"349. Intersection of Two Arrays\n求两个数组的交集\nset，很乱，各种数据类型乱转。\npublic int[] intersection(int[] nums1, int[] nums2) {\n    Set res = new HashSet<>();\n    Set set = new HashSet<>();\n    for (int i = 0; i \n求集合交集，java慢慢\nreturn list(set(nums1) & set(nums2))\n\npublic int[] intersection(int[] nums1, int[] nums2) {\n    Set set1 = new HashSet();\n    Set set2 = new HashSet();\n    for (int num : nums1) set1.add(num);\n    for (int num : nums2) set2.add(num);\n\n    set1.retainAll(set2);\n\n    int i = 0;\n    int[] res = new int[set1.size()];\n    for (int num : set1) {\n        res[i++] = num;\n    }\n\n    return res;\n}\n\nretainAll的实现方式，可以看到比contains多了些代码:\npublic boolean retainAll(Collection c) {\n    Objects.requireNonNull(c);\n    boolean modified = false;\n    Iterator it = iterator();\n    while (it.hasNext()) {\n        if (!c.contains(it.next())) {\n            it.remove();\n            modified = true;\n        }\n    }\n    return modified;\n}\n\n"},"alg/350_Intersection_of_Two_Arrays_II.html":{"url":"alg/350_Intersection_of_Two_Arrays_II.html","title":"350. Intersection of Two Arrays II","keywords":"","body":"350. Intersection of Two Arrays II\npublic int[] intersect(int[] nums1, int[] nums2) {\n    Map map = new HashMap<>();\n    int size = Math.min(nums1.length, nums2.length);\n    int[] res = new int[size];\n\n    for (int num : nums1) {\n        map.put(num, map.getOrDefault(num, 0) + 1);\n    }\n\n    int i = 0;\n    for (int num : nums2) {\n        if (map.getOrDefault(num, 0) > 0) {\n            res[i++] = num;\n            map.put(num, map.get(num) - 1);\n        }\n    }\n    return Arrays.copyOf(res, i);\n}\n\n"},"1_linkedlist.html":{"url":"1_linkedlist.html","title":"Linked List","keywords":"","body":"链表\n难点：边界判断，指针指向\n操作：迭代，递归\n\ninsertion:\n147\n\ndeletion:\n237, 203, 83, 82, 19\n\npartition:\n86, 328\n\nreversion: \n206, 24, 还有区间反转记得看\n\nfind middle, cycle:\n876, 141, 142\n\nintersection:\n160\n\nmerge: \n21, 23(一开始的impl很慢)\n\nsort:\n148\n\n组合:\n707, 234, 143（这两题前两步一样，都是先分割再反转，再比较或合并）, 146(LRU)\n\n其他:\n817\n\n\n什么地方学到过链表？\n比如hashmap中的每一个bucket中存放的对象可以用链表连接存储，比如垃圾收集中的freelist，比如linux文件系统的inode，比如堆上对象的创建，比如poll(是不啦)，比如图，还有比如某次作业存放jobs\n数组和链表：\n\n数组：长度确定，随机读写，容易实现\n链表：长度不确定，边界增删频繁\n\n\n"},"alg/206_Reverse_Linked_List.html":{"url":"alg/206_Reverse_Linked_List.html","title":"206. Reverse Linked List","keywords":"","body":"206. Reverse Linked List\n1.recursion:\n分为三步：定义递归函数以及它的input，考虑递归关系(改指针)，设定返回条件(cur为null的时候返回pre)\npublic ListNode reverseList(ListNode head) {\n    return dfs(null, head);\n}\n\npublic ListNode dfs(ListNode pre, ListNode cur) {\n    if (cur == null) return pre;\n    ListNode next_node = cur.next;\n    cur.next = pre;\n    return dfs(cur, next_node);\n}\n\n\n2.iteration:\n四步见图\ndef reverseList(self, head):\n    \"\"\"\n    :type head: ListNode\n    :rtype: ListNode\n    \"\"\"\n    pre = None\n    while head:\n        next_node = head.next\n        head.next = pre\n        pre = head\n        head = next_node\n    return pre\n\n\n"},"alg/24_Swap_Nodes_in_Pairs.html":{"url":"alg/24_Swap_Nodes_in_Pairs.html","title":"24. Swap Nodes in Pairs","keywords":"","body":"24. Swap Nodes in Pairs\nreverse linked list升级版\n1.recustion:\n和中序遍历的递归写法有点像，先定义n，然后让head.next递归去得到结果，最后让n.next=head连接整理好的链表，过程见图。\npublic ListNode swapPairs(ListNode head) {\n    if ((head== null) || (head.next) == null) {\n        return head;\n    }\n    ListNode n = head.next;\n    head.next = swapPairs(head.next.next);\n    n.next = head;\n    return n;\n}\n\n\n2.iteration:\n见图顺序，dummy的作用是创建新的链表头，返回结果的时候用，point是取节点的基础。\npublic ListNode swapPairs(ListNode head) {\n    ListNode dummy = new ListNode(0);\n    dummy.next = head;\n    ListNode point = dummy;\n    while (point.next != null && point.next.next != null) {\n        ListNode s1 = point.next;\n        ListNode s2 = point.next.next;\n        point.next = s2;\n        s1.next = s2.next;\n        s2.next = s1;\n        point = s1;\n    }\n    return dummy.next;\n}\n\n\n"},"alg/876_Middle_of_the_Linked_List.html":{"url":"alg/876_Middle_of_the_Linked_List.html","title":"876. Middle of the Linked List","keywords":"","body":"876. Middle of the Linked List\n快慢指针求链表中间值，奇数时fast.next==null，偶数时fast==null\npublic ListNode middleNode(ListNode head) {\n    ListNode fast = head, slow = head;\n    while (fast != null && fast.next != null) {\n        fast = fast.next.next;\n        slow = slow.next;\n    }\n    return slow;\n}\n\n"},"alg/141_Linked_List_Cycle.html":{"url":"alg/141_Linked_List_Cycle.html","title":"141. Linked List Cycle","keywords":"","body":"141. Linked List Cycle\n快慢指针，当快指针和慢指针重叠时说明有cycle，while条件是为了没有cycle的时候跳出循环。\npublic boolean hasCycle(ListNode head) {\n    ListNode fast = head, slow = head;\n    while (fast != null && fast.next != null) { // in case that no cycle in the linked list\n        fast = fast.next.next;\n        slow = slow.next;\n        if (fast == slow) {\n            return true;\n        }\n    }\n    return false;\n}\n\n"},"alg/142_Linked_List_Cycle_II.html":{"url":"alg/142_Linked_List_Cycle_II.html","title":"142. Linked List Cycle II","keywords":"","body":"142. Linked List Cycle II\n寻找cycle的开始节点。相比快慢指针另外多加了一个指针entry，用来从头寻找cycle入口\npublic ListNode detectCycle(ListNode head) {\n    ListNode entry = head,\n             fast = head,\n             slow = head;\n    while (fast != null && fast.next != null) {\n        fast = fast.next.next;\n        slow = slow.next;\n        if (fast == slow) {\n            while (entry != slow) {\n                entry = entry.next;\n                slow = slow.next;\n            }\n            return entry;\n        }\n    }\n    return null;\n}\n\n\n"},"alg/160_Intersection_of_Two_Linked_Lists.html":{"url":"alg/160_Intersection_of_Two_Linked_Lists.html","title":"160. Intersection of Two Linked Lists","keywords":"","body":"160. Intersection of Two Linked Lists\n由于第一次遍历可能因为不等长找不到交点，在遍历完之后需要让链表的尾部等于对方的头节点，直到找到交点跳出循环。\npublic ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n    if (headA == null || headB == null) return null;\n\n    ListNode nodeA = headA,\n             nodeB = headB;\n    while (headA != headB) {\n        headA = (headA == null) ? nodeB : headA.next;\n        headB = (headB == null) ? nodeA : headB.next;\n    }\n    return headA;\n}\n\n\n"},"alg/237_Delete_Node_in_a_Linked_List.html":{"url":"alg/237_Delete_Node_in_a_Linked_List.html","title":"237. Delete Node in a Linked List","keywords":"","body":"237. Delete Node in a Linked List\n删除链表中的一个节点（除了尾节点），就是修改值和指针。如果要删除尾节点还必须知道被删除链表的指针。\npublic void deleteNode(ListNode node) {\n    node.val = node.next.val;\n    node.next = node.next.next;\n}\n\n"},"alg/203_Remove_Linked_List_Elements.html":{"url":"alg/203_Remove_Linked_List_Elements.html","title":"203. Remove Linked List Elements","keywords":"","body":"203. Remove Linked List Elements\nrecursion\npublic ListNode removeElements(ListNode head, int val) {\n    if (head == null) return null;\n    head.next = removeElements(head.next, val);\n    return (head.val == val) ? head.next : head;\n}\n\nnaive方法，先移除头部，再移除中间。\npublic ListNode removeElements(ListNode head, int val) {\n    // remove head\n    while (head != null && head.val == val) head = head.next;\n    // remove internal nodes\n    ListNode node = head;\n    while (node != null && node.next != null) {\n        if (node.next != null && node.next.val == val) {\n            node.next = node.next.next;\n        } else {\n            node = node.next;\n        }\n    }\n    return head;\n}\n\ndummy node方法\npublic ListNode removeElements(ListNode head, int val) {\n    ListNode dummy = new ListNode(0);\n    dummy.next = head;\n    ListNode cur = dummy;\n    while (head != null) {\n        if (head.val != val) {\n            cur.next = head;\n            cur = head;\n        }\n        head = head.next;\n    }\n    cur.next = null; // in case that all elements in the list are same\n    return dummy.next;\n}\n\n\n"},"alg/83_Remove_Duplicates_from_Sorted_List.html":{"url":"alg/83_Remove_Duplicates_from_Sorted_List.html","title":"83. Remove Duplicates from Sorted List","keywords":"","body":"83. Remove Duplicates from Sorted List\nrecursion: \n你🐴 不看答案还是写不出啊啊啊啊啊啊啊啊啊\npublic ListNode deleteDuplicates(ListNode head) {\n    if (head == null || head.next == null) return head;\n    head.next = deleteDuplicates(head.next);\n    return (head.val == head.next.val) ? head.next : head;\n}\n\nnaive方法:\npublic ListNode deleteDuplicates(ListNode head) {\n    ListNode node = head;\n    while (head != null) {\n        while (head.next != null && head.val == head.next.val) {\n            head.next = head.next.next;\n        }\n        head = head.next;\n    }\n    return node;\n}\n\n"},"alg/82_Remove_Duplicates_from_Sorted_List_II.html":{"url":"alg/82_Remove_Duplicates_from_Sorted_List_II.html","title":"82. Remove Duplicates from Sorted List II","keywords":"","body":"82. Remove Duplicates from Sorted List II\ndummy node法跳过重复node\npublic ListNode deleteDuplicates(ListNode head) {\n    ListNode dummy = new ListNode(0);\n    dummy.next = head;\n    ListNode pre = dummy;\n    ListNode cur = head;\n\n    while (cur != null) {\n        while (cur.next != null && cur.next.val == cur.val) {\n            cur = cur.next;\n        }\n        if(pre.next == cur) {\n            pre = pre.next;\n        } else {\n            pre.next = cur.next;\n        }\n        cur = cur.next;\n    }\n    return dummy.next;\n}\n\n"},"alg/86_Partition_List.html":{"url":"alg/86_Partition_List.html","title":"86. Partition List","keywords":"","body":"86. Partition List\n新建两个list，小于val去左边，大于去右边，最后拼一拼\n无脑新添Node法\npublic ListNode partition(ListNode head, int x) {\n    ListNode l = new ListNode(0),\n             r = new ListNode(0);\n    ListNode lh = l, rh = r;\n    while (head != null) {\n        if (head.val \n不加新node，直接用head，head就像一条蛇游走在l和r之间什么鬼啦。这里有个坑点就是必须加上r.next = null;。比如拿例题head = 1->4->3->2->5->2, x = 3来说，分割完之后lh.next=1->2->2,而rh=4->3->5->2。rh最后这个2和lh最后这个2是一样的node，所以在运行l.next = rh.next;的时候，其实会同时改变l和rh，结果就变成1->2->2->4->3->5->2->4->3->5->2....的无限循环，所以需要删除rh最后这个2。（为什么会有这个2呢是因为在最后一次加node的时候没有新的值了，so这个2没有被覆盖。\npublic ListNode partition(ListNode head, int x) {\n    ListNode l = new ListNode(0), r = new ListNode(0);\n    ListNode lh = l, rh = r;\n    ListNode node = head;\n    while (head != null) {\n        if (head.val \n"},"alg/234_Palindrome_Linked_List.html":{"url":"alg/234_Palindrome_Linked_List.html","title":"234. Palindrome Linked List","keywords":"","body":"234. Palindrome Linked List\nnaive迭代\npublic boolean isPalindrome(ListNode head) {\n    // split\n    ListNode fast = head,\n             slow = head;\n    while (fast != null && fast.next != null) {\n        fast = fast.next.next;\n        slow = slow.next;\n    }\n\n    // reverse\n    ListNode node = slow;\n    ListNode pre = null;\n    while (node != null) {\n        ListNode tmp = node.next;\n        node.next = pre;\n        pre = node;\n        node = tmp;\n    }\n\n    // compare\n    while (pre != null) {\n        if (pre.val != head.val) {\n            return false;\n        }\n        pre = pre.next;\n        head = head.next;\n    }\n    return true;\n}\n\n"},"alg/143_Reorder_List.html":{"url":"alg/143_Reorder_List.html","title":"143. Reorder List","keywords":"","body":"143. Reorder List\n分割，反转，合并\npublic void reorderList(ListNode head) {\n    if (head == null || head.next == null) return;\n    // split\n    ListNode fast = head,\n            slow = head;\n    while (fast != null && fast.next != null) {\n        fast = fast.next.next;\n        slow = slow.next;\n    }\n    ListNode l2 = slow.next;   // l2 = 4 --> null\n    slow.next = null;   // head = 1 -- > 2 --> 3 --> null\n\n    // reverse\n    ListNode rel2 = null,\n            cur = l2;\n    while (cur != null) {\n        ListNode tmp = cur.next;\n        cur.next = rel2;\n        rel2 = cur;\n        cur = tmp;\n    }\n\n    ListNode l1 = head;\n    // merge\n    while (l1 != null && rel2 != null) {\n        ListNode tmp = l1.next;\n        l1.next = rel2;\n        l1 = l1.next;\n        rel2 = tmp;\n    }\n}\n\n分割的时候，\n奇数list会被分为1-->2-->3-->4; 5-->6-->7\n偶数list会被分为1-->2-->3 -->4; 5-->6\n"},"alg/147_Insertion_Sort_List.html":{"url":"alg/147_Insertion_Sort_List.html","title":"147. Insertion Sort List","keywords":"","body":"147. Insertion Sort List\n过程见图\npublic ListNode insertionSortList(ListNode head) {\n    ListNode dummy = new ListNode(0); \n    ListNode pre = dummy,\n            cur = head,\n            next = null;\n    while (cur != null) {\n        ListNode tmp = cur.next;  // store the following value\n        while (pre.next != null && pre.next.val \n\n"},"alg/328_Odd_Even_Linked_List.html":{"url":"alg/328_Odd_Even_Linked_List.html","title":"328. Odd Even Linked List","keywords":"","body":"328. Odd Even Linked List\n这里的even和odd指的是index。奇数位的连成一个链表，偶数位的连成一个链表，最后这两个链表连一连。\npublic ListNode oddEvenList(ListNode head) {\n    if (head == null) return head;\n    ListNode odd = head,\n            even = head.next,\n            evenHead = even;\n\n    while (even != null && even.next != null) {\n        odd.next = odd.next.next;\n        even.next = even.next.next;\n        odd = odd.next;\n        even = even.next;\n    }\n    // concat\n    odd.next = evenHead;\n    return head;\n}\n\n"},"alg/148_Sort_List.html":{"url":"alg/148_Sort_List.html","title":"148. Sort List","keywords":"","body":"148. Sort List\n将list等分，merge函数和21题一样\npublic ListNode sortList(ListNode head) {\n    if (head == null || head.next == null) return head;\n    ListNode fast = head,\n            slow = head,\n            pre = null;\n    while (fast != null && fast.next != null) {\n        pre = slow;\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    pre.next = null;\n    ListNode l = sortList(head), r = sortList(slow);\n    return merge(l, r);\n}\n\npublic ListNode merge(ListNode l, ListNode r) {\n    ListNode dummy = new ListNode(0);\n    ListNode head = dummy;\n    while (l != null && r != null) {\n        if (l.val \n"},"alg/21_Merge_Two_Sorted_Lists.html":{"url":"alg/21_Merge_Two_Sorted_Lists.html","title":"21. Merge Two Sorted Lists","keywords":"","body":"21. Merge Two Sorted Lists\nrecursion: \npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n    if (l1 == null || l2 == null) \n        return (l1 != null) ? l1 : l2;\n\n    if (l1.val \n\nnaive方法设置dummy node再比较大小。\npublic ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n    ListNode p = new ListNode(0);\n    ListNode head = p;\n    while (l1 != null && l2 != null) {\n        if (l1.val \n"},"alg/23_Merge_k_Sorted_Lists.html":{"url":"alg/23_Merge_k_Sorted_Lists.html","title":"23. Merge k Sorted Lists","keywords":"","body":"23. Merge k Sorted Lists\nrecusion\npublic ListNode mergeKLists(ListNode[] lists) {\n    return partition(lists, 0, lists.length - 1);\n}\n\npublic ListNode partition(ListNode[] lists, int l, int r) {\n    if (l == r) return lists[l];\n    else if (l >> 1;\n        ListNode l1 = partition(lists, l, m);\n        ListNode l2 = partition(lists, m + 1, r);\n        return merge(l1, l2);\n    }\n    return null;\n}\n\npublic ListNode merge(ListNode l1, ListNode l2) {\n    if (l1 == null || l2 == null) return (l1 != null) ? l1 : l2;\n    if (l1.val \nheap\n优先队列重写ListNode的Comparator从小到大取点。\npublic ListNode mergeKLists2(ListNode[] lists) {\n    if (lists.length == 0) return null;\n    PriorityQueue q = new PriorityQueue<>(lists.length, new Comparator() {\n        public int compare(ListNode l1, ListNode l2) {\n            if (l1.val \nnaive\n一开始的实现，拼一拼\npublic ListNode mergeKLists(ListNode[] lists) {\n    List newList = new ArrayList<>(Arrays.asList(lists));\n    while (newList.size() >= 2) {\n        ListNode list = merge2List(newList.get(newList.size() - 1), newList.get(newList.size() - 2));\n        newList.add(0, list);\n        newList.remove(newList.size() - 1);\n        newList.remove(newList.size() - 1);\n    }\n    if (newList.size() == 1) return newList.get(0);\n    return null;\n}\n\n"},"alg/146_LRU_Cache.html":{"url":"alg/146_LRU_Cache.html","title":"146. LRU Cache","keywords":"","body":"146. LRU Cache\n主要逻辑：\n\nfrom collections import OrderedDict\nclass LRUCache:\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        self.cap = capacity\n        self.d = OrderedDict()\n\n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        if key in self.d:\n            value = self.d.pop(key)\n            self.d[key] = value\n            return value\n        return -1\n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: void\n        \"\"\"\n        if key in self.d:\n            self.d.pop(key)\n        else:\n            if self.cap > 0:\n                self.cap -= 1\n                self.d[key] = value\n            else:\n                self.d.popitem(last=False)\n        self.d[key] = value\n\n链表+字典实现，所有用过或者新插入的点会插入链表末尾(tail之前)，删除时取最前面的(head指向)的节点删除：\nclass Node:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.prev = None\n        self.next = None\n\nclass LRUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        self.capacity = capacity\n        self.d = {}\n        self.head, self.tail = Node(0, 0), Node(0, 0)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        if key in self.d:\n            node = self.d[key]\n            self._remove(node)\n            self._add(node)\n            return node.value\n        return -1\n\n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: void\n        \"\"\"\n        new_node = Node(key, value)\n        if key in self.d:\n            node_remove = self.d[key]\n            self._remove(node_remove)\n        else:\n            if self.capacity > 0:\n                self.capacity -= 1\n            else:\n                node_remove = self.head.next # get the front node\n                self._remove(node_remove)   # remove linked list\n                del self.d[node_remove.key] # remove dict\n        self._add(new_node)         # update linked list\n        self.d[key] = new_node      # update dict\n\n\n    def _add(self, node):\n        last_node = self.tail.prev # get the last node\n        last_node.next = node\n        node.prev = last_node\n        node.next = self.tail\n        self.tail.prev = node\n\n    def _remove(self, node):\n        prev_node = node.prev\n        next_node = node.next\n        prev_node.next = next_node\n        next_node.prev = prev_node\n\n\njava LinkedHashMap直接实现，注意参数和removeEldestEntry的返回值，这个配置在TIJ中也提到过，没有被访问过的元素会在列表的最前面。\nclass LRUCache2 {\n    int capacity;\n    Map map;\n\n    public LRUCache2(int capacity) {\n        this.capacity = capacity;\n        map = new LinkedHashMap<>(capacity, 0.75f, true) { // removed by access order\n            // true if eldest element should be removed\n            // (when self.size larger than capacity)\n            protected boolean removeEldestEntry(Map.Entry eldest) {\n                return size() > capacity;\n            }\n        };\n    }\n\n    public int get(int key) {\n        return map.getOrDefault(key, -1);\n    }\n\n    public void put(int key, int value) {\n        map.put(key, value);\n    }\n}\n\n0.75f是HashMap默认的load factor，用于hashmap的自动扩容。比如说hashmap有16个buckets，当12(16*0.75)个buckets装满后，hashmap会自动增加到32个buckets。\n作用：平衡时间和空间的开销。高的load factor会减少空间开销，但是会增加collision，从而增加了get和put的时间开销。\n"},"alg/817_Linked_List_Components.html":{"url":"alg/817_Linked_List_Components.html","title":"817. Linked List Components","keywords":"","body":"817. Linked List Components\n判断链表中元素是否在set(G)中得到连通分量的个数（下一个节点为null或者不在set中）。\npublic int numComponents(ListNode head, int[] G) {\n    Set set = new HashSet();\n    for (int i = 0; i \n"},"alg/707_Design_Linked_List.html":{"url":"alg/707_Design_Linked_List.html","title":"707. Design Linked List","keywords":"","body":"707. Design Linked List\n基本操作，注意函数的复用，addAtHead和addAtTail可以用addAtIndex来写\nclass Node(object):\n\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\nclass MyLinkedList(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.head = None\n        self.size = 0\n\n    def get(self, index):\n        \"\"\"\n        Get the value of the index-th node in the linked list. If the index is invalid, return -1.\n        :type index: int\n        :rtype: int\n        \"\"\"\n        if index = self.size:\n            return -1\n\n        if self.head is None:\n            return -1\n\n        curr = self.head\n        for i in range(index):\n            curr = curr.next\n        return curr.val\n\n    def addAtHead(self, val):\n        \"\"\"\n        Add a node of value val before the first element of the linked list.\n        After the insertion, the new node will be the first node of the linked list.\n        :type val: int\n        :rtype: void\n        \"\"\"\n        self.addAtIndex(0, val)\n\n    def addAtTail(self, val):\n        \"\"\"\n        Append a node of value val to the last element of the linked list.\n        :type val: int\n        :rtype: void\n        \"\"\"\n        self.addAtIndex(self.size, val)\n\n    def addAtIndex(self, index, val):\n        \"\"\"\n        Add a node of value val before the index-th node in the linked list.\n        If index equals to the length of linked list, the node will be appended to the end of linked list.\n        If index is greater than the length, the node will not be inserted.\n        :type index: int\n        :type val: int\n        :rtype: void\n        \"\"\"\n        if index  self.size:\n            return\n\n        node = Node(val)\n\n        if index == 0:\n            node.next = self.head\n            self.head = node\n        else:\n            curr = self.head\n            for i in range(index - 1):\n                curr = curr.next\n            node.next = curr.next\n            curr.next = node\n\n        self.size += 1\n\n    def deleteAtIndex(self, index):\n        \"\"\"\n        Delete the index-th node in the linked list, if the index is valid.\n        :type index: int\n        :rtype: void\n        \"\"\"\n        if index = self.size:\n            return\n\n        curr = self.head\n        if index == 0:\n            self.head = curr.next\n        else:\n            for i in range(index - 1):\n                curr = curr.next\n            curr.next = curr.next.next\n\n        self.size -= 1\n\n"},"alg/19_Remove_Nth_Node_From_End_of_List.html":{"url":"alg/19_Remove_Nth_Node_From_End_of_List.html","title":"19. Remove Nth Node From End of List","keywords":"","body":"19. Remove Nth Node From End of List\nnaive方法，要算两次，正数=总数(length)+1-倒数(n)，所以走到倒数前面一个节点也就是length-n修改指针指向。\npublic ListNode removeNthFromEnd(ListNode head, int n) {\n    if (head == null || n == 0) return null; // 注意head为空或者list为0返回null\n    ListNode dummy = new ListNode(0);\n    dummy.next = head;\n    ListNode res = dummy;\n\n    // compute length\n    int length = 0;\n    ListNode l1 = head;\n    while (l1 != null) {\n        length++;\n        l1 = l1.next;\n    }\n    if (n > length) return null; // 如果要找的倒数数字大于链表的总长度，返回空\n\n    // forward steps\n    int step = length - n;\n    for (int i = 0; i \n高票答案改写：快慢指针\ndef removeNthFromEnd(self, head, n):\n    \"\"\"\n    :type head: ListNode\n    :type n: int\n    :rtype: ListNode\n    \"\"\"\n    if not head or not n: return None \n    dummy = ListNode(0)\n    dummy.next = head\n    fast, slow = dummy, dummy\n\n    for i in range(n + 1):\n        if fast.next:\n            fast = fast.next\n        else: \n            return None\n\n    while fast:\n        fast = fast.next\n        slow = slow.next\n\n    slow.next = slow.next.next\n    return dummy.next\n\n边界如图，可以写成两种情况\n\n第二种：\nfor i in range(n):\n    if fast.next:\n        fast = fast.next\n    else: \n        return None\n\nwhile fast.next:\n    fast = fast.next\n    slow = slow.next\n\n"},"2_tree.html":{"url":"2_tree.html","title":"Tree","keywords":"","body":"树\n难点：写递归，有返回值的递归，没有返回值的递归，作为helper函数的递归等等。用迭代的话要注意数据结构，用栈还是队列。\n操作：迭代（用栈或者队列），递归。迭代比较快，递归代码少。有些写法是二分法的变形。\n\n递归三连：前中后序遍历，level遍历\n144，94，145, 102, 897(inorder变形), 114\n\nsame || symmetric || invert || merge: \n100, 101, 226, 617, \n\n\n二叉树的性质:\n\ndepth:  104(二叉树最大深度和最远距离), 110(判断平衡二叉树), 111\nnodes: 222, 872\npath(dfs): 129, 112, 113, 257\n\n二叉搜索树:\n\nsearch, insert, delete: 700, 701, 450\nvalidate: 98\ntrim: 669\n\nLCA: \n235, 236\n构建二叉树:\n\n108(sorted数组), 654(root最大), 105, 106\n\n树有什么用：把目录代到以上所有的算法中看有什么用。如level order traversal可以用来统计各级目录下的目录和文件。\n代码片段\n\n用来保留其中某个非空子树的结构，在617(merge), 450(delete)出现过，另外在merge链表里也出现过。\n\nif (t1 == null || t2 == null) {\n    return (t1 == null) ? t2 : t1;\n}\n\n另外在237(lca)中不用加判断条件是因为它前面的条件root.left != null && root.right != null已经排除了另外一种状况。\nreturn (root.left == null) ? root.right : root.left;\n\n\n"},"alg/144_Binary_Tree_Preorder_Traversal.html":{"url":"alg/144_Binary_Tree_Preorder_Traversal.html","title":"144. Binary Tree Preorder Traversal","keywords":"","body":"144. Binary Tree Preorder Traversal\nnaive级别递归三连其一：前序遍历。\npublic List preorderTraversal(TreeNode root) {\n    List res = new ArrayList<>();\n    dfs(root, res);\n    return res;\n}\n\npublic void dfs(TreeNode root, List res) {\n    if (root == null) return;\n    res.add(root.val);\n\n    dfs(root.left, res);\n    dfs(root.right, res);\n}\n\n递归的理解：先写出三个点的前序遍历，然后发现后面两个左右子树的if可以用dfs复用。\npublic void dfs(TreeNode root, List res) {\n    if (root == null) return;\n    res.add(root.val);\n        //  左边的坑：dfs(root.left, res);\n        if (root.left == null) return;\n        res.add(root.left.val);\n        // 右边的坑：dfs(root.right, res);\n        if (root.right == null) return;\n        res.add(root.right.val);\n}\n\n栈：先push右边再push左边，保持左边元素永远在栈顶（第一个出栈），或者还有一种操作是当右边的入栈时先pop左边的点\npublic List preorderTraversal(TreeNode root) {\n    List res = new ArrayList<>();\n    LinkedList s = new LinkedList<>();\n    if (root != null) s.push(root);\n\n    while (!s.isEmpty()) {\n        TreeNode node = s.pop();\n        res.add(node.val);\n        if (node.right != null) s.push(node.right);\n        if (node.left != null) s.push(node.left);\n    }\n    return res;\n}\n\n"},"alg/94_Binary_Tree_Inorder_Traversal.html":{"url":"alg/94_Binary_Tree_Inorder_Traversal.html","title":"94. Binary Tree Inorder Traversal","keywords":"","body":"94. Binary Tree Inorder Traversal\nnaive级别递归三连其二：中序遍历。\npublic List inorderTraversal(TreeNode root) {\n    List res = new ArrayList<>();\n    dfs(root, res);\n    return res;\n}\n\npublic void dfs(TreeNode root, List res) {\n    if (root == null) return;\n\n    dfs(root.left, res);\n    res.add(root.val);\n    dfs(root.right, res);\n}\n\n递归的理解：同样先写出三个点的中序遍历，然后发现迷之缩进里的两个左右子树的if可以用dfs复用。\npublic void dfs(TreeNode root, List res) {\n    if (root == null) return;\n        // 左边的坑：dfs(root.left, res);\n        if (root.left == null) return;\n        res.add(root.left.val);\n    res.add(root.val);\n        // 右边的坑：dfs(root.right, res)\n        if (root.right == null) return;\n        res.add(root.right.val);\n}\n\n注意不要用Stack。中序遍历的栈实现中有一个指针，有时候栈空的时候指针还指着下一个点，如[1,null,2,3]，所以判断条件为是栈不为空或者指针不为空。\npublic List inorderTraversal(TreeNode root) {\n    List res = new ArrayList<>();\n    Deque stack = new ArrayDeque<>();\n    TreeNode node = root;\n\n    while (!stack.isEmpty() || node != null) {\n        while (node != null) {\n            stack.push(node);\n            node = node.left;\n        }\n        node = stack.pop();\n        res.add(node.val);\n        node = node.right;\n    }\n    return res;\n}\n\n"},"alg/145_Binary_Tree_Postorder_Traversal.html":{"url":"alg/145_Binary_Tree_Postorder_Traversal.html","title":"145. Binary Tree Postorder Traversal","keywords":"","body":"145. Binary Tree Postorder Traversal\nnaive级别递归三连其三：后序遍历。\npublic List postorderTraversal(TreeNode root) {\n    List res = new ArrayList<>();\n    dfs(root, res);\n    return res;\n}\n\npublic void dfs(TreeNode root, List res) {\n    if (root == null) return;\n\n    dfs(root.left, res);\n    dfs(root.right, res);\n    res.add(root.val);\n}\n\n递归的理解：写出三个点的后序遍历，然后发现迷之缩进里的两个左右子树的if可以用dfs复用。\npublic void dfs(TreeNode root, List res) {\n    if (root == null) return;\n        // 左边的坑：dfs(root.left, res);\n        if (root.left == null) return;\n        res.add(root.left.val);\n        // 右边的坑：dfs(root.right, res)\n        if (root.right == null) return;\n        res.add(root.right.val);\n    res.add(root.val);\n}\n\n后序遍历的栈：和中序遍历不同的是，虽然后序遍历也有个指针，但是它和前序遍历一样是root节点在栈底，所以root一旦进栈，中间过程就不可能是空。\npublic List postorderTraversal(TreeNode root) {\n    LinkedList res = new LinkedList<>();\n    Deque stack = new ArrayDeque<>();\n    if (root != null) stack.push(root);\n    TreeNode node = root;\n\n    while (!stack.isEmpty()) {\n        if (node != null) {\n            stack.push(node);\n            res.push(node.val);\n            node = node.right;\n        } else {\n            node = stack.pop();\n            node = node.left;\n        }\n    }\n    return res;\n}\n\n当然也可以和中序遍历一样加在判断条件上\npublic List postorderTraversal(TreeNode root) {\n    LinkedList res = new LinkedList<>();\n    Deque stack = new ArrayDeque<>();\n    TreeNode node = root;\n\n    while (!stack.isEmpty() || node != null) {\n        if (node != null) {\n            stack.push(node);\n            res.push(node.val);\n            node = node.right;\n        } else {\n            node = stack.pop();\n            node = node.left;\n        }\n    }\n    return res;\n}\n\n"},"alg/102_Binary_Tree_Level_Order_Traversal.html":{"url":"alg/102_Binary_Tree_Level_Order_Traversal.html","title":"102. Binary Tree Level Order Traversal","keywords":"","body":"102. Binary Tree Level Order Traversal\n记得去看DFS递归解法。\n栈。注意List的用法，比如有时候用deque，有时候用linkedlist。queue的时候一般用offer方法，因为容量满的时候不会抛出异常而是返回false。\npublic List> levelOrder(TreeNode root) {\n    Queue q = new LinkedList<>();\n    List> res = new LinkedList<>();\n    if (root == null) return res;\n\n    q.offer(root);\n\n    while (!q.isEmpty()) {\n        int levelNum = q.size();\n        List subRes = new LinkedList<>();\n        for (int i = 0; i \n"},"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html":{"url":"alg/103_Binary_Tree_Zigzag_Level_Order_Traversal.html","title":"103. Binary Tree Zigzag Level Order Traversal","keywords":"","body":"103. Binary Tree Zigzag Level Order Traversal\n改进版flag，在添加元素的时候加在前面，而不是用reverse整个数组。\npublic List> zigzagLevelOrder(TreeNode root) {\n    Queue q = new LinkedList<>();\n    List> res = new LinkedList<>();\n    if (root == null) return res;\n    boolean flag = true;\n    q.offer(root);\n\n    while (!q.isEmpty()) {\n        int levelNum = q.size();\n        List subRes = new LinkedList<>();\n        for (int i = 0; i \n原来的impl，这里最好用deque+popleft\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        if not root: return res\n        queue = [root]\n        flag = False\n\n        while queue:\n            val = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                if node.left: queue.append(node.left)\n                if node.right: queue.append(node.right)\n                val.append(node.val)\n\n            if flag:\n                val.reverse()\n                flag = False\n            else:\n                flag = True\n            res.append(val)\n        return res\n\n"},"alg/637_Average_of_Levels_in_Binary_Tree.html":{"url":"alg/637_Average_of_Levels_in_Binary_Tree.html","title":"637. Average of Levels in Binary Tree","keywords":"","body":"637. Average of Levels in Binary Tree\n637题求均值，注意List这个interface是没有offer方法的，只有Queue和Deque有。\npublic List averageOfLevels(TreeNode root) {\n    List res = new ArrayList<>();\n    Deque queue = new ArrayDeque<>();\n\n    if(root == null) return res;\n    queue.offer(root);\n    while (!queue.isEmpty()) {\n        int size = queue.size();\n        double sum = 0;\n        for (int i = 0; i \n"},"alg/114_Flatten_Binary_Tree_to_Linked_List.html":{"url":"alg/114_Flatten_Binary_Tree_to_Linked_List.html","title":"114. Flatten Binary Tree to Linked List","keywords":"","body":"114. Flatten Binary Tree to Linked List\n二叉树 -----前序遍历----> 链表\npublic void flatten(TreeNode root) {\n    if (root == null) return;\n    TreeNode left = root.left;\n    TreeNode right = root.right;\n\n    root.left = null;\n\n    flatten(left);\n    flatten(right);\n\n    TreeNode cur = root;\n    root.right = left;\n    while (cur.right != null) {\n        cur = cur.right;\n    }\n    cur.right = right;\n}\n\n"},"alg/897_Increasing_Order_Search_Tree.html":{"url":"alg/897_Increasing_Order_Search_Tree.html","title":"897. Increasing Order Search Tree","keywords":"","body":"897. Increasing Order Search Tree\n中序遍历升级版，向右压扁一个bst，写不出的。思路是左边的中序遍历加上root，加上右边的中序遍历。\n就像这样：res = root.left ---> root ---> root.right，然后再看看递归函数，是不是写的很有道理\npublic TreeNode increasingBST(TreeNode root) {\n    return dfs(root, null);\n}\n\npublic TreeNode dfs(TreeNode root, TreeNode tail) {\n    if (root == null) return tail;\n    TreeNode res = dfs(root.left, root);\n    root.left = null;\n    root.right = dfs(root.right, tail);\n    return res;\n}\n\n"},"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html":{"url":"alg/108_Convert_Sorted_Array_to_Binary_Search_Tree.html","title":"108. Convert Sorted Array to Binary Search Tree","keywords":"","body":"108. Convert Sorted Array to Binary Search Tree\n由一个已经排序的数组构造二叉树，很容易就可以想到递归二分搜索，只是多了一个TreeNode的返回值。思路是每次取中间，再构造左右两边。\npublic TreeNode sortedArrayToBST(int[] nums) {\n    return dfs(nums, 0, nums.length - 1);\n}\n\npublic TreeNode dfs(int[] nums, int l, int r) {\n    if (l > r) return null;\n    int mid = (l + r) >>> 1;\n    TreeNode root = new TreeNode(nums[mid]);\n    root.left = dfs(nums, l, mid - 1);\n    root.right = dfs(nums, mid + 1, r);\n    return root;\n}\n\n第二种边界姿势，同二分法。但是这两种方法构造出的二叉树可能是不一样的，sorted数组只是代表了中序遍历，不能确定唯一的树。\npublic TreeNode sortedArrayToBST(int[] nums) {\n    return dfs(nums, 0, nums.length);\n}\n\npublic TreeNode dfs(int[] nums, int l, int r) {\n    if (l >= r) return null;\n    int mid = (l + r) >>> 1;\n    TreeNode root = new TreeNode(nums[mid]);\n    root.left = dfs(nums, l, mid);\n    root.right = dfs(nums, mid + 1, r);\n    return root;\n}\n\n"},"alg/654_Maximum_Binary_Tree.html":{"url":"alg/654_Maximum_Binary_Tree.html","title":"654. Maximum Binary Tree","keywords":"","body":"654. Maximum Binary Tree\n构造root值最大的二叉树，先找最大值，再构造左右两边的子树。和前面的二分法一样，只是把求mid换成了找最大值的函数。\npublic TreeNode constructMaximumBinaryTree(int[] nums) {\n    return dfs(nums, 0, nums.length - 1);\n}\n\npublic TreeNode dfs(int[] nums, int l, int r) {\n    if (l > r) return null;\n    int max = max(nums, l, r);\n    TreeNode root = new TreeNode(nums[max]);\n    root.left = dfs(nums, l, max - 1);\n    root.right = dfs(nums, max + 1, r);\n    return root;\n}\n\npublic int max(int[] nums, int l, int r) {\n    int max = r;\n    for (int i = l; i  nums[max]) max = i;\n    }\n    return max;\n}\n\n"},"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html":{"url":"alg/105_Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.html","title":"105. Construct Binary Tree from Preorder and Inorder Traversal","keywords":"","body":"105. Construct Binary Tree from Preorder and Inorder Traversal\n前序和后序不能确定唯一的二叉树因为：前序根左右，中序左根右，后序左右根。前序和后序代表的都是节点的上下关系，只有中序遍历代表了节点的左右关系。只有同时知道了左右和上下的关系才能确定唯一的二叉树。\n这题是前序和中序确定一个二叉树，递归主体框架还是\ndfs() {\n    if (...) return null;\n    root = TreeNode(val)\n    root.left = dfs(preorder(range), inorder(range))\n    root.right = dfs(preorder(range), inorder(range))\nreturn root\n}\n\n需要找出这几个值。\npublic TreeNode buildTree(int[] preorder, int[] inorder) {\n    return helper(preorder, inorder, 0, 0, inorder.length - 1);\n}\n\npublic TreeNode helper(int[] preorder, int[] inorder, int pl, int il, int ir) {\n    if (pl > preorder.length - 1 || il > ir) { // il = ir 时创建单个节点\n        return null;\n    }\n    TreeNode root = new TreeNode(preorder[pl]);\n    int inRootPos = 0;\n    for (int i = il; i \n"},"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html":{"url":"alg/106_Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal.html","title":"106. Construct Binary Tree from Inorder and Postorder Traversal","keywords":"","body":"106. Construct Binary Tree from Inorder and Postorder Traversal\npublic TreeNode buildTree(int[] inorder, int[] postorder) {\n    return buildTree(inorder, postorder, inorder.length - 1, 0, postorder.length - 1);\n}\n\nprivate TreeNode buildTree(int[] inorder, int[] postorder, int il, int ir, int pl) {\n    if (pl = ir; i--) {\n        if (inorder[i] == root.val) {\n            inRootPos = i;\n            break;\n        }\n    } \n    root.right = buildTree(inorder, postorder, il, inRootPos + 1, pl - 1);\n    root.left = buildTree(inorder, postorder, inRootPos - 1, ir, pl - (il - inRootPos) - 1);\n    return root;\n}\n\n"},"alg/100_Same_Tree.html":{"url":"alg/100_Same_Tree.html","title":"100. Same Tree","keywords":"","body":"100. Same Tree\n基础递归\npublic boolean isSameTree(TreeNode left, TreeNode right) {\n    if (left == null && right == null) {\n        return true;\n    }\n    if (left == null || right == null) {\n        return false;\n    }\n    return left.val == right.val && \n        isSameTree(left.left, right.left) && isSameTree(left.right, right.right);\n}\n\n"},"alg/572_Subtree_of_Another_Tree.html":{"url":"alg/572_Subtree_of_Another_Tree.html","title":"572. Subtree of Another Tree","keywords":"","body":"572. Subtree of Another Tree\n完全相同的子树结构：\npublic boolean isSubtree(TreeNode s, TreeNode t) {\n    if (s == null || t == null) return false;\n    if (dfs(s, t)) return true;\n    return isSubtree(s.left, t) || isSubtree(s.right, t);\n}\n\npublic boolean dfs(TreeNode s, TreeNode t) {\n    if (s == null && t == null) return true;\n    if (s == null || t == null) return false;\n    return (s.val == t.val) && dfs(s.left, t.left) && dfs(s.right, t.right);\n}\n\n部分相同的子树结构, 如\n[8,8,7,9,2,null,null,null,null,4,7]\n[8,9,2]\n\n区别点在sametree函数\npublic boolean HasSubtree(TreeNode s,TreeNode t) {\n    if (s == null || t == null) return false;\n    if (dfs(s, t)) return true;\n    return HasSubtree(s.left, t) || HasSubtree(s.right, t);\n}\n\npublic boolean dfs(TreeNode s, TreeNode t) {\n    if (t == null) return true;\n    if (s == null) return false;\n    return (s.val == t.val) && dfs(s.left, t.left) && dfs(s.right, t.right);\n}\n\n"},"alg/101_Symmetric_Tree.html":{"url":"alg/101_Symmetric_Tree.html","title":"101. Symmetric Tree","keywords":"","body":"101. Symmetric Tree\n和same tree很像，把root弄成了两个点，并且左右子树相反。\npublic boolean isSymmetric(TreeNode root) {\n    if (root == null) return true;\n    return dfs(root.left, root.right);\n}\n\npublic boolean dfs(TreeNode left, TreeNode right) {\n    if (left == null && right == null) {\n        return true;\n    }\n    if (left == null || right == null) {\n        return false;\n    }\n    return (left.val == right.val) && \n            dfs(left.left, right.right) && dfs(left.right, right.left);\n}\n\n"},"alg/226_Invert_Binary_Tree.html":{"url":"alg/226_Invert_Binary_Tree.html","title":"226. Invert Binary Tree","keywords":"","body":"226. Invert Binary Tree\nnaive递归\ndef invertTree(self, root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: TreeNode\n    \"\"\"\n    if not root: return \n    root.left, root.right = root.right, root.left\n    self.invertTree(root.left)\n    self.invertTree(root.right)\n    return root\n\npublic TreeNode invertTree(TreeNode root) {\n    if (root == null) return null;\n    TreeNode tmp = root.left;\n    root.left = invertTree(root.right);\n    root.right = invertTree(tmp);\n    return root;\n}\n\n没有返回值，先交换后递归\npublic void Mirror(TreeNode root) {\n    if (root == null) return;\n    TreeNode tmp = root.left;\n    root.left = root.right;\n    root.right = tmp;\n    Mirror(root.left);\n    Mirror(root.right);\n}\n\nBFS:\npublic TreeNode invertTree(TreeNode root) {\n    if (root == null) return null;\n    Queue q = new LinkedList<>();\n    q.offer(root);\n\n    while (!q.isEmpty()) {\n        TreeNode node = q.poll();\n        TreeNode tmp = node.right;\n        node.right = node.left;\n        node.left = tmp;\n\n        if (node.left != null) q.offer(node.left);\n        if (node.right != null) q.offer(node.right);\n    }\n    return root;\n}\n\n"},"alg/617_Merge_Two_Binary_Trees.html":{"url":"alg/617_Merge_Two_Binary_Trees.html","title":"617. Merge Two Binary Trees","keywords":"","body":"617. Merge Two Binary Trees\n简单递归，可以先考虑三个点的情况写出来。\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\n    if (t1 == null || t2 == null) {\n        return (t1 == null) ? t2 : t1;\n    }\n    t1.val += t2.val;\n    t1.left = mergeTrees(t1.left, t2.left);\n    t1.right = mergeTrees(t1.right, t2.right);\n    return t1;\n}\n\n"},"alg/872_Leaf-Similar_Trees.html":{"url":"alg/872_Leaf-Similar_Trees.html","title":"872. Leaf-Similar Trees","keywords":"","body":"872. Leaf-Similar Trees\nnaive比较法，效率比较低，还有一种同时比较的方法，记得去看。\npublic boolean leafSimilar(TreeNode root1, TreeNode root2) {\n    List res1 = new ArrayList<>(),\n                    res2 = new ArrayList<>();\n    findLeaf(root1, res1);\n    findLeaf(root2, res2);\n    return res1.equals(res2);\n}\n\npublic void findLeaf(TreeNode root, List res) {\n    if (root == null) return;\n    if (root.left == null && root.right == null) res.add(root.val);\n    findLeaf(root.left, res);\n    findLeaf(root.right, res);\n}\n\n"},"alg/104_Maximum_Depth_of_Binary_Tree.html":{"url":"alg/104_Maximum_Depth_of_Binary_Tree.html","title":"104. Maximum Depth of Binary Tree","keywords":"","body":"104. Maximum Depth of Binary Tree\n递归时，每层路径加一\npublic int maxDepth(TreeNode root) {\n    if(root == null)  return 0;\n    return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));\n}\n\n    3\n   / \\ +1\n  9  20\n    /  \\ +1\n   15   7\n         \\ + 1\n         null\n\n求二叉树节点最远距离: 重点是这个公式max_dis = max(l_depth + r_depth, max(l_dis, r_dis))，是说最远距离=max(左边最大深度+右边最大深度,max(左边最大距离,右边最大距离))\ndef maxDis(self, root):\n    return self.dfs(root)\n\ndef dfs(self, root):\n    if not root: \n        return [0, -1]                                                             \n    l_depth, l_dis = self.dfs(root.left)\n    r_depth, r_dis = self.dfs(root.right)\n    max_depth = max(l_depth, r_depth) + 1\n    max_dis = max(l_depth + r_depth, max(l_dis, r_dis))\n    return [max_depth, max_dis]\n\n测试：\n[3,9,20,null,null,15,7]\n[1,2,3,4,5,6,7,8,null,null,null,null,9]\n[1,2,null,3,4,5,null,null,6]\n\nresult: \n[3,3]\n[4,6]\n[4,4]\n\n"},"alg/111_Minimum_Depth_of_Binary_Tree.html":{"url":"alg/111_Minimum_Depth_of_Binary_Tree.html","title":"111. Minimum Depth of Binary Tree","keywords":"","body":"111. Minimum Depth of Binary Tree\n和求maxDepth基本一样\npublic int minDepth(TreeNode root) {\n    if(root == null) return 0;\n    int left = minDepth(root.left);\n    int right = minDepth(root.right);\n    if (left == 0 || right == 0)  return left + right + 1; \n    return Math.min(left, right) + 1;\n}\n\n保证树左右子树任意一边为null的时候，返回有高度的一边\nif (left == 0 || right == 0)  return left + right + 1;\n\n相当于\nif (root.left == null || root.right  == null) {\n    return (root.right == null) ? 1 + left : 1 + right;\n}\n\n"},"alg/110_Balanced_Binary_Tree.html":{"url":"alg/110_Balanced_Binary_Tree.html","title":"110. Balanced Binary Tree","keywords":"","body":"110. Balanced Binary Tree\n第一种递归：在isBalanced中，对于一个root节点，用getDepth递归求出它左右两边的高度，再在isBalanced函数中进行递归。\npublic boolean isBalanced(TreeNode root) {\n    if (root == null) return true;\n    int ll = getDepth(root.left);\n    int lr = getDepth(root.right);\n    return Math.abs(ll - lr) \n第二种：把所有逻辑写在getDepth中，也就是在求高度的同时进行判断层数是否大于1，只需要对节点进行一次遍历。\npublic boolean isBalanced(TreeNode root) {\n    if (getDepth(root) == -1) {\n        return false;\n    }\n    return true;\n}\n\npublic int getDepth(TreeNode root) {\n    if (root == null) return 0;\n    int ll = getDepth(root.left);\n    int lr = getDepth(root.right);\n    if (Math.abs(ll - lr) > 1 || ll == -1 || lr == -1) return -1;\n    return Math.max(ll, lr) + 1;\n}\n\n这里这个条件是用来判断如果返回的root中左右两个节点的高度若有一个为-1，也就是它不是平衡二叉树，那么root也返回-1，整个树都不是平衡二叉树。\nif (Math.abs(ll - lr) > 1 || ll == -1 || lr == -1) return -1;\n\n\n"},"alg/222_Count_Complete_Tree_Nodes.html":{"url":"alg/222_Count_Complete_Tree_Nodes.html","title":"222. Count Complete Tree Nodes","keywords":"","body":"222. Count Complete Tree Nodes\n可以用遍历法求，但是不能判断是不是complete，且为O(n)的时间复杂度\npublic int countNodes(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + countNodes(root.left) + countNodes(root.right);\n}\n\n\n是一个很迷的递归，\npublic int countNodes(TreeNode root) {\n    if (root == null) return 0;\n    int leftDepth = getDepth(root.left);\n    int rightDepth = getDepth(root.right);\n    if (leftDepth == rightDepth) {\n        return (int) (countNodes(root.right) + Math.pow(2, leftDepth));\n    }\n    else {\n        return (int) (countNodes(root.left) + Math.pow(2, rightDepth));\n    }\n}\n\npublic int getDepth(TreeNode root) {\n    if (root == null) return 0;\n    return 1 + getDepth(root.left);\n}\n\n\n补一下二叉树的性质：\n1.第i层有2^(i-1)个节点。如第二层有2^(2-1)=2个节点\n2.深度为k的二叉树最多有2^k-1个节点。如三层的树最多有2^3-1=7个节点\n3.对任何一棵二叉树T, 如果其叶结点数为n0, 度为2的结点数为n2, 则n0＝n2＋1。\n4.具有 n (n>=0) 个结点的完全二叉树的深度为⌊log(n)⌋+1。如4个节点的树有⌊log(4)⌋+1=3层。\n"},"alg/257_Binary_Tree_Paths.html":{"url":"alg/257_Binary_Tree_Paths.html","title":"257. Binary Tree Paths","keywords":"","body":"257. Binary Tree Paths\n求二叉树的所有路径，dfs返回值为空。dfs返回值为空的情况基本都是修改引用（比如说结果数组），因此需要声明一个结果数组之后另外写一个dfs。然后分情况讨论，对于中间节点path = path + root.val + \"->\"，对于最后一个节点，不需要加箭头，并且将每条路径的字符串加入结果。对于空节点，直接返回（不执行)。\npublic List binaryTreePaths(TreeNode root) {\n    List res = new ArrayList<>();\n    dfs(root, \"\", res);\n    return res;\n}\n\npublic void dfs(TreeNode root, String path, Listres) {\n    if (root == null) return;\n    if (root.left == null && root.right == null) {\n        res.add(path + root.val);\n        return;\n    }\n    path += root.val + \"->\";\n    dfs(root.left, path, res);\n    dfs(root.right, path, res);\n}\n\n"},"alg/129_Sum_Root_to_Leaf_Numbers.html":{"url":"alg/129_Sum_Root_to_Leaf_Numbers.html","title":"129. Sum Root to Leaf Numbers","keywords":"","body":"129. Sum Root to Leaf Numbers\n其实就是求路径的变形。首先确定递归的函数dfs，返回值为int。然后分情况讨论，节点为空返回0，最后一个节点返回res * 10 + root.val，中间节点计算res * 10 + root.val且继续调用dfs函数\npublic int sumNumbers(TreeNode root) {\n    return dfs(root, 0);\n}\n\npublic int dfs(TreeNode root, int res) {\n    if (root == null) return 0;\n    if (root.left == null && root.right == null) return 10 * res + root.val;\n    res = 10 * res + root.val;\n    return dfs(root.left, res) + dfs(root.right, res);\n}\n\n"},"alg/112_Path_Sum.html":{"url":"alg/112_Path_Sum.html","title":"112. Path Sum","keywords":"","body":"112. Path Sum\n路径问题，dfs返回值为boolean。分情况讨论，空节点时说明左右子树有一个为空。比如[1,2,null]这种情况，右边返回false，因为算的是到叶子节点的和。最后一个节点判断sum == root.val中间节点减去sum后调用dfs。\npublic boolean hasPathSum(TreeNode root, int sum) {\n    if (root == null) return false;\n    if (root.left == null && root.right == null) return sum == root.val;\n    return hasPathSum(root.left, sum - root.val) || \n           hasPathSum(root.right, sum - root.val);\n}\n\n"},"alg/113_Path_Sum_II.html":{"url":"alg/113_Path_Sum_II.html","title":"113. Path Sum II","keywords":"","body":"113. Path Sum II\n和binary tree paths那道题差不多，第一步可以先写出一个返回所有路径的列表的递归函数，返回值为空。也是分三种情况讨论，空节点，最后一个节点和中间节点。注意python求中间结果的时候的不要指向同一个list。在空节点的情况中其实if not root: return可以等价为\nif root.left: do sth..\nif root.right: do sth..\n\ndef dfs(self, root, path, res):\n    if not root: return\n    if not root.left and not root.right:\n        path.append(root.val)\n        res.append(path)\n    self.dfs(root.left, path + [root.val], res)\n    self.dfs(root.right, path + [root.val], res)\n\n然后根据题意在递归的时候加入sum条件判断，以及if root.val != sum: return这个条件。\ndef pathSum(self, root, sum):\n    \"\"\"\n    :type root: TreeNode\n    :type sum: int\n    :rtype: List[List[int]]\n    \"\"\"\n    res = []\n    self.dfs(root, [], res, sum)\n    return res\n\ndef dfs(self, root, path, res, sum):\n    if not root: return\n    if not root.left and not root.right:\n        if root.val != sum: return\n        path.append(root.val)\n        res.append(path)\n    self.dfs(root.left, path + [root.val], res, sum - root.val)\n    self.dfs(root.right, path + [root.val], res, sum - root.val)\n\n不过照这么写真的很慢。因为每次递归都会生成两个新的list。\npublic void dfs(TreeNode root, Listpath, List> res, int sum) {\n    if (root == null) return;\n    if (root.left == null && root.right == null) {\n        if (root.val != sum) return;\n        path.add(root.val);\n        res.add(path);\n        return;\n    }\n    path.add(root.val);\n    dfs(root.left, new ArrayList<>(path), res, sum - root.val);\n    dfs(root.right, new ArrayList<>(path), res, sum - root.val);\n}\n\n 然后就有了这种操作。path相当于一个栈，酱紫就减少了创建list的次数。\npublic List> pathSum(TreeNode root, int sum) {\n    List> res = new ArrayList<>();\n    List path = new ArrayList<>();\n    dfs(root, path, res, sum);\n    return res;\n}\npublic void dfs(TreeNode root, Listpath, List> res, int sum) {\n    if (root == null) return;\n    path.add(root.val);\n    sum -= root.val\n    if (root.left == null && root.right == null && sum == 0) {\n        res.add(new ArrayList<>(path));\n    }\n    dfs(root.left, path, res, sum);\n    dfs(root.right, path, res, sum);\n    path.remove(path.size() - 1);\n}\n\n\n"},"alg/700_Search_in_a_Binary_Search_Tree.html":{"url":"alg/700_Search_in_a_Binary_Search_Tree.html","title":"700. Search in a Binary Search Tree","keywords":"","body":"700. Search in a Binary Search Tree\n二叉搜索树。基础递归，有点像简单版的递归二分法。分成两种情况，node为空，或不为空。\npublic TreeNode searchBST(TreeNode root, int val) {\n    if (root == null) return null;\n    if (root.val == val) {\n        return root;\n    } else if (root.val > val) {\n        return searchBST(root.left, val);\n    } else {\n        return searchBST(root.right, val);\n    }\n}\n\n循环写法会比较快。\npublic TreeNode searchBST(TreeNode root, int val) {\n    TreeNode cur = root;\n    while (cur != null) {\n        if (cur.val == val) { return cur;}\n        else if (cur.val \n注意不要这么写，因为计算if的时候会抛NullPointerException\nif (cur.val == val) { return cur;}\nif (cur.val  val) { cur = cur.left;}\n\n"},"alg/701_Insert_into_a_Binary_Search_Tree.html":{"url":"alg/701_Insert_into_a_Binary_Search_Tree.html","title":"701. Insert into a Binary Search Tree","keywords":"","body":"701. Insert into a Binary Search Tree\n基础递归，root左边右边要接住递归的返回值。\npublic TreeNode insertIntoBST(TreeNode root, int val) {\n    if (root == null) return new TreeNode(val);\n\n    if (root.val > val) {\n        root.left = insertIntoBST(root.left, val);\n    }\n    else {\n        root.right = insertIntoBST(root.right, val);\n    }\n    return root;\n}\n\n等价的写法：把if (root == null) return new TreeNode(val);替换成两句判断。\npublic TreeNode insertIntoBST(TreeNode root, int val) {\n    if (root.val > val) {\n        if (root.left == null) {\n            root.left = new TreeNode(val);\n        } else {\n            root.left = insertIntoBST(root.left, val);\n        }\n    } else {\n        if (root.right == null) {\n            root.right = new TreeNode(val);\n        } else {\n            root.right = insertIntoBST(root.right, val);\n        }\n    }\n    return root;\n}\n\niteration，相当于插入链表，快但代码多且乱。\npublic TreeNode insertIntoBST(TreeNode root, int val) {\n    TreeNode node = new TreeNode(val),\n                cur = root;\n    while (cur != null) {\n        if (cur.val > val) {\n            if (cur.left != null) {\n                cur = cur.left;\n            } else {\n                cur.left = node;\n                break;\n            }\n        } else {\n            if (cur.right != null) {\n                cur = cur.right;\n            } else {\n                cur.right = node;\n                break;\n            }\n        }\n    }\n    return root;\n}\n\n"},"alg/450_Delete_Node_in_a_BST.html":{"url":"alg/450_Delete_Node_in_a_BST.html","title":"450. Delete Node in a BST","keywords":"","body":"450. Delete Node in a BST\n删除二叉树节点，注意相等的时候删除中间节点的三步操作：找到最小值node，和root交换，删除那个node。\npublic TreeNode deleteNode(TreeNode root, int key) {\n    if (root == null) return null;\n    if (root.val > key) {\n        root.left = deleteNode(root.left, key);\n    } else if (root.val \n"},"alg/98_Validate_Binary_Search_Tree.html":{"url":"alg/98_Validate_Binary_Search_Tree.html","title":"98. Validate Binary Search Tree","keywords":"","body":"98. Validate Binary Search Tree\n验证是否为bst\npublic boolean isValidBST(TreeNode root) {\n    return dfs(root, null, null);\n}\n\npublic boolean dfs(TreeNode root, TreeNode left, TreeNode right) {\n    if (root == null) return true;\n    if ((left != null && root.val = right.val)) return false;\n    return dfs(root.left, left, root) && dfs(root.right, root, right);\n}\n\n每段都需要满足区间条件，否则return false\n\n还有一种可以输入最大(最小)整数，但是这样可能会溢出，不如直接判断中间值是否为null\ndef isValidBST(self, root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: bool\n    \"\"\"\n    return self.dfs(root, -sys.maxsize, sys.maxsize)\n\n\ndef dfs(self, root, left, right):\n    if not root:\n        return True\n    if root.val = right:\n        return False\n    return self.dfs(root.left, left, root.val) and self.dfs(root.right, root.val, right)\n\n"},"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html":{"url":"alg/235_Lowest_Common_Ancestor_of_a_Binary_Search_Tree.html","title":"235. Lowest Common Ancestor of a Binary Search Tree","keywords":"","body":"235. Lowest Common Ancestor of a Binary Search Tree\n如果p, q的值比root都小就去左边找，反之。如果pq有一方的值等于root，或者pq分散在root的两边，直接一路返回root的值。\nrecursion:\npublic TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    if (p.val  root.val && q.val > root.val) {\n        return lowestCommonAncestor(root.right, p, q);\n    } \n    return root; \n}\n\n\niteration:\npublic TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    while (root != null) {\n        if (p.val  root.val && q.val > root.val) {\n            root = root.right;\n        }\n        return root;\n    }\n    return null;\n}\n\n"},"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html":{"url":"alg/236_Lowest_Common_Ancestor_of_a_Binary_Tree.html","title":"236. Lowest Common Ancestor of a Binary Tree","keywords":"","body":"236. Lowest Common Ancestor of a Binary Tree\n分情况讨论，第一句是对于空节点的条件（递归出口条件）。后面是中间节点的情况，root的左边和右边接住返回值之后，判断是否为空，若两边都不为空，那么返回root。如果任意一边有值，就返回有值的一边。\npublic TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n    if (root == null || root == p || root == q) return root;\n    root.left = lowestCommonAncestor(root.left, p, q);\n    root.right = lowestCommonAncestor(root.right, p, q);\n    if (root.left != null && root.right != null) {\n        return root;\n    }\n    return (root.left == null) ? root.right : root.left;\n}\n\n\n"},"alg/230_Kth_Smallest_Element_in_a_BST.html":{"url":"alg/230_Kth_Smallest_Element_in_a_BST.html","title":"230. Kth Smallest Element in a BST","keywords":"","body":"230. Kth Smallest Element in a BST\n中序遍历设置计数器\nint count = 0;\nint result = 0;\n\npublic int kthSmallest(TreeNode root, int k) {\n    dfs(root, k);\n    return result;\n}\n\npublic void dfs(TreeNode root, int k) {\n    if (root == null) return;\n    dfs(root.left, k);\n    count++;\n    if (count == k) result = root.val;\n    if (count \n"},"alg/199_Binary_Tree_Right_Side_View.html":{"url":"alg/199_Binary_Tree_Right_Side_View.html","title":"199. Binary Tree Right Side View","keywords":"","body":"199. Binary Tree Right Side View\n以这个数举例，当层数等于result个数的时候，当前的值会被加入结果数组。递归时会先加入[1,3,4]，然后递归到5的时候，发现当前的depth和result的大小不相等，所以不加入。\n   1            \npublic List rightSideView(TreeNode root) {\n    List res = new ArrayList<>();\n    dfs(root, res, 0);\n    return res;\n}\n\npublic void dfs(TreeNode root, List res, int depth) {\n    if (root == null) return;\n\n    if (res.size() == depth) \n        res.add(root.val);\n\n    dfs(root.right, res, depth + 1);\n    dfs(root.left, res, depth + 1);\n}\n\n"},"3_partition.html":{"url":"3_partition.html","title":"Partition","keywords":"","body":"Partition\n多个指针操作数组或字符串，使得某些操作达到线性的时间复杂度。\n难点: 找到指针移动的条件，贪心比什么，边界问题。\n操作: 通常时左右指针从两边走(或单边)，有时候会有第三个指针。\n\n基础快排: 75(荷兰国旗), 215(k大)\n\n移除数组中的元素: 26,27,80\n\n字符串/数组交换: 344(reverse), 905(奇偶交换), 15(3sum), 18(4sum)\n\n字符串比较: 28\n\n贪心: 11, 42\n\n数字相加：2, 415\n\n\n"},"alg/Quick_Sort.html":{"url":"alg/Quick_Sort.html","title":"🌝Quick Sort","keywords":"","body":"Quick Sort\n快排主要逻辑：将数组用partition函数分为左右两部分，分别进行排序。\npublic void quickSort(int[] nums, int l, int r) {\n    if (l >= r) return; // 记得加上=，否则每次相等的时候都要再进行一次没必要的递归。\n    int mid = partition(nums, l, r);\n    quickSort(nums, l, mid - 1);\n    quickSort(nums, mid + 1, r);\n}\n\npartition函数的逻辑是选定一个pivot作为基准，比它小的元素放在左边，大的放在右边。partition可以有多种方法\n1.填坑法\npublic int partition1(int[] nums, int l, int r) {\n    int pivot = nums[l];\n    while (l = pivot) r--; // 从末尾开始寻找一个小于pivot的元素赋值到l指针\n        nums[l] = nums[r];\n        while (l \npublic void sort(int[] nums, int l, int r) {\n    if (l >= r) return;\n    int pivot = nums[l];\n    int start = l, end = r;\n    while (l = pivot) r--;\n        nums[l] = nums[r];\n        while (l \n由于上面那段代码在元素相等时会有不必要的交换，所以while循环中也可以加上相等就不交换的条件。\nwhile (l = pivot) r--;\n    if (l \n2.交换法\npublic int partition2(int[] nums, int l, int r) {\n    int pivot = nums[l];\n    while (l = pivot) r--;\n        swap(nums, l, r);\n        while (l \n另一种交换法\n// swap 2\npublic int partition2_1(int[] nums, int l, int r) {\n    int pivot = nums[l];\n    int lt = l + 1, gt = r;\n    while (lt = pivot && lt \n下面这个代码某些地方也叫双路快排..\npublic void sort2(int[] nums, int l, int r) {\n    if (l >= r) return;\n    int pivot = nums[l];\n    int lt = l + 1, gt = r;\n    while (true) {\n        while (lt  l + 1 && nums[gt] > pivot) gt--;\n        if (lt >= gt) break;\n        swap(nums, lt, gt);\n        lt++;\n        gt--;\n    }\n    swap(nums, l, gt);\n    sort2(nums, l, gt - 1);\n    sort2(nums, gt + 1, r);\n}\n\n3.pindex法(在某些地方也叫普通快排): 循环中的数字依次和pivot比较，如果小于pivot，就和pIndex中的数字进行交换，保证pIndex前面的数字都是小于等于pivot的。最后将pindex中的数字和pivot交换。\npublic int partition3(int[] nums, int l, int r) {\n    int pivot = nums[r];\n    int pIndex = l;\n    for (int i = l; i \nswap函数：\nprivate void swap(int[] nums, int l, int r) {\n    int tmp = nums[l];\n    nums[l] = nums[r];\n    nums[r] = tmp;\n}\n\n填坑法过程如下：\n\npIndex法:\n\n优化\n快排复杂度O(nlogn)，最坏复杂度O(n^2)出现在递归次数接近数组长度/partition极度不均匀的时候（本来的O(logn)变成了O(n)），如数组有序的情况下。\n1.选择合适的pivot\n随机化: 随机化选择一个index和最左边数字交换\npublic int rand(int[] nums, int l, int r) {\n    Random random = new Random();\n    int randomIndex = random.nextInt(r - l + 1) + l;\n    swap(nums, l, randomIndex);\n    return nums[l];\n}\n// int pivot = rand(nums, l, r);\n\n三数取中: 使用数组中左边，中间，右边的三个数字进行排序，选择其中的中位数（将中位数放在数组的最开始）\npublic int middleOfThree(int[] nums, int l, int r) {\n    int mid = l + (r - l) / 2;\n\n    if (nums[l] > nums[r]) swap(nums, l, r);     // l  nums[r]) swap(nums, mid, r); // mid  nums[l]) swap(nums, mid, l); // mid \n这两种方法对数组重复，如{10, 10, 10, 10, 10, 10, 10, 10, 10, 10}没什么改进。\n2.考虑数组大小\n小数组选用插入排序\npublic void quickSort(int[] nums, int l, int r) {\n    if (l - r = r) return;\n    int mid = partition(nums, l, r);\n    quickSort(nums, l, mid - 1);\n    quickSort(nums, mid + 1, r);\n}\n\n3.处理重复元素\n三路快排: 将所有元素分为3个区域，将重复元素聚集到中间部分(lt, gt)，不再对这些元素进行递归操作。\npublic void sort3(int[] nums, int l, int r) {\n    if (l >= r) return;\n    int lt = l, i = l + 1, gt = r;\n    int pivot = nums[l];\n    while (i  pivot) {\n            swap(nums, i, gt--); // 后面的数字交换过来之后还要再比一次\n        } else {\n            i++;\n        }\n    }\n    // 只需要再次递归lt左边和gt右边的部分\n    sort3(nums, l, lt - 1);  \n    sort3(nums, gt + 1, r);\n}\n\n\n"},"alg/75_Sort_Colors.html":{"url":"alg/75_Sort_Colors.html","title":"75. Sort Colors","keywords":"","body":"75. Sort Colors\n荷兰国旗问题，同快排三路解法，不过lt是从0开始，因为pivot不是第一个元素。时间复杂度O(n)\npublic void sortColors(int[] nums) {\n    int lt = 0, gt = nums.length - 1;\n    int i = lt;\n    while (i \n不交换，但是会赋值很多次的解法，[0,i)区间为0，[i,j)区间为1，[j,n)区间为2。\npublic void sortColors(int[] nums) {\n    int i = 0, j = 0;\n    for (int n = 0; n \n"},"alg/28_Implement_strStr.html":{"url":"alg/28_Implement_strStr.html","title":"28. Implement strStr","keywords":"","body":"28. Implement strStr\n有两个条件需要注意，一个是h - n + 1，也就是两个字串需要比较的长度，如果该值小于0，直接返回-1。另一个是while (k 条件不能颠倒。k指针指向的位置必须小于needle字符串的长度，才能和haystack中的j指针比较，防止循环内部的指针改变使得while条件语句溢出，如[\"a\", \"\"]这个例子。\n时间复杂度O(n^2)\npublic int strStr(String haystack, String needle) {\n    int h = haystack.length(), n = needle.length();\n    for (int i = 0; i \nkmp\n# https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/\ndef strStr(self, haystack, needle):\n    \"\"\"\n    :type haystack: str\n    :type needle: str\n    :rtype: int\n    \"\"\"\n    A, B= len(haystack), len(needle)\n    if not B: return 0\n    lps = self.create_lps(needle)\n    i, j = 0, 0\n    while i \n"},"alg/11_Container_With_Most_Water.html":{"url":"alg/11_Container_With_Most_Water.html","title":"11. Container With Most Water","keywords":"","body":"11. Container With Most Water\n需要变量：i,j指针代表宽度，局部变量area = (j - i) * min(height[i], height[j])当前计算的面积，全局变量result存放最大面积。i前进的条件是height[i] ，因为要向右边试探有没有更大的高度，然后消除当前的高度最小值，保留高度最大值。\n时间复杂度O(n)\npublic int maxArea(int[] height) {\n    int result = 0;\n    int i = 0, j = height.length - 1;\n    while (i \n"},"alg/42_Trapping_Rain_Water.html":{"url":"alg/42_Trapping_Rain_Water.html","title":"42. Trapping Rain Water","keywords":"","body":"42. Trapping Rain Water\n比11题更加复杂，多了两个变量lm, rm分别用来指代左边的最大高度和右边的最大高度，相当于11题的height[i], height[j]。在大循环i 中，当lm 时，i向左边移动去试探有没有更大的高度，同时水以左边墙壁的最大值为基准增加lm - height[i]，右边相反。\npublic int trap(int[] height) {\n    int result = 0;\n    int lm = 0, rm = 0;\n    int i = 0, j = height.length - 1;\n    while (i \n\n"},"alg/15_3Sum.html":{"url":"alg/15_3Sum.html","title":"15. 3Sum","keywords":"","body":"15. 3Sum\n使用Two Pointers，注意排序，处理重复，数组越界问题。\n注意要对数组进行排序，因为要比较大小决定指针移动方向，没有排序会跳过某些数字。\npublic List> threeSum(int[] nums) {\n    List> res = new ArrayList<>();\n    // sort the list !!!\n    Arrays.sort(nums); \n    for (int i = 0; i  0 && nums[i] == nums[i - 1]) continue;\n        // start binary search\n        int target = -nums[i];\n        int l = i + 1,\n            r = nums.length - 1;\n        while (l \n紫色是i经过的区域，绿色是l, r移动的区域。\n\n这三句是防止i, j, k重复的判断，i, l不能和它前面的数字相等，l不和它后面的数字相等。题目要求不能有重复的结果。\nif (i > 0 && nums[i] == nums[i - 1]) continue;\nwhile (l \n时间复杂度O(n^2)(for里面套while)，空间复杂度O(1)\n\n3Sum Closest，改改条件\n\npublic int threeSumClosest(int[] nums, int target) {\n    Arrays.sort(nums);\n    int cloest = nums[0] + nums[1] + nums[2];\n    for (int i = 0; i  0 && nums[i] == nums[i - 1]) {\n            continue;\n        }\n        int l = i + 1,\n            r = nums.length - 1;\n        while (l \n"},"alg/18_4Sum.html":{"url":"alg/18_4Sum.html","title":"18. 4Sum","keywords":"","body":"18. 4Sum\n3Sum偷懒法.. 外部增加循环，判断重复，内部修改起始值。\npublic List> FourSum(int[] nums, int target) {\n        List> res = new ArrayList<>();\n        // sort the list\n        Arrays.sort(nums);\n        // line 11, 12, 13, 15, 17 are different with 3sum.\n        for (int j = 0; j  0 && nums[j] == nums[j - 1]) continue;\n            for (int i = j + 1; i  j + 1 && nums[i] == nums[i - 1]) continue;\n                // start binary search\n                int tar = target - nums[i] - nums[j];\n                int l = i + 1,\n                        r = nums.length - 1;\n                while (l \n时间复杂度O(n^3)(for里面套for再while)，空间复杂度O(1)\n"},"alg/344_Reverse_String.html":{"url":"alg/344_Reverse_String.html","title":"344. Reverse String","keywords":"","body":"344. Reverse String\n左右交换\npublic void reverseString(char[] s) {\n    int l = 0, r = s.length - 1;\n    while (l \nrecursion:\npublic void reverseString(char[] s) {\n    dfs(s, 0, s.length - 1);\n}\n\npublic void dfs(char[] s, int l, int r) {\n    if (l >= r) return;\n    char tmp = s[l];\n    s[l] = s[r];\n    s[r] = tmp;\n    dfs(s, l + 1, r - 1);\n}\n\n"},"alg/27_Remove_Element.html":{"url":"alg/27_Remove_Element.html","title":"27. Remove Element","keywords":"","body":"27. Remove Element\nk停在坑里，i向前试探不等于val的值。\npublic int removeElement(int[] nums, int val) {\n    int k = 0;\n    for (int i = 0; i \n"},"alg/26_Remove_Duplicates_from_Sorted_Array.html":{"url":"alg/26_Remove_Duplicates_from_Sorted_Array.html","title":"26. Remove Duplicates from Sorted Array","keywords":"","body":"26. Remove Duplicates from Sorted Array\n前提是一个sorted array，指针k指向当前位置的唯一值，遍历数组，指针i一旦发现有和nums[k]不相等的数字，k指向下一个位置，将nums[i]赋值给位置k，最后返回元素个数index + 1\npublic int removeDuplicates(int[] nums) {\n    int k = 0;\n    for (int i = 0; i \n"},"alg/80_Remove_Duplicates_from_Sorted_Array_II.html":{"url":"alg/80_Remove_Duplicates_from_Sorted_Array_II.html","title":"80. Remove Duplicates from Sorted Array II","keywords":"","body":"80. Remove Duplicates from Sorted Array II\n数组最多允许重复两个数字，如果数组长度小于等于2，直接返回数组长度。\n然后依然是指针法，从2开始遍历。i作为一个试探指针，如果i和k-2中的数字不相等，那么ik会同时前进，一旦i和k-2中的数字相等，说明i前面已经有两个相等的数字，k就停在第三个数字上等待i找到新的不同的数字。\npublic int removeDuplicates(int[] nums) {\n    if (nums.length \n"},"alg/905_Sort_Array_By_Parity.html":{"url":"alg/905_Sort_Array_By_Parity.html","title":"905. Sort Array By Parity","keywords":"","body":"905. Sort Array By Parity\n使一个数组偶数在前，奇数在后。 首先使用while找到第一个奇数和第一个偶数出现的位置，然后进行交换。\npublic int[] sortArrayByParity(int[] A) {\n    int l = 0, r = A.length - 1;\n    while (l \n写成单独的函数：\npublic int[] sortArrayByParity(int[] A) {\n    int l = 0, r = A.length - 1;\n    while (l \n保持奇偶的顺序，用插入排序\nfor (int i = 1; i  0 && isEven(array[j - 1])) { // 没有越界且它的前面是偶数\n            array[j] = array[j - 1];\n            j--;\n        }\n        array[j] = key;\n    }\n}\n\npublic boolean isEven(int n) {\n    return (n & 1) == 0;\n}\n\n"},"alg/7_Reverse_Integer.html":{"url":"alg/7_Reverse_Integer.html","title":"7. Reverse Integer","keywords":"","body":"7. Reverse Integer\n难点在溢出，如果是python的话还要考虑符号，因为python中-123 % 10 = 7\n预先计算\npublic int reverse(int x) {\n    int res = 0;\n    while (x != 0) {\n        if (Integer.MAX_VALUE / 10 == res && Integer.MAX_VALUE % 10  (x % 10) || Integer.MIN_VALUE / 10 > res) return 0;\n        res = res * 10 + x % 10;\n        x = x / 10;\n    }\n    return res;\n}\n\n中间和旧值进行比较\npublic int reverse(int x) {\n    int res = 0, cmp = 0;\n    while (x != 0) {\n        cmp = cmp * 10 + x % 10;\n        if ((cmp -(x % 10)) / 10 != res) return 0;\n        x = x / 10;\n        res = cmp;\n    }\n    return res;\n}\n\n以-2147483648为例子，输出结果为\n0\n-8\n-84\n-846\n-8463\n-84638\n-846384\n-8463847\n-84638474\n12608718\n\n然后有些答案里是res为long直接判断。\n"},"alg/2_Add_Two_Numbers.html":{"url":"alg/2_Add_Two_Numbers.html","title":"2. Add Two Numbers","keywords":"","body":"2. Add Two Numbers\nInput: (2 -> 4 -> 3) + (5 -> 6 -> 4)\nOutput: 7 -> 0 -> 8\nExplanation: 342 + 465 = 807.\n\n两个链表相加：可以分为指针操作和值操作，指针有dummy, head, l1, l2，分别代表结果，l1，l2链表，值操作包括余数和进位问题，一个是%10，一个是/10，边界条件包括三个，进位为1的时候还要加一次carry。\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode dummy = new ListNode(0);\n    ListNode head = dummy;\n    int carry = 0;\n    while (l1 != null || l2 != null || carry == 1) {\n        int v1 = (l1 != null) ? l1.val : 0;\n        int v2 = (l2 != null) ? l2.val : 0;\n        int value = v1 + v2 + carry;\n        head.next = new ListNode(value % 10);\n        carry = value / 10;\n\n        if (l1 != null) l1 = l1.next;\n        if (l2 != null) l2 = l2.next;\n        head = head.next;\n    }\n    return dummy.next;\n}\n\n"},"alg/415_Add_Strings.html":{"url":"alg/415_Add_Strings.html","title":"415. Add Strings","keywords":"","body":"415. Add Strings\nAdd two numbers的字符串操作，不一样的地方在于循环。\npublic String addStrings(String num1, String num2) {\n    StringBuilder sb = new StringBuilder();\n    int carry = 0;\n    int i = num1.length() - 1, j = num2.length() - 1;\n    while (i >= 0 || j >= 0 || carry == 1) {\n        int n1 = (i \n"},"alg/189_Rotate_Array.html":{"url":"alg/189_Rotate_Array.html","title":"189. Rotate Array","keywords":"","body":"189. Rotate Array\n向右旋转：\nInput: [1,2,3,4,5,6,7] and k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n\n注意求模\npublic void rotate(int[] nums, int k) {\n    if (nums == null || nums.length == 0) return;\n    int length = nums.length;\n    k = k % nums.length;  // 3 [1,2]\n    reverse(nums, 0, length - 1);\n    reverse(nums, k, length - 1);\n    reverse(nums, 0, k - 1);\n}\n\npublic void reverse(int[] nums, int l, int r) {\n    while (l \n向左旋转\nabcXYZdef --- left 3 ------> XYZdefabc\npublic String LeftRotateString(String str,int n) {\n    if (str == null || str.length() == 0) return \"\";\n    char[] arr = str.toCharArray();\n    int length = str.length();\n    n = n % length;\n    reverse(arr, 0, n - 1);\n    reverse(arr, n, length - 1);\n    reverse(arr, 0, length - 1);\n    return new String(arr);\n}\n\npublic void reverse(char[] arr, int l, int r) {\n    while (l \npublic String LeftRotateString(String str,int n) {\n    if (str == null || str.length() == 0) return \"\";\n    int length = str.length();\n    int s = n % length;\n    str += str;\n    return str.substring(s, length + s);\n}\n\n"},"4_stack.html":{"url":"4_stack.html","title":"Stack","keywords":"","body":"Stack\n难点：入栈出栈条件的判断。\n给出栈的压入序列12345，判断弹出序列45231是否正确: 使用辅助栈stack压入pushA序列，stack栈顶元素和popA[popIndex]进行比较。最后检查stack是否为空。\npublic class Solution {\n    public boolean IsPopOrder(int [] pushA,int [] popA) {\n        if (pushA.length == 0 || popA.length == 0) return false;\n        LinkedList stack = new LinkedList<>();\n        int popIndex = 0;\n        for (int i = 0; i \n"},"alg/155_Min_Stack.html":{"url":"alg/155_Min_Stack.html","title":"155. Min Stack","keywords":"","body":"155. Min Stack\n这个题一开始还是有点迷的，后来想清楚了，因为它是一个栈，所以pop的时候会把栈顶的元素不管大小都pop出去。比如[-3,0,-2],[getMin(),pop(),getMin()]的答案是[-3, -3]，第二次的结果是-3是因为pop出了栈顶元素-2，所以栈中只有0,-3比较大小。\n所以这个思路是s1正常的push和pop，s2记录最小值序列，另外设定push和pop条件，小于等于peek最小值push，和s1栈顶元素一样pop。\npublic LinkedList s1 = new LinkedList<>();\npublic LinkedList s2 = new LinkedList<>();\n\npublic void push(int x) {\n    s1.push(x);\n    if(s2.isEmpty() || x \n"},"alg/232_Implement_Queue_using_Stacks.html":{"url":"alg/232_Implement_Queue_using_Stacks.html","title":"232. Implement Queue using Stacks","keywords":"","body":"232. Implement Queue using Stacks\n两个栈做法，注意peek和pop方法。考虑两种情况，\n\npush(1), push(2), push(3), peek() ：一次性在s1中push1,2,3，再pop(), 要把s1中的元素转移到s2中去。\n\npush(1), push(2) ,peek(), push(3), peek()：如果peek转移了，那么s2中情况为3,1,2，第二次调用peek就会得到3，所以调用peek时必须满足s2为空的条件。\n\n\n根据情况一可以写出while循环，s1->s2转移元素。\nwhile (!s1.isEmpty()) {\n    s2.push(elemnts from s1);\n}\n\n根据情况二给while循环加上限制条件, s1->s2时，s2必须为空。\nif (s2.isEmpty()) {\n    while () {...}\n}\n\nclass MyQueue {\n    LinkedList s1;\n    LinkedList s2;\n\n    /** Initialize your data structure here. */\n    public MyQueue() {\n        this.s1 = new LinkedList<>();\n        this.s2 = new LinkedList<>();\n    }\n\n    /** Push element x to the back of queue. */\n    public void push(int x) {\n        this.s1.push(x);\n    }\n\n    /** Removes the element from in front of queue and returns that element. */\n    public int pop() {\n        peek();\n        return this.s2.pop();\n    }\n\n    /** Get the front element. */\n    public int peek() {\n        if (this.s2.isEmpty()) {\n            while (!this.s1.isEmpty()) {\n                this.s2.push(this.s1.pop()); // transfer elements to l2\n            }\n        }\n        return this.s2.peek();\n    }\n\n    /** Returns whether the queue is empty. */\n    public boolean empty() {\n        return s1.isEmpty() && s2.isEmpty();\n    }\n}\n\n"},"alg/225_Implement_Stack_using_Queues.html":{"url":"alg/225_Implement_Stack_using_Queues.html","title":"225. Implement Stack using Queues","keywords":"","body":"225. Implement Stack using Queues\n单个队列可以完成，重点在push函数，每次push后计算queue中的长度，循环n-1次把当前头部的元素转移至尾部。两头操作用ArrayDeque\nclass MyStack {\n    Queue q;\n\n    /** Initialize your data structure here. */\n    public MyStack() {\n        this.q = new ArrayDeque<>();\n    }\n\n    /** Push element x onto stack. */\n    public void push(int x) {\n        this.q.add(x);\n        int size = this.q.size();\n        for (int i = 0; i \n"},"alg/150_Evaluate_Reverse_Polish_Notation.html":{"url":"alg/150_Evaluate_Reverse_Polish_Notation.html","title":"150. Evaluate Reverse Polish Notation","keywords":"","body":"150. Evaluate Reverse Polish Notation\n注意包装类的转换。\npublic int evalRPN(String[] tokens) {\n    LinkedList stack = new LinkedList<>();\n    for (String token : tokens) {\n        if (token.equals(\"+\") || token.equals(\"-\") || token.equals(\"*\") || token.equals(\"/\")) {\n            int a = stack.pop();\n            int b = stack.pop();\n            if (token.equals(\"+\")) {\n                stack.push(b + a);\n            } else if (token.equals(\"-\")) {\n                stack.push(b - a);\n            } else if(token.equals(\"*\")) {\n                stack.push(b * a);\n            } else {\n                stack.push(b / a);\n            }\n        } else {\n                stack.push(Integer.valueOf(token));\n        }\n    }\n    return stack.pop();\n}\n\n强行换成switch case\npublic int evalRPN(String[] tokens) {\n    LinkedList stack = new LinkedList<>();\n    for (String token : tokens) {\n        if (token.equals(\"+\") || token.equals(\"-\") || token.equals(\"*\") || token.equals(\"/\")) {\n            int a = stack.pop();\n            int b = stack.pop();\n            switch (token) {\n                case \"+\": stack.push(b + a); break;\n                case \"-\": stack.push (b - a); break;\n                case \"*\": stack.push(b * a); break;\n                case \"/\": stack.push(b / a); break;\n            }\n        } else {\n                stack.push(Integer.valueOf(token));\n        }\n    }\n    return stack.pop();\n}\n\n"},"alg/239_Sliding_Window_Maximum.html":{"url":"alg/239_Sliding_Window_Maximum.html","title":"239. Sliding Window Maximum","keywords":"","body":"239. Sliding Window Maximum\nnaive比较方法，O(kn)\npublic ArrayList maxInWindows(int [] num, int size)\n{\n    if (size == 0) return new ArrayList<>();\n    ArrayList res = new ArrayList<>();\n    int length = size - 1;\n    for (int i = 0; i  max) max = num[k];\n    }\n    return max;\n}\n\n双向队列\npublic int[] maxSlidingWindow(int[] nums, int k) {\n    if (nums == null || nums.length== 0 || k  q = new ArrayDeque<>();\n    for (int i = 0; i = k - 1) res[resIndex++] = nums[q.peek()]; // start filling result after k - 1\n    }\n    return res;\n}\n\n"},"alg/32_Longest_Valid_Parentheses.html":{"url":"alg/32_Longest_Valid_Parentheses.html","title":"32. Longest Valid Parentheses","keywords":"","body":"32. Longest Valid Parentheses\n直接在stack中push括号的话不可以分辨留在栈中的括号的index，所以push每个符号的index。\n\n栈中需要留一个-1来计算都是完整括号的状况，因为-1一直在栈中所以需要stack.size() > 1，否则会溢出。\n\npublic int longestValidParentheses(String s) {\n    int res = 0;\n    LinkedList stack = new LinkedList<>();\n    stack.push(-1);\n    for (int i = 0; i  1 && s.charAt(stack.peek()) == '(') {\n            stack.pop(); // pop '(' index in the stack\n            res = Math.max(res, i - stack.peek());\n        } else {\n            stack.push(i);\n        }\n    }\n    return res;\n}\n\n"},"alg/227_Basic_Calculator_II.html":{"url":"alg/227_Basic_Calculator_II.html","title":"227. Basic Calculator II","keywords":"","body":"227. Basic Calculator II\n字符串的每一位有三种情况，数字，符号和空格。\n\n计算每个操作数num, 放入操作数栈stack中\n记录每个操作数之前的符号位sign，根据符号位的不同采用不同的操作。需要注意最后一个操作数也需要之前记录的符号位对其进行计算\n最后将操作数栈中所有的结果相加\n\npublic int calculate(String s) {\n    if (s == null || s.length() == 0) return 0;\n    LinkedList stack = new LinkedList<>();\n    int num = 0;\n    char sign = '+';\n    for (int i = 0; i \n"},"alg/200_Number_of_Islands.html":{"url":"alg/200_Number_of_Islands.html","title":"200. Number of Islands","keywords":"","body":"200. Number of Islands\nDFS，时间复杂度O(m * n)，数据过大栈有限制。\npublic int numIslands(char[][] grid) {\n    if (grid == null || grid.length == 0) return 0;\n\n    int count = 0;\n    for (int i = 0; i = grid.length || i = grid[0].length || j \n\nBFS\npublic int numIslands(char[][] grid) {\n    if (grid == null || grid.length == 0) return 0;\n    int count = 0;\n    Queue queue = new LinkedList<>();\n    int[] dx = {0, 0, 1, -1};\n    int[] dy = {1, -1, 0, 0};\n    int row = grid.length; \n    int col = grid[0].length;\n    for (int i = 0; i = row || newy = col || grid[newx][newy] != '1')\n                            continue;\n                        grid[newx][newy] = '0';\n                        queue.offer(newx * col + newy);\n                    }\n                }\n            }\n        }\n    }\n    return count;\n\n"},"alg/79_Word_Search.html":{"url":"alg/79_Word_Search.html","title":"79. Word Search","keywords":"","body":"79. Word Search\nboard为二维数组的情况：\npublic boolean exist(char[][] board, String word) {\n    if (board == null || board.length == 0 || word == null) return false;\n    char[] words = word.toCharArray();\n    for (int i = 0; i = board.length || j >= board[0].length || board[i][j] != words[k])\n        return false;\n    // char tmp = board[i][j];\n    // board[i][j] = '#';\n    board[i][j] ^= 256;\n    boolean res = dfs(board, i + 1, j, words, k + 1) ||\n        dfs(board, i - 1, j, words, k + 1) ||\n        dfs(board, i, j + 1, words, k + 1) ||\n        dfs(board, i, j - 1, words, k + 1);\n    board[i][j] ^= 256;\n    // board[i][j] = tmp;\n    return res;\n}\n\nmatrix为一维数组，直接在matrix数组上进行修改，用临时变量保存或者异或256，做完一次dfs之后将matrix中的字母复原。\npublic boolean hasPath(char[] matrix, int rows, int cols, char[] str)\n{\n    if (matrix == null || matrix.length == 0 || str == null || str.length == 0) \n        return false;\n    for (int i = 0; i = rows || j = cols || matrix[index] != str[k])\n        return false;\n    // 1.临时变量\n    // char tmp = matrix[index];\n    // matrix[index] = '-';\n    // 2.异或修改\n    matrix[index] ^= 256;\n    boolean res = dfs(matrix, rows, cols,i - 1, j, str, k + 1)||\n        dfs(matrix,rows, cols, i + 1, j, str, k + 1) ||\n        dfs(matrix,rows, cols, i, j - 1, str, k + 1) ||\n        dfs(matrix, rows, cols,i, j + 1, str, k + 1);\n    matrix[index] ^= 256;\n    // matrix[index] = tmp;\n    return res;\n}\n\n设置flag(visited)数组：\npublic boolean hasPath(char[] matrix, int rows, int cols, char[] str)\n{\n    if (matrix == null || matrix.length == 0 || str == null || str.length == 0) \n        return false;\n    boolean[] flag = new boolean[matrix.length];\n    for (int i = 0; i = rows || j = cols || matrix[index] != str[k] || flag[index]) \n        return false;\n    flag[index] = true;\n    boolean res = dfs(matrix, rows, cols,i - 1, j, str, k + 1, flag)||\n        dfs(matrix,rows, cols, i + 1, j, str, k + 1, flag) ||\n        dfs(matrix,rows, cols, i, j - 1, str, k + 1, flag) ||\n        dfs(matrix, rows, cols,i, j + 1, str, k + 1, flag);\n    flag[index] = false;\n    return res;\n}\n\n机器人的运动范围：\n地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？\n思路：\n\n设置一个visited数组记录访问过的位置。\n递归终止条件：超出边界 or 已经访问过 or 超出坐标阈值\n标记\ndfs + 1\n\npublic int movingCount(int threshold, int rows, int cols)\n{\n    boolean[][] visited = new boolean[rows][cols];\n    return dfs(threshold, rows, cols, 0, 0, visited);\n}\n\npublic int dfs(int threshold, int rows, int cols, int i, int j, boolean[][] visited) {\n    if (i =rows || j >= cols || visited[i][j] || getSum(i) + getSum(j) > threshold) \n        return 0;\n    visited[i][j] = true;\n    return dfs(threshold, rows, cols, i - 1, j, visited) +\n        dfs(threshold, rows, cols, i + 1, j, visited) +\n        dfs(threshold, rows, cols, i, j - 1, visited) + \n        dfs(threshold, rows, cols, i, j + 1, visited) + 1;\n}\n\n// 得到行或者列每位的和\npublic int getSum(int t){\n    int sum = 0;\n    while (t != 0){\n        sum += t % 10;\n        t /= 10;\n    }\n    return  sum;\n}\n\n"},"alg/36_Valid_Sudoku.html":{"url":"alg/36_Valid_Sudoku.html","title":"36. Valid Sudoku","keywords":"","body":"36. Valid Sudoku\n根据条件判断，在不为空的格子中，同一列没有相同的元素，同一行没有相同的元素，同一个subgrid没有一样的元素。特别注意边界的取值范围。\npublic boolean isValidSudoku(char[][] board) {\n    for (int i = 0; i \n"},"alg/37_Sudoku_Solver.html":{"url":"alg/37_Sudoku_Solver.html","title":"37. Sudoku Solver","keywords":"","body":"37. Sudoku Solver\n注意solve函数的写法\npublic void solveSudoku(char[][] board) {\n    solve(board);\n}\n\npublic boolean solve(char[][] board) {\n    for (int i = 0; i \n"},"5_bitmanipulation.html":{"url":"5_bitmanipulation.html","title":"Bit manipulation","keywords":"","body":"Bit manipulation\n难点：二进制运算的意义，数字的范围\n操作：移位，一元操作符\n\n数字的位数和范围\n\n可直接在java常见包装类中调用MIN_VALUE和MAX_VALUE进行查看。但是常识还是需要一些记忆。溢出之后会在min和max值中相互转换。\n基本类型：byte 二进制位数：8\n包装类：java.lang.Byte\n最小值：Byte.MIN_VALUE=-128 // 0x80000000;\n最大值：Byte.MAX_VALUE=127  // 0x7fffffff;\n\n基本类型：short 二进制位数：16\n包装类：java.lang.Short\n最小值：Short.MIN_VALUE=-32768\n最大值：Short.MAX_VALUE=32767\n\n基本类型：int 二进制位数：32\n包装类：java.lang.Integer\n最小值：Integer.MIN_VALUE=-2147483648\n最大值：Integer.MAX_VALUE=2147483647\n\n基本类型：long 二进制位数：64\n包装类：java.lang.Long\n最小值：Long.MIN_VALUE=-9223372036854775808\n最大值：Long.MAX_VALUE=9223372036854775807\n\n基本类型：float 二进制位数：32\n包装类：java.lang.Float\n最小值：Float.MIN_VALUE=1.4E-45\n最大值：Float.MAX_VALUE=3.4028235E38\n\n基本类型：double 二进制位数：64\n包装类：java.lang.Double\n最小值：Double.MIN_VALUE=4.9E-324\n最大值：Double.MAX_VALUE=1.7976931348623157E308\n\n基本类型：char 二进制位数：16\n包装类：java.lang.Character\n最小值：Character.MIN_VALUE=0\n最大值：Character.MAX_VALUE=65535\n\n取最右边的1出现的位置:diff & -diff\n"},"alg/191_Number_of_1_Bits.html":{"url":"alg/191_Number_of_1_Bits.html","title":"191. Number of 1 Bits","keywords":"","body":"191. Number of 1 Bits\n计算一串二进制中1的个数\n移位法，根据最右边一位是1的奇数n & 1 = 1的性质，每次把n右移一位，累加n & 1的和，最后算出来的就是1的个数。\npublic int hammingWeight(int n) {\n    int res = 0;\n    while (n != 0) {\n        res += (n & 1);\n        n >>>= 1;\n    }\n    return res;\n}\n\n如果n输入的是负数，需要注意下>>>和>>的区别:\n\n>>是带着符号的右移，左边由于移位空缺出来的数字会由这个数字的符号位补全（正数补0负数补1），所以负数最终会变成-1，举例来说: -1的二进制是11111111 11111111 11111111 11111111如果选择有符号右移，那么移来移去还是它本来的数字-1，结果永远不是0，就会产生死循环。负数的二进制是补码..\n\n-1073741824\n-536870912\n-268435456\n-134217728\n-67108864\n-33554432\n-16777216\n...\n-1\n-1\n...\n\n\n>>>是无符号右移，左边补0，对于-1来说11111111 11111111 11111111 11111111会变成2^31也就是2147483647，通过循环，最终可以到达0\n\n调库法\npublic int hammingWeight(int n) {\n    return Integer.bitCount(n);\n}\n\npublic static int bitCount(int i) {\n    // HD, Figure 5-2\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    i = (i + (i >>> 4)) & 0x0f0f0f0f;\n    i = i + (i >>> 8);\n    i = i + (i >>> 16);\n    return i & 0x3f;\n}\n\n\nhttps://doc.lagout.org/security/Hackers%20Delight.pdf\npython字符串\nreturn [c for c in bin(n)[2:]].count('1')\n\n"},"alg/461_Hamming_Distance.html":{"url":"alg/461_Hamming_Distance.html","title":"461. Hamming Distance","keywords":"","body":"461. Hamming Distance\n移位法，用1作为mask后异或算出个数。\npublic int hammingDistance(int x, int y) {\n    int res = 0;\n    while (x != 0 || y != 0) {\n        res += (x & 1) ^ (y & 1);\n        x >>>= 1;\n        y >>>= 1;\n    }\n    return res;\n}\n\n调库\nreturn Integer.bitCount(x ^ y);\n\n"},"alg/136_Single_Number.html":{"url":"alg/136_Single_Number.html","title":"136. Single Number","keywords":"","body":"136. Single Number\n异或\npublic int singleNumber(int[] nums) {\n    int res = 0;\n    for (int num : nums) {\n        res ^= num;\n    }\n    return res;\n}\n\n熟悉下set\npublic int singleNumber(int[] nums) {\n    if (nums == null || nums.length  set = new HashSet<>();\n    for (int num : nums) {\n        if (set.contains(num)) set.remove(num); //remove duplicated\n        else set.add(num); \n    }\n    return set.iterator().next();\n}\n\n两倍的set和减去原数组和, (2+1)*2 - 2+2+1)\nreturn sum(set(nums)) * 2 - sum(nums)\n\n"},"alg/137_Single_Number_II.html":{"url":"alg/137_Single_Number_II.html","title":"137. Single Number II","keywords":"","body":"137. Single Number II\n"},"alg/260_Single_Number_III.html":{"url":"alg/260_Single_Number_III.html","title":"260. Single Number III","keywords":"","body":"260. Single Number III\n在一堆出现二的数字中返回两个只出现一次的数字。\nInput:  [1,2,1,3,2,5]\nOutput: [3,5]\n\n使用two sum的方法异或，慢慢\npublic int[] singleNumber(int[] nums) {\n    int sum = 0;\n    Set set = new HashSet<>();\n    for (int num : nums) {\n        set.add(num);\n        sum ^= num;\n    }\n    for (int num : nums) {\n        int other = sum ^ num;\n        if (set.contains(other)) return new int[] {num, other};\n    }\n    return null;\n}\n\n所有的数字xor之后的二进制sum结果至少会有一位被置1，然后找到sum中最后一位被置1的位作为mask，然后使用这个mask遍历整个数组，计算res = mask ^ num，当res分别为0和其他数的时候，就可以把这两个数字筛选出来。\npublic int[] singleNumber(int[] nums) {\n    int diff = 0;\n    for (int num : nums) {\n        diff ^= num;\n    }\n\n    int mask = (diff & -diff);\n\n    int[] res = new int[2];\n    for (int num : nums) {\n        if ((num & mask) == 0) { \n            res[0] ^= num;\n        } else {\n            res[1] ^= num;\n        }\n    }\n    return res;\n}\n\n"},"alg/231_Power_of_Two.html":{"url":"alg/231_Power_of_Two.html","title":"231. Power of Two","keywords":"","body":"231. Power of Two\n求n是否为pow(2, x)，由于the power of two刚好进位，所以只有最高位是1，和它的n-1的二进制刚好错开。n大于0\n... 10000   \n... 01111  &\n---------------\n    = 0\npublic boolean isPowerOfTwo(int n) {\n    return  n > 0 && (n & (n - 1)) == 0;\n}\n\n"},"alg/371_Sum_of_Two_Integers.html":{"url":"alg/371_Sum_of_Two_Integers.html","title":"371. Sum of Two Integers","keywords":"","body":"371. Sum of Two Integers\n用位运算实现加法，^求和，&左移求进位，进位为0时返回答案\n2 + 3\na          b          a        b\n010        010       001       001\n011 ^      011&      100^      100^ \n----       ----      ----      -----\n001        010       101       000       return 5\n\npublic int getSum(int a, int b) {\n    while (b != 0) {\n        int sum = a ^ b;\n        int carry = (a & b) \n"},"alg/387_First_Unique_Character_in_a_String.html":{"url":"alg/387_First_Unique_Character_in_a_String.html","title":"387. First Unique Character in a String","keywords":"","body":"387. First Unique Character in a String\n找出字符串中第一个没有重复的字符。建立一个简单的字母哈希表，进行计数和检查。\npublic int firstUniqChar(String s) {\n    int length = 'z' - 'A' + 1;\n    int[] hash = new int[length]; // init with 0\n    // count\n    for (int i = 0; i \nindex 0 1 .. 58\n      A B .. z\ncount 0 0 .. 0\n求流中第一个只出现一次的字符，用stringbuffer。如果是string必须初始化为\"\"，因为如果一个string指向没有分配内存空间的时候，会打印出\"null\"字符串\npublic static String valueOf(Object obj) {\n    return (obj == null) ? \"null\" : obj.toString();\n}\n\n//Insert one char from stringstream\nchar[] hash = new char[256];\n//StringBuffer s=new StringBuffer();\nString s = \"\"; // 必须初始化。。否则是null\npublic void Insert(char ch)\n{\n    s += ch;\n    //s.append(ch);\n    hash[ch]++;\n}\n//return the first appearence once char in current stringstream\npublic char FirstAppearingOnce()\n{\n    //char[] str=s.toString().toCharArray();\n    for (int i = 0; i \n"},"alg/705_Design_HashSet.html":{"url":"alg/705_Design_HashSet.html","title":"705. Design HashSet","keywords":"","body":"705. Design HashSet\nclass MyHashSet {\n    Integer[] set;\n    /** Initialize your data structure here. */\n    public MyHashSet() {\n        this.set = new Integer[1000000]; //int[] cannot assign null value\n    }\n\n    public void add(int key) {\n        int index = computeHash(key);\n        if (!contains(key)) {\n            this.set[index] = key;\n        }\n    }\n\n    public void remove(int key) {\n        int index = computeHash(key);\n        if (contains(key)) {\n            this.set[index] = null;\n        }\n    }\n\n    /** Returns true if this set contains the specified element */\n    public boolean contains(int key) {\n        int index = computeHash(key);\n        if (this.set[index] != null) {\n            return true;\n        } else {\n            return false;\n        } \n    }\n\n    public int computeHash(int key) {\n        return key % this.set.length;\n    }\n}\n\n"}}}